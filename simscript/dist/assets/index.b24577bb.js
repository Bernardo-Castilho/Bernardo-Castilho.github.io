!function(e=".",t="__import__"){try{self[t]=new Function("u","return import(u)")}catch(s){const n=new URL(e,location),i=e=>{URL.revokeObjectURL(e.src),e.remove()};self[t]=e=>new Promise(((s,a)=>{const r=new URL(e,n);if(self[t].moduleMap[r])return s(self[t].moduleMap[r]);const l=new Blob([`import * as m from '${r}';`,`${t}.moduleMap['${r}']=m;`],{type:"text/javascript"}),o=Object.assign(document.createElement("script"),{type:"module",src:URL.createObjectURL(l),onerror(){a(new Error(`Failed to import: ${e}`)),i(o)},onload(){s(self[t].moduleMap[r]),i(o)}});document.head.appendChild(o)})),self[t].moduleMap={}}}("/assets/");class e{constructor(e,t){this.listener=e,this.self=t}}const t=class{};let s=t;s.empty=new t;class n{constructor(){this._listeners=[]}addEventListener(t,s){this._listeners.push(new e(t,s))}removeEventListener(e,t){for(let s=0;s<this._listeners.length;s++){let n=this._listeners[s];if((n.listener==e||null==e)&&(n.self==t||null==t)&&(this._listeners.splice(s,1),t))break}}raise(e,t){for(let s=0;s<this._listeners.length;s++){let n=this._listeners[s];n.listener.call(n.self,e,t)}}}function i(e,t){if(!e)throw console.error(t),t}function a(e,t=2){return function(e){let t=r[e];t||(t=r[e]=new Intl.NumberFormat(navigator.language,{useGrouping:!0,minimumFractionDigits:e,maximumFractionDigits:e}));return t}(t).format(e)}const r={};function l(e,t,s,n=""){const i=document.getElementById(e),a="checkbox"==i.type,r="range"==i.type||"number"==i.type,l=i instanceof HTMLSelectElement;a?i.checked=t:l?i.selectedIndex=t:r?i.valueAsNumber=t:i.value=t;const o="range"==i.type?i.insertAdjacentElement("afterend",document.createElement("span")):null;o&&(o.textContent=` ${i.value}${n}`),i.addEventListener("input",(e=>{o&&(o.textContent=` ${i.value}${n}`);const t=a?i.checked:l?i.selectedIndex:r?i.valueAsNumber:i.value;s(t)}))}function o(e,t){if(t)for(let s in t)i(s in e,`Property ${s} is not defined`),e[s]instanceof n?e[s].addEventListener(t[s]):e[s]=t[s]}function h(e){let t="string"==typeof e?document.querySelector(e):e;return i(t instanceof Element,"Element not found:"+e),t}const u=class{constructor(e){this._sim=null,this._queues=new Map,this._serial=0,this._prty=0,this._serial=u._serial++,o(this,e)}get simulation(){return this._sim}get serial(){return this._serial}get priority(){return this._prty}set priority(e){this._prty=e}async delay(e,t){return i(null==t||t.queues.length>1,"delay path should have at least two queues"),new q(this,{delay:e,path:t}).promise}async enterQueue(e,t=1){return new q(this,{queue:e,units:t}).promise}enterQueueImmediately(e,t=1){e.add(this,t)}leaveQueue(e){e.remove(this)}async waitSignal(e){return new q(this,{signal:e}).promise}sendSignal(e,t){let s=this.simulation._fec,n=0;for(let i=0;i<s.length&&!(null!=t&&n>=t);i++){let t=s[i];t.options.signal==e&&(t.ready=!0,n++)}return n}dispose(){if(this._queues.size){let e=[];Array.from(this._queues.keys()).forEach((t=>e.push(t.name))),i(!1,`Entity finished script without leaving all queues: ${e.join(", ")}.`)}}toString(){return this.constructor.name+"#"+this.serial.toString()}async script(){}};let c=u;c._serial=0;class m extends c{constructor(e,t,s,n,i){super(),this._type=e,this._interval=t,this._max=s,this._tmStart=n,this._tmEnd=i}async script(){const e=this.simulation,t=e.timeNow,s=this._interval;null!=this._tmStart&&t<this._tmStart&&await this.delay(this._tmStart-t),s&&null==this._tmStart&&await this.delay(s.sample()/2);for(let i=0;!(null!=this._max&&i>=this._max)&&!(null!=this._tmEnd&&e.timeNow>this._tmEnd);i++){var n=new this._type;if(this.simulation.activate(n),!s)break;await this.delay(s.sample())}}}var d,p;(p=d||(d={}))[p.Paused=0]="Paused",p[p.Finished=1]="Finished",p[p.Running=2]="Running";class g{constructor(e){this._fec=[],this._tmNow=0,this._tmEnd=null,this._tmMaxStep=0,this._frameDelay=0,this._tmStart=0,this._tmElapsed=0,this._state=0,this._stopRequested=!1,this._queues=[],this._lastUpdate=0,this._yieldInterval=100,this.starting=new n,this.started=new n,this.finishing=new n,this.finished=new n,this.stateChanging=new n,this.stateChanged=new n,this.timeNowChanging=new n,this.timeNowChanged=new n,o(this,e)}get state(){return this._state}get timeEnd(){return this._tmEnd}set timeEnd(e){this._tmEnd=e}get maxTimeStep(){return this._tmMaxStep}set maxTimeStep(e){this._tmMaxStep=e}get frameDelay(){return this._frameDelay}set frameDelay(e){this._frameDelay=e}get timeElapsed(){return 0==this._state?this._tmElapsed:Date.now()-this._tmStart}get timeNow(){return this._tmNow}get yieldInterval(){return this._yieldInterval}set yieldInterval(e){this._yieldInterval=e}async start(e=!1){2!=this.state&&(this._stopRequested=!1,(e=e||0==this._fec.length)&&(this._queues.forEach((e=>e.reset())),this._fec=[],this._queues=[],this._setTimeNow(0),this.onStarting()),this._tmStart=Date.now(),this._setState(2),e&&this.onStarted(),this._step())}stop(){2==this.state&&(this._stopRequested=!0)}async activate(e){i(null==e.simulation,"Entity "+e.toString()+" is already active"),e._sim=this,await e.script(),e.dispose(),e._sim=null}generateEntities(e,t,s,n,i){const a=new m(e,t,s,n,i);this.activate(a)}get queues(){return this._queues}getStatsTable(e=!1){return'<table class="ss-stats">'+this._createSimulationReport()+this._createQueueReport("Populations","grossPop")+(e?this._createQueueReport("Net Populations","netPop"):"")+this._createQueueReport("Dwell Times","grossDwell")+(e?this._createQueueReport("Net Dwell Times","netDwell"):"")+"</table>"}onStarting(e=s.empty){this.starting.raise(this,e)}onStarted(e=s.empty){this.started.raise(this,e)}onFinishing(e=s.empty){this.finishing.raise(this,e)}onFinished(e=s.empty){this.finished.raise(this,e)}onStateChanging(e=s.empty){this.stateChanging.raise(this,e)}onStateChanged(e=s.empty){this.stateChanged.raise(this,e)}onTimeNowChanging(e=s.empty){this.timeNowChanging.raise(this,e)}onTimeNowChanged(e=s.empty){this.timeNowChanged.raise(this,e)}_setState(e){e!=this._state&&(this.onStateChanging(),this._state=e,this.onStateChanged())}_setTimeNow(e){e!=this._tmNow&&(this.onTimeNowChanging(),this._tmNow=e,this.onTimeNowChanged())}async _step(){let e=await this._scanFec();if(this._stopRequested)return this._tmElapsed=Date.now()-this._tmStart,void this._setState(0);if(null!=this._tmEnd&&this._tmNow>=this._tmEnd||e<0)return this._fec=[],this._tmElapsed=Date.now()-this._tmStart,this.onFinishing(),this._setState(1),void this.onFinished();this.maxTimeStep&&this.maxTimeStep>0&&e>0&&(e=Math.min(e,this._tmNow+this.maxTimeStep)),e>0&&this._setTimeNow(e),this.frameDelay&&this.frameDelay>0&&await new Promise((e=>setTimeout(e,this.frameDelay)));const t=Date.now();t-this._lastUpdate>this._yieldInterval?(this._lastUpdate=t,requestAnimationFrame((()=>this._step()))):this._step()}async _scanFec(){let e=this._fec,t=0,s=null;for(var n=0;n<e.length;n++){let i=e[n];if(i.ready){e.splice(n,1),t++,await i.dispatch(),n=-1;continue}const a=i.timeDue;null!=a&&(null==s||s>a)&&(s=a)}return t>0?0:null==s?-1:s}_createSimulationReport(){return`\n            <tr>\n                <th colspan="2">${this.constructor.name}</th>\n            </tr>\n            <tr>\n                <th>Finish Time</th>\n                <td>${a(this.timeNow,0)}</td>\n            </tr>\n            <tr>\n                <th>Elapsed Time (s)</th>\n                <td>${a(this.timeElapsed/1e3)}</td>\n            <tr>`}_createQueueReport(e,t){const s=t.indexOf("Pop")>-1;let n=`<tr>\n                <th colspan="6">\n                    ${e}\n                </th>\n            </tr>\n            <tr>\n                <th>Queue</th>\n                <th>Min</th>\n                <th>Avg</th>\n                <th>Max</th>\n                <th>StDev</th>\n                <th>${s?"":"Cnt"}</th>\n            </tr>`;return this.queues.forEach((e=>{if(e.name&&e.grossDwell.cnt){let i=e[t];n+=`<tr>\n                    <th>${e.name}</th>\n                    <td>${a(i.min)}</td>\n                    <td>${a(i.avg)}</td>\n                    <td>${a(i.max)}</td>\n                    <td>${a(i.stdev)}</td>\n                    <td>${s?"":a(i.cnt,0)}</td>\n                </tr>`}})),n}}class q{constructor(e,t){this._e=e,this._ready=!1,this._options=t;let s=e.simulation,n=s._fec,i=n.length;for(;i>0&&n[i-1].e.priority<e.priority;)i--;n.splice(i,0,this),this._tmStart=s.timeNow,null!=t.delay&&(this._tmDue=s.timeNow+t.delay),this._promise=new Promise(((e,t)=>{this._resolve=e}))}get e(){return this._e}get options(){return this._options}get ready(){if(this._ready)return!0;const e=this.options;return!(!e.queue||!e.queue.canEnter(e.units))||null!=this._tmDue&&this._tmDue<=this._e.simulation.timeNow}set ready(e){this._ready=e}get timeStart(){return this._tmStart}get timeDue(){return this._tmDue}async dispatch(){const e=this._options,t=e.queue;if(t){const s=e.units;t.add(this._e,null!=s?s:1)}return this._resolve?await this._resolve():null}get promise(){return this._promise}}class x{constructor(e){this._cnt=0,this._min=0,this._max=0,this._sum=0,this._sum2=0,this._histo=null,this._histoParms=null,o(this,e)}get min(){return this._min}get max(){return this._max}get cnt(){return this._cnt}get avg(){return this._cnt>0?this._sum/this._cnt:0}get var(){return this._cnt>0&&this._max>this._min?Math.max(0,(this._sum2-this._sum*this._sum/this._cnt)/this._cnt):0}get stdev(){return Math.sqrt(this.var)}add(e,t=1){if(i(t>=0,"Tally weights must be >= 0"),(!this._cnt||e>this._max)&&(this._max=e),(!this._cnt||e<this._min)&&(this._min=e),this._cnt+=t,this._sum+=e*t,this._sum2+=e*e*t,this._histo){e=function(e,t,s){return null!=t&&e<t?t:null!=s&&e>s?s:e}(e,this._histoParms.min,this._histoParms.max);let s=Math.floor(e/this._histoParms.size),n=this._histo.get(s)||0;this._histo.set(s,n+t)}}getHistogram(){if(this._histo){const e=this._histo,t=Array.from(e.keys());t.sort(((e,t)=>e-t));for(let i=1;i<t.length;i++)t[i]>t[i-1]+1&&t.splice(i,0,t[i-1]+1);const s=this._histoParms.size;let n=t.map((t=>({from:t*s,to:(t+1)*s,count:e.get(t)||0})));if(n.length){const e=this._histoParms,t=e.min,s=e.max;null!=t&&n[0].from>this.min&&(n[0].from=this.min),null!=s&&n[n.length-1].to<this.max&&(n[n.length-1].to=this.max)}return n}return null}getHistogramChart(e=""){let t=this.getHistogram();if(!t||!t.length)return"";let s=0;t.forEach((e=>s=Math.max(s,e.count)));const n=Math.round(1/t.length*100),i=this._histoParms.size<1?1:0;let r="";return t.forEach(((e,t)=>{const l=this.avg>=e.from&&this.avg<=e.to?' class="avg"':"",o=Math.round(e.count/s*100),h=t*n;r+=`<g${l}>\n                <title>${e.count}</title>\n                <rect\n                    ${l}\n                    x="calc(${h}% + 5px)"\n                    width="calc(${n}% - 10px)"\n                    y="calc(${100-o}% - 1.2em)"\n                    height="${o}%" />\n                <text\n                    ${l}\n                    x="${h+n/2}%"\n                    y="100%"\n                    text-anchor="middle"\n                    dominant-baseline="text-top">\n                    ${a(e.from,i)}-${a(e.to,i)}\n                </text>\n            </g>`})),`\n            <figure class="ss-histogram">\n                <figcaption>${e}</figcaption>\n                <svg width="100%" height="100%">\n                    ${r}\n                </svg>\n            </figure>`}setHistogramParameters(e,t=null,s=null){e?(i(e>0,"bin size must be positive"),i(null==t||null==s||t<=s,"histogram min must be <= max"),this._histoParms={size:e,min:t,max:s},this._histo=new Map):(this._histoParms=null,this._histo=null)}reset(){this._cnt=this._max=this._min=this._sum=this._sum2=0,this._histo&&this._histo.clear()}}class _{constructor(e,t=null,s){this._sim=null,this._name="",this._capy=null,this._items=new Map,this._tmLastChange=0,this._inUse=0,this._totalIn=0,this._grossPop=new x,this._grossDwell=new x,this._netPop=new x,this._netDwell=new x,this._name=e,this._capy=t,o(this,s)}get name(){return this._name}set name(e){this._name=e}get capacity(){return this._capy}set capacity(e){this._capy=e}get unitsInUse(){return this._inUse}get pop(){return this._items.size}get totalIn(){return this._totalIn}get entities(){return Array.from(this._items.keys())}get items(){return this._items}get lastChange(){return this._tmLastChange}get grossPop(){return this._grossPop}get grossDwell(){return this._grossDwell}get netPop(){return this._netPop}get netDwell(){return this._netDwell}canEnter(e=1){return null==this.capacity||this.unitsInUse+e<=this.capacity}add(e,t=1){let s=this._sim;null==s?(s=this._sim=e.simulation,s.queues.push(this),this._tmLastChange=0):s!=e.simulation&&i(!1,"Queue already in use by another simulation"),i(null==this._items.get(e),e.toString()+" is already in queue"+this.name),i(this.canEnter(t),"Queue does not have enough capacity"),this._updatePopTallies(),e._queues.set(this,!0),this._items.set(e,new y(e,t,s.timeNow)),this._inUse+=t,this._totalIn++}remove(e){let t=this._items.get(e);i(null!=t,"Entity "+e.toString()+" is not in queue "+this.toString()),this._updatePopTallies(),this._updateDwellTallies(t.timeIn),this._items.delete(e),e._queues.delete(this),this._inUse-=t.units}reset(){this._sim=null,this._inUse=0,this._totalIn=0,this._tmLastChange=0,this._items.clear(),this._grossPop.reset(),this._grossDwell.reset(),this._netPop.reset(),this._netDwell.reset()}_updatePopTallies(){const e=this._inUse,t=this._sim.timeNow,s=t-this._tmLastChange;i(s>=0,"Time delta cannot be negative"),this._grossPop.add(e,s),e&&this._netPop.add(e,s),this._tmLastChange=t}_updateDwellTallies(e){const t=this._sim.timeNow-e;i(t>=0,"Dwell cannot be negative"),this._grossDwell.add(t,1),t>0&&this._netDwell.add(t,1)}}class y{constructor(e,t,s){this._e=e,this._units=t,this._timeIn=s}get entity(){return this._e}get units(){return this._units}get timeIn(){return this._timeIn}}class w{constructor(e,t,s){this._queues=new Map,this._rotateEntities=!1,this._toQueueEnd=!0,this._entities=new Map,this._host=h(t),this._scene=this._host,"X3D"==this.hostTag&&(this._scene=this._host.querySelector("scene")),this._sim=e,this._sim.timeNowChanged.addEventListener(this.updateDisplay,this),e.yieldInterval=15,this._lastUpdate=0,this._entities=new Map,s&&o(this,s)}get hostElement(){return this._host}get hostTag(){return this._host.tagName.toUpperCase()}get isThreeD(){const e=this.hostTag;return"X3D"==e||"A-SCENE"==e}get sceneElement(){return this._scene}get getEntityHtml(){return this._getEntityHtml}set getEntityHtml(e){this._getEntityHtml=e}get rotateEntities(){return this._rotateEntities}set rotateEntities(e){this._rotateEntities=e}get animateToQueueEnd(){return this._toQueueEnd}set animateToQueueEnd(e){this._toQueueEnd=e}get queues(){return this._queueArray}set queues(e){this._queueArray=e,e.forEach((e=>{let t=new f(this,e);this._queues.set(t._q,t)}))}_getAnimatedEntity(e){let t=this._entities.get(e);return t||(t=new v(this,e),this._entities.set(e,t)),t}updateDisplay(){const e=this._host,t=this._sim,s=e.getBoundingClientRect();if(s.height!=this._height||s.width!=this._width){this._height=s.height,this._width=s.width;for(let e of this._queues.values())e._ptStart=null}this._entities.forEach((e=>{e._inUse=!1}));for(let n of this._queues.values())n._draw();t._fec.forEach((e=>{if(e.options.path&&null!=e.timeDue){const t=this._getAnimatedEntity(e.e),s=e.options.path,n=null!=s.tension?s.tension:.1,a=[];s.queues.forEach(((e,t)=>{const n=this._queues.get(e);i(null!=n,"Queue missing animation info"),a.push(this._toQueueEnd&&2==s.queues.length&&t>0&&n._ptEnd||n._getStart())}));let r=e.timeStart,l=e.timeDue,o=1-(l-this._sim.timeNow)/(l-r),h=function(e,t,s){if(2==e.length)return{point:b.interpolate(e[0],e[1],s),angle:E(e[0],e[1])};let n=0;for(let i=0;i<e.length-1;i++)n+=b.distance(e[i],e[i+1]);let a=n*s,r=0,l=0,o=0;for(let i=0;i<e.length-1;i++){if(o=b.distance(e[i],e[i+1]),l+o>=a){r=i;break}l+=o}return a-=l,i((s=a/(o||.01))>=0&&s<=1.0000001,"position percentage out of range"),0==r?S(e[0],e[0],e[1],e[2],t,s):r==e.length-2?S(e[r-1],e[r],e[r+1],e[r+1],t,s):S(e[r-1],e[r],e[r+1],e[r+2],t,s)}(a,n,o),u=h.angle;t._drawAt(h.point,this.rotateEntities?u:0)}})),this._lastUpdate=t.timeNow,this._entities.forEach(((e,t)=>{if(!e._inUse){this._entities.delete(t);let s=e._element;s&&s.parentElement&&s.parentElement.removeChild(s)}}))}}class f{constructor(e,t){this._angle=0,this._anim=e,this._q=t.queue,this._element=h(t.element),this._max=t.max,this._angle=t.angle||0,i(this._q instanceof _,"q parameter should be a Queue")}_getStart(){if(!this._ptStart){const e=this._element,t=this._anim;switch(t.hostTag){case"X3D":this._ptStart=new C(e).center;break;case"A-SCENE":const s=e.object3D.position;this._ptStart=new b(s.x,s.y,s.z);break;case"SVG":const n=e.getBBox();this._ptStart=new b(n.x+n.width/2,n.y+n.height/2,0);break;default:const i=t.hostElement.getBoundingClientRect(),a=e.getBoundingClientRect();this._ptStart=new b(a.left-i.left+a.width/2,a.top-i.top+a.height/2,0)}}return this._ptStart}_draw(){let e=this._anim;if(this._q.lastChange<e._lastUpdate){for(let t of this._q.items.values()){let s=e._entities.get(t.entity);s&&(s._inUse=!0)}return}let t=this._getStart().clone();this._ptEnd=null;let s=0;for(let n of this._q.items.values()){if(null!=this._max&&s>=this._max)break;const i=n.entity,a=this._angle*(e.isThreeD?-1:1),r=-a/180*Math.PI,l=Math.sin(r),o=-Math.cos(r),h=e._getAnimatedEntity(i),u=h._width*o/2,c=(e.rotateEntities?h._width:h._height)*l/2;t.x+=u,t.y+=c,h._drawAt(t,a),t.x+=u,t.y+=c,s++}this._ptEnd=t}}class v{constructor(e,t){let s;switch(this._anim=e,this._entity=t,this._inUse=!1,e.hostTag){case"X3D":s=document.createElement("transform");break;case"A-SCENE":s=document.createElement("a-entity");break;case"SVG":s=document.createElementNS("http://www.w3.org/2000/svg","g"),s.style.opacity="0";break;default:s=document.createElement("div"),s.style.opacity="0"}switch(s.innerHTML=this._getEntityHtml(),s.classList.add("ss-entity"),this._element=s,e.sceneElement.appendChild(s),this._width=this._height=this._depth=0,e.hostTag){case"X3D":const e=new C(s).size;this._width=e.x,this._height=e.y,this._depth=e.z;break;case"A-SCENE":requestAnimationFrame((()=>{const e=s.object3D,t=(new THREE.Box3).setFromObject(e);this._width=t.max.x-t.min.x,this._height=t.max.y-t.min.y,this._depth=t.max.z-t.min.z}));break;case"SVG":const t=s.getBBox();this._width=t.width,this._height=t.height;break;default:const n=s.getBoundingClientRect();this._width=n.width,this._height=n.height}}_getEntityHtml(){let e=this._anim.getEntityHtml;return e?e(this._entity):"&#9899;"}_drawAt(e,t){const s=this._anim,n=this._element;switch(s.hostTag){case"X3D":n.setAttribute("translation",`${e.x} ${e.y} ${e.z}`),n.setAttribute("rotation","0 0 1 "+(s.rotateEntities?t/180*Math.PI:0));break;case"A-SCENE":const i=n.object3D;i.position.set(e.x,e.y,e.z),i.rotation.set(0,0,t&&s.rotateEntities?t/180*Math.PI:0);break;case"SVG":default:const a=new b(e.x-this._width/2,e.y-this._height/2,e.z);let r=`translate(${Math.round(a.x)}px, ${Math.round(a.y)}px)`;t&&s.rotateEntities&&(r+=` rotate(${t}deg)`);const l=n.style;l.transform=r,l.opacity=""}this._inUse=!0}}class b{constructor(e=0,t=0,s=0){this.x=e,this.y=t,this.z=s}clone(){return new b(this.x,this.y,this.z)}static distance(e,t){const s=e.x-t.x,n=e.y-t.y,i=e.z-t.z;return Math.sqrt(s*s+n*n+i*i)}static interpolate(e,t,s){return new b(e.x+(t.x-e.x)*s,e.y+(t.y-e.y)*s,e.z+(t.z-e.z)*s)}}function S(e,t,s,n,i,a){const r=i*(s.x-e.x),l=i*(s.y-e.y),o=i*(s.z-e.z),h=i*(n.x-t.x),u=i*(n.y-t.y),c=i*(n.z-t.z),m=r+h+2*t.x-2*s.x,d=l+u+2*t.y-2*s.y,p=o+c+2*t.z-2*s.z,g=-2*r-h-3*t.x+3*s.x,q=-2*l-u-3*t.y+3*s.y,x=-2*o-c-3*t.z+3*s.z,_=r,y=l,w=o,f=t.x,v=t.y,S=t.z,C=new b(m*a*a*a+g*a*a+_*a+f,d*a*a*a+q*a*a+y*a+v,p*a*a*a+x*a*a+w*a+S),$=1==a?a-.02:a+.02;return{point:C,angle:E(C,new b(m*$*$*$+g*$*$+_*$+f,d*$*$*$+q*$*$+y*$+v,p*$*$*$+x*$*$+w*$+S))}}function E(e,t){const s=Math.atan2(t.y-e.y,t.x-e.x);return Math.round(180*s/Math.PI)}class C{constructor(e){this.center=new b,this.size=new b;const t=e.querySelectorAll("shape>:not(appearance)");if(0==t.length)this.applyGeometry(e),this.applyTransforms(e);else{this.applyGeometry(t[0]),this.applyTransforms(t[0]);for(let e=1;e<t.length;e++)this.merge(new C(t[e]))}}applyGeometry(e){const t=this.size;switch(e.tagName){case"BOX":t.x=t.y=t.z=2;let s=$(e,"size");s&&s.length>=3&&(t.x=s[0],t.y=s[1],t.z=s[2]);break;case"CONE":t.x=t.z=2*Math.max(T(e,"topRadius",0),T(e,"BottomRadius",0)),t.y=T(e,"height",0);break;case"CYLINDER":t.x=t.y=2*T(e,"radius",0),t.z=T(e,"height",0);break;case"SPHERE":t.x=t.y=t.z=2*T(e,"radius",1);break;default:console.log("skipping unknown geometry",e.tagName)}}applyTransforms(e){for(let t=e.closest("transform");null!=t;t=t.parentElement.closest("transform")){const e=$(t,"translation");if(e&&e.length>=3){const t=this.center;t.x+=e[0],t.y+=e[1],t.z+=e[2]}const s=$(t,"scale");if(s&&s.length>=3){const e=this.size;e.x*=s[0],e.y*=s[1],e.z*=s[2]}}}merge(e){const t=this.center,s=this.size,n=e.center,i=e.size,a=new b(Math.min(t.x-s.x/2,n.x-i.x/2),Math.min(t.y-s.y/2,n.y-i.y/2),Math.min(t.z-s.z/2,n.z-i.z/2)),r=new b(Math.max(t.x+s.x/2,n.x+i.x/2),Math.max(t.y+s.y/2,n.y+i.y/2),Math.max(t.z+s.z/2,n.z+i.z/2));t.x=(a.x+r.x)/2,t.y=(a.y+r.y)/2,t.z=(a.z+r.z)/2,s.x=r.x-a.x,s.y=r.y-a.y,s.z=r.y-a.y}}function $(e,t){const s=e.getAttribute(t),n=s?s.split(/\s*,\s*|\s+/):null;return n?n.map((e=>parseFloat(e))):null}function T(e,t,s){const n=e.getAttribute(t);return n?parseFloat(n):s}class D{constructor(e=null){this._seed=null,this._seed=e}sample(){if(null==this._seed)return Math.random();let e=this._seed+=1831565813;return e=Math.imul(e^e>>>15,1|e),e^=e+Math.imul(e^e>>>7,61|e),((e^e>>>14)>>>0)/4294967296}}class P extends D{constructor(e,t,s){super(s),i(t>=e,"max >= min"),this._min=e,this._max=t}get min(){return this._min}get max(){return this._max}sample(){return this._min+super.sample()*(this._max-this._min)}}class A extends D{constructor(e,t,s,n){super(n),i(e<=t&&t<=s,"min, mode, max should be in order"),this._min=e,this._peak=t,this._max=s}get min(){return this._min}get mode(){return this._peak}get max(){return this._max}sample(){const e=this._max-this._min,t=e>0?(this._peak-this._min)/e:0,s=super.sample();return s<=t?this._min+e*Math.sqrt(t*s):this._min+e*(1-Math.sqrt((1-t)*(1-s)))}}class M extends D{constructor(e,t,s){super(s),i(t.length==e.length,"x and y arrays should have the same length");for(let n=1;n<t.length;n++)i(e[n]>=e[n-1]&&t[n]>=t[n-1],"x and y arrays should be in ascending order");i(0==t[0]&&1==t[t.length-1],"y values should range from zero to one"),this._xVals=e,this._yVals=t}get xVals(){return this._xVals}get yVals(){return this._yVals}sample(){const e=super.sample(),t=this._xVals,s=this._yVals;let n=0;for(;e>s[n]&&n<s.length;)n++;return 0==n?t[0]:t[n-1]+(e-s[n-1])*(t[n]-t[n-1])/(s[n]-s[n-1])}}class k extends D{constructor(e,t){super(t),i(e>0,"mean >= 0"),this._mean=e}get mean(){return this._mean}sample(){return-this._mean*Math.log(super.sample())}}class z extends D{constructor(e,t,s=!0,n){super(n),this._positive=!0,i(t>=0,"std >= 0"),this._mean=e,this._std=t,this._positive=s}get mean(){return this._mean}get std(){return this._std}sample(){let e=this._n1;if(null!=e)this._n1=null;else{let t,s,n,i;do{t=2*super.sample()-1,s=2*super.sample()-1,n=t*t+s*s}while(n>1);i=Math.sqrt(-2*Math.log(n)/n),this._n1=t*i,e=s*i}let t=this._mean+this._std*e;return this._positive?Math.max(0,t):t}}class L extends D{constructor(e,t,s){super(s),i(t>=0,"std >= 0"),this._mean=e,this._std=t;let n=e*e,a=t*t,r=Math.log(n/Math.sqrt(n+a)),l=Math.sqrt(Math.log((n+a)/n));this._normal=new z(r,l,!1,s)}get mean(){return this._mean}get std(){return this._std}sample(){return 0==this._mean?0:Math.pow(Math.E,this._normal.sample())}}class N extends c{async script(){const e=this.simulation,t=e.randomVar,s=e.tally;s.reset(),s.setHistogramParameters(t.binSize);for(let n=0;n<e.sampleSize;n++)s.add(t.var.sample())}}class R extends D{sample(){return super.sample()<.5?8:80}}class X extends c{constructor(){super(...arguments),this.service=new P(12,18)}async script(){const e=this.simulation;await this.enterQueue(e.qWait),await this.enterQueue(e.qJoe),this.leaveQueue(e.qWait),await this.delay(this.service.sample()),this.leaveQueue(e.qJoe)}}class H extends c{async script(){let e=this.simulation;e.qWait.canEnter()?this.enterQueueImmediately(e.qWait):await this.enterQueue(e.qWait),e.qService.canEnter()?this.enterQueueImmediately(e.qService):await this.enterQueue(e.qService),this.leaveQueue(e.qWait),await this.delay(e.service.sample()),this.leaveQueue(e.qService)}}var Q,I;(I=Q||(Q={}))[I.RED=0]="RED",I[I.YELLOW=1]="YELLOW",I[I.GREEN=2]="GREEN";class W extends g{constructor(e){super(e),this.qPedArr=new _("Pedestrian Arrival"),this.qPedXing=new _("Pedestrian Crossing"),this.qPedXed=new _("Pedestrian Crossed"),this.qPedLeave=new _("Pedestrian Leaving"),this.walkToXing=new P(60,120),this.walkAway=new P(120,180),this.qCarArr=new _("Car Arrival"),this.qCarXing=new _("Car Crossing"),this.qCarXed=new _("Car Crossed"),this.driveToXing=new P(5,6),this.driveAway=new P(10,12),this.pedestrianArrivalInterval=new k(4),this.carArrivalInterval=new k(10),this.cycle={red:20,yellow:10,green:30},this.light=0,this.qPedXing.grossPop.setHistogramParameters(3),this.qCarXing.grossPop.setHistogramParameters(2),null==this.timeEnd&&(this.timeEnd=86400)}onStarting(){super.onStarting(),this.activate(new F),this.generateEntities(V,this.pedestrianArrivalInterval),this.generateEntities(U,this.carArrivalInterval)}}class V extends c{async script(){let e=this.simulation;for(await this.delay(e.walkToXing.sample(),{queues:[e.qPedArr,e.qPedXing]}),await this.enterQueue(e.qPedXing);2!=e.light;)await this.waitSignal(2);this.leaveQueue(e.qPedXing),await this.delay(e.walkAway.sample(),{queues:[e.qPedXing,e.qPedXed,e.qPedLeave]})}}class U extends c{async script(){let e=this.simulation;for(await this.delay(e.driveToXing.sample(),{queues:[e.qCarArr,e.qCarXing]}),await this.enterQueue(e.qCarXing);0!=e.light;)await this.waitSignal(0);this.leaveQueue(e.qCarXing),await this.delay(e.driveAway.sample(),{queues:[e.qCarXing,e.qCarXed]})}}class F extends c{async script(){let e=this.simulation;for(;;)this.setLight(2),await this.delay(e.cycle.green),this.setLight(1),await this.delay(e.cycle.yellow),this.setLight(0),await this.delay(e.cycle.red)}setLight(e){this.simulation.light=e,this.sendSignal(e)}}class B extends g{constructor(){super(...arguments),this.qAngle=270,this.qRotate=new _("Rotate"),this.qCenter=new _("qcenter"),this.q1=new _("q1"),this.q2=new _("q2"),this.q3=new _("q3"),this.q4=new _("q4"),this.q5=new _("q5"),this.q6=new _("q6"),this.q7=new _("q7"),this.q8=new _("q8"),this.q9=new _("q9"),this.q10=new _("q10"),this.q11=new _("q11"),this.q12=new _("q12"),this.splineTension=.5,this.interArrival=new P(5,10),this.moveDelayLong=new P(50,200),this.moveDelayShort=new P(30,60)}onStarting(){super.onStarting();for(let e=0;e<6;e++)this.activate(new O);this.generateEntities(G,this.interArrival,20)}}class O extends c{async script(){let e=this.simulation;for(;;)await this.enterQueue(e.qRotate),await this.delay(1),this.leaveQueue(e.qRotate)}}class G extends c{constructor(e){super(null),this.fast=!1,this.fast=this.serial%2==0,o(this,e)}async script(){let e=this.simulation;for(;;){const t=this.fast?e.moveDelayShort:e.moveDelayLong;await this.delay(t.sample(),{queues:[e.qCenter,e.q1,e.q2,e.q3,e.q4,e.q5,e.q11,e.q10,e.q9,e.q8,e.q7,e.qCenter],tension:e.splineTension})}}}function j(e,t,s,n=0){return`\n        <transform class='ss-queue ${e}' translation='${t} ${s} ${n}'>\n            <shape>\n                <appearance>\n                    <material transparency='0.9' diffuseColor='1 1 0'/>\n                </appearance>\n                <sphere radius='4'></sphere>\n            </shape>\n        </transform>`}function J(e,t,s,n,i,a,r){return`<transform class='ss-car ${e}' translation='0 0 ${s/2}'>\n        <transform>\n            <shape> \x3c!-- body --\x3e\n                <appearance>\n                    <material diffuseColor='${i} ${a} ${r}'></material>\n                </appearance>\n                <box size='${t} ${s} ${n}'></box>\n            </shape>\n            <shape render='false'> \x3c!-- 5 unit padding --\x3e\n                <box size='${1.1*t} ${1.1*s} ${1.1*n}'></box>\n            </shape>\n        </transform>\n        <transform translation='${.2*-t} 0 ${.5*+n}'>\n            <shape> \x3c!-- cabin --\x3e\n                <appearance>\n                    <material diffuseColor='${i/3} ${a/3} ${r/3}'></material>\n                </appearance>\n                <box size='${.5*t} ${.75*s} ${n}'></box>\n            </shape>\n        </transform>\n        <transform translation='${-t/2+4} 0 -2'>\n            <shape> \x3c!-- front wheels --\x3e\n                <appearance>\n                    <material diffuseColor='0 0 0'></material>\n                </appearance>\n                <cylinder radius='3' height='${s+2}'></cylinder>\n            </shape>\n        </transform>\n        <transform translation='${+t/2-4} 0 -2'>\n            <shape> \x3c!-- rear wheels --\x3e\n                <appearance>\n                    <material diffuseColor='0 0 0'></material>\n                </appearance>\n                <cylinder radius='3' height='${s+2}'></cylinder>\n            </shape>\n        </transform>\n    </transform>`}function Y(e,t,s,n){const i="&#9654; Run";let a=K(`\n        <div class='sim'>\n            <h2>\n                <button class='collapse'>-</button> ${t}\n            </h2>\n            <div class='body'>\n                <div class='intro'>\n                    ${s}\n                </div>\n                <button class='run'></button>\n                <div class='log'></div>\n            </div>\n        </div>`,document.body),r=a.querySelector("button.run"),l=a.querySelector("button.collapse"),o=a.querySelector(".body"),h=a.querySelector(".ss-anim"),u=a.querySelector("div.log");h&&n(e,h),n||(n=()=>{u.innerHTML="",K(e.getStatsTable(),u)}),l.addEventListener("click",(e=>{o.offsetHeight?(l.innerHTML="+",o.style.display="none"):(l.innerHTML="-",o.style.display="")})),r.innerHTML=i,r.addEventListener("click",(t=>{c=0,e.state==d.Running?e.stop():(e.start(!!t.ctrlKey||null),u.style.display="")})),e.stateChanged.addEventListener((()=>{r.innerHTML=e.state==d.Running?"&#9632; Stop":i,m()}));let c=0;e.timeNowChanged.addEventListener((()=>{let e=Date.now();e-c>500&&(c=e,m())}));const m=()=>{u&&n&&!h&&n(e,u)}}function K(e,t){let s=document.createElement("div");return s.innerHTML=e,1==s.children.length&&(s=s.children[0]),t&&t.appendChild(s),s}Y(new class extends g{constructor(e){super(e),this._tally=new x,this._sampleSize=1e3,this._seeded=!1,this._index=0,this.createRandomVars()}get seeded(){return this._seeded}set seeded(e){this._seeded=e,this.createRandomVars()}get sampleSize(){return this._sampleSize}set sampleSize(e){this._sampleSize=e}get randomVars(){return this._randomVars}get randomVar(){return this._randomVars[this._index]}get tally(){return this._tally}get randomVarIndex(){return this._index}set randomVarIndex(e){this._index=e}createRandomVars(){const e=this._seeded?1:null;this._randomVars=[{var:new D(e),name:"Uniform(0, 1)",binSize:.1},{var:new P(5,10,e),name:"Uniform(5, 10)",binSize:.5},{var:new A(5,6,10,e),name:"Triangular(5, 6, 10)",binSize:.5},{var:new M([5,8,10],[0,.8,1],e),name:"Empirical([5, 8, 10], [0, .8, 1])",binSize:.5},{var:new k(10,e),name:"Exponential(10)",binSize:20},{var:new z(10,2,!0,e),name:"Normal(10, 2)",binSize:2},{var:new L(10,2,e),name:"LogNormal(10, 2)",binSize:2},{var:new R(e),name:"EightEighty()",binSize:10}]}onStarting(){super.onStarting(),this.createRandomVars(),this.activate(new N)}},"RandomVarTest Simulation","<p>\n        This demo shows how to create and use\n        <a href='https://en.wikipedia.org/wiki/Random_variable'>random variable</a>\n        objects.\n    </p>\n    <p>\n        Random variables are used to obtain values for inter-arrival times,\n        service times, and other non-deterministic values.\n    </p>\n    <p>\n        Random variables may specify seed values, which cause the variable to\n        produce repeatable streams of random values. If a seed value is not\n        specified, then each run produces a different stream of random values.\n    </p>",((e,t)=>{t.innerHTML=`\n        <label>\n            Type:\n            <select id='rand-type'>${function(){let t="";return e.randomVars.forEach(((s,n)=>{t+=`<option ${n==e.randomVarIndex?"selected":""}>\n                    ${s.name}\n                </option>`})),t}()}</select>\n        </label>\n        <label>\n            Sample size:\n            <input id='rand-size' type='range' data='size' min='10' max='100000'>\n        </label>\n        <label>\n            Seeded:\n            <input id='rand-seeded' type='checkbox'>\n        </label>\n        <ul>\n            <li>Count: <b>${a(e.tally.cnt,0)}</b></li>\n            <li>Average: <b>${a(e.tally.avg)}</b></li>\n            <li>Standard Deviation: <b>${a(e.tally.stdev)}</b></li>\n            <li>Variance: <b>${a(e.tally.var)}</b></li>\n            <li>Min: <b>${a(e.tally.min)}</b></li>\n            <li>Max: <b>${a(e.tally.max)}</b></li>\n        </ul>`+e.tally.getHistogramChart(e.randomVar.name),l("rand-type",e.randomVarIndex,(t=>e.randomVarIndex=t)),l("rand-size",e.sampleSize,(t=>e.sampleSize=t)," samples"),l("rand-seeded",e.seeded,(t=>e.seeded=t))})),Y(new class extends g{constructor(){super(...arguments),this.qJoe=new _("Joe",1),this.qWait=new _("Wait Area")}onStarting(){super.onStarting(),this.timeEnd=3360,this.qWait.grossDwell.setHistogramParameters(1),this.generateEntities(X,new P(12,24))}},"BarberShop Simulation","<p>\n        This is a\n        <a\n            href='https://try-mts.com/gpss-introduction-and-barber-shop-simulation/'\n        >classic GPSS simulation example</a>:\n        customers arrive at a barbershop,\n        wait until the barber is available, get serviced, and leave.\n    </p>",((e,t)=>{t.innerHTML=`<ul>\n            <li>Simulated time: <b>${a(e.timeNow/60,0)}</b> hours</li>\n            <li>Elapsed time: <b>${a(e.timeElapsed/1e3,2)}</b> seconds</li>\n            <li>Barber Utilization: <b>${a(100*e.qJoe.grossPop.avg)}%</b></li>\n            <li>Average Wait: <b>${a(e.qWait.grossDwell.avg)}</b> minutes</li>\n            <li>Longest Wait: <b>${a(e.qWait.grossDwell.max)}</b> minutes</li>\n            <li>Waiting chairs needed: <b>${a(e.qWait.grossPop.max,0)}</b></li>\n            <li>Customers Served: <b>${a(e.qJoe.grossDwell.cnt,0)}</b></li>\n        </ul>`+e.getStatsTable(!0)+e.qWait.grossDwell.getHistogramChart("Waiting Times (min)")})),Y(new class extends g{constructor(){super(...arguments),this.qWait=new _("Wait"),this.qService=new _("Service",2),this.interArrival=new k(80),this.service=new k(100),this.tally=new x}onStarting(){super.onStarting(),this.interArrival=new k(this.interArrival.mean,1),this.service=new k(this.service.mean,2),this.qWait.grossPop.setHistogramParameters(1,0,10),this.qWait.grossDwell.setHistogramParameters(60,0,499.9),this.generateEntities(H,this.interArrival,1e6)}},"M/M/C Simulation","<p>\n        This is a classical\n        <a href='https://en.wikipedia.org/wiki/M/M/c_queue'>M/M/C queueing system</a>.\n        Entities arrive, are served by one of C servers, and leave.\n    </p>\n    <p>\n        This system is simple enough that there are formulas to calculate the\n        average queue length and waits (the calculated values are shown in italics).\n    </p>",((e,t)=>{const s=1/e.interArrival.mean,n=1/e.service.mean,i=e.qService.capacity,r=s/n,o=r/i,h=1/(function(e,t){let s=0;for(let n=0;n<t;n++)s+=1/m(n)*Math.pow(e,n);return s}(r,i)+1/m(i)*Math.pow(r,i)*i*n/(i*n-s)),u=(Math.pow(r,i)*n*h/(m(i-1)*Math.pow(i*n-s,2))+1/n)*s-r,c=u/s;function m(e){let t=1;for(let s=2;s<=e;s++)t*=s;return t}t.innerHTML=`\n            <label>\n                Number of Servers:\n                <input id='mmc-capy' type='range' min='2' max='10'>\n            </label>\n            <label>\n                Mean inter-arrival time:\n                <input id='mmc-inter-arr' type='range' min='10' max='200'>\n            </label>\n            <label>\n                Mean service time:\n                <input id='mmc-service' type='range' min='10' max='200'>\n            </label>\n            <ul>\n                <li>Simulated time: <b>${a(e.timeNow/60,0)}</b> hours</li>\n                <li>Elapsed time: <b>${a(e.timeElapsed/1e3,2)}</b> seconds</li>\n                <li>Number of Servers: <b>${a(e.qService.capacity,0)}</b></li>\n                <li>Mean Inter-Arrival Time: <b>${a(e.interArrival.mean,0)}</b> minutes</li>\n                <li>Mean Service Time: <b>${a(e.service.mean,0)}</b> minutes</li>\n                <li>Server Utilization:\n                    <b>${a(e.qService.grossPop.avg/e.qService.capacity*100)}%</b>\n                    (<i>${a(100*o)}%</i>)\n                </li>\n                <li>Average Wait:\n                    <b>${a(e.qWait.grossDwell.avg)}</b>\n                    (<i>${a(c)})</i> minutes\n                </li>\n                <li>Average Queue:\n                    <b>${a(e.qWait.grossPop.avg)}</b>\n                    (<i>${a(u)}</i>) customers\n                </li>\n                <li>Longest Wait:\n                    <b>${a(e.qWait.grossDwell.max)}</b> minutes\n                </li>\n                <li>Longest Queue:\n                    <b>${a(e.qWait.grossPop.max,0)}</b> customers\n                </li>\n                <li>Customers Served: <b>${a(e.qService.grossDwell.cnt,0)}</b></li>\n            </ul>`,o>1&&(t.innerHTML+="<p class='error'>\n                ** The server utilization exceeds 100%; the system will not reach a steady-state **\n            </p>"),t.innerHTML+=`\n            ${e.qWait.grossPop.getHistogramChart("Queue lengths")}\n            ${e.qWait.grossDwell.getHistogramChart("Wait times (seconds)")}`,l("mmc-capy",e.qService.capacity,(t=>e.qService.capacity=t)),l("mmc-inter-arr",e.interArrival.mean,(t=>e.interArrival=new k(t))),l("mmc-service",e.service.mean,(t=>e.service=new k(t)))})),Y(new W,"Crosswalk Simulation","<p>\n        Simulates a crosswalk with a traffic light.\n    </p>\n    <p>\n        Shows how to use the <b>waitsignal</b> and <b>sendSignal</b> methods.\n    </p>",((e,t)=>{const s=e.cycle,n=(s.yellow+s.red)/(s.yellow+s.red+s.green)*(s.yellow+s.red)/2,i=(s.yellow+s.green)/(s.yellow+s.red+s.green)*(s.yellow+s.green)/2,r=s.yellow+s.red,o=s.yellow+s.green;t.innerHTML=`\n            <p>\n                Pedestrian light cycle times (seconds):\n            </p>\n            <label>\n                <span class='light red'></span>Red:\n                <input id='xwalk-red' type='range' min='0' max='120' >\n            </label>\n            <label>\n                <span class='light yellow'></span>Yellow:\n                <input id='xwalk-yellow' type='range' min='0' max='120' >\n            </label>\n            <label>\n                <span class='light green'></span>Green:\n                <input id='xwalk-green' type='range' min='0' max='120' >\n            </label>\n            <ul>\n                <li>Simulated time: <b>${a(e.timeNow/60/60)}</b> hours</li>\n                <li>Elapsed time: <b>${a(e.timeElapsed/1e3)}</b> seconds</li>\n                <li>\n                    Average Pedestrian Wait: <b>${a(e.qPedXing.grossDwell.avg)}</b>\n                    <i>(${a(n)})</i> seconds\n                </li>\n                <li>\n                    Longest Pedestrian Wait: <b>${a(e.qPedXing.grossDwell.max)}</b>\n                    <i>(${a(r)})</i> seconds\n                </li>\n                <li>\n                    Average Car Wait: <b>${a(e.qCarXing.grossDwell.avg)}</b>\n                    <i>(${a(i)})</i> seconds\n                </li>\n                <li>\n                    Longest Car Wait: <b>${a(e.qCarXing.grossDwell.max)}</b>\n                    <i>(${a(o)})</i> seconds\n                </li>\n                <li>Pedestrian Count: <b>${a(e.qPedXing.grossDwell.cnt,0)}</b></li>\n                <li>Car Count: <b>${a(e.qCarXing.grossDwell.cnt,0)}</b></li>\n            </ul>`+e.qPedXing.grossPop.getHistogramChart("Pedestrians waiting to cross")+e.qCarXing.grossPop.getHistogramChart("Cars waiting to cross"),l("xwalk-red",e.cycle.red,(t=>e.cycle.red=t)," seconds"),l("xwalk-yellow",e.cycle.yellow,(t=>e.cycle.yellow=t)," seconds"),l("xwalk-green",e.cycle.green,(t=>e.cycle.green=t)," seconds")})),Y(new W,"Animated Crosswalk Simulation","   <p>\n            This sample uses the same Crosswalk <b>Simulation</b> class\n            as shown earlier, with an added <b>Animation</b> object that\n            adds an animated pane to show the flow of entities through\n            the simulation.\n        </p>\n        <p>\n            The animation pane is a regular <code>&lt;div&gt;</code> element.\n            Queue positions are defined by elements in the animation element.\n            Entities in each queue and in transit between queues are shown\n            using <code>&lt;img&gt;</code> elements.\n        </p>\n        <p>\n            Animations are great for presenting simulations and can be useful\n            for debugging purposes.\n            Keeping them decoupled from the simulations keeps <b>SimScript</b>\n            simple and flexible.\n        </p>\n        <div class='ss-anim'>\n            <div class='time-now'>\n                Time: <span>0.00</span> hours\n            </div>\n            <div class='light'>\n                <div class='red'></div>\n                <div class='yellow'></div>\n                <div class='green'></div>\n            </div>\n\n            <div class='street'></div>\n            <div class='crosswalk'></div>\n\n            <div class='ss-queue car-arr'></div>\n            <div class='ss-queue car-xing'></div>\n            <div class='ss-queue car-xed'></div>\n\n            <div class='ss-queue ped-arr'></div>\n            <div class='ss-queue ped-xing'></div>\n            <div class='ss-queue ped-xed'></div>\n            <div class='ss-queue ped-leave'></div>\n        </div>\n    ",((e,t)=>{new w(e,t,{getEntityHtml:e=>e instanceof V?"<img class='ped' src='https://github.com/Bernardo-Castilho/SimScript/blob/main/resources/blueped.png?raw=true' width='15' height='19'>":"<img class='car' src='https://github.com/Bernardo-Castilho/SimScript/blob/main/resources/redcar.png?raw=true' width='55' height='19'>",queues:[{queue:e.qPedArr,element:".ss-queue.ped-arr"},{queue:e.qPedXing,element:".ss-queue.ped-xing",angle:-45,max:8},{queue:e.qPedXed,element:".ss-queue.ped-xed"},{queue:e.qPedLeave,element:".ss-queue.ped-leave"},{queue:e.qCarArr,element:".ss-queue.car-arr"},{queue:e.qCarXing,element:".ss-queue.car-xing",angle:0,max:16},{queue:e.qCarXed,element:".ss-queue.car-xed"}]});const s=t.querySelectorAll(".light div"),n=t.querySelector(".time-now span");e.timeNowChanged.addEventListener((()=>{n.textContent=a(e.timeNow/3600);for(let t=0;t<s.length;t++)s[t].style.opacity=t==e.light?"1":""}))})),Y(new W,"Animated Crosswalk Simulation (SVG)","   <p>\n            This sample uses the same Crosswalk <b>Simulation</b> class\n            as shown earlier, this time using an SVG-based animation.\n        </p>\n        <div class='svg ss-time-now'>\n            Time: <b><span>0.00</span></b> hours\n        </div>\n        <svg class='ss-anim' viewBox='0 0 1000 500'>\n            <g class='light' >\n                <rect class='light' x='47.5%' y='0%' width='5%' height='25%' rx='2%'></rect>\n                <circle class='red' cx='50%' cy='5%' r='2%'></circle>\n                <circle class='yellow' cx='50%' cy='12.5%' r='2%'></circle>\n                <circle class='green' cx='50%' cy='20%' r='2%'></circle>\n            </g>\n\n            <rect class='street' x='10%' y='50%' width='80%' height='20%'></rect>\n            <rect class='crosswalk' x='45%' y='50%' width='10%' height='20%'></rect>\n\n            <circle class='ss-queue car-arr' cx='10%' cy='60%' r='10'></circle>\n            <circle class='ss-queue car-xing' cx='40%' cy='60%' r='10'></circle>\n            <circle class='ss-queue car-xed' cx='90%' cy='60%' r='10'></circle>\n\n            <circle class='ss-queue ped-arr' cx='10%' cy='85%' r='10'></circle>\n            <circle class='ss-queue ped-xing' cx='50%' cy='75%' r='10'></circle>\n            <circle class='ss-queue ped-xed' cx='50%' cy='45%' r='10'></circle>\n            <circle class='ss-queue ped-leave' cx='90%' cy='35%' r='10'></circle>\n        </svg>\n    ",((e,t)=>{new w(e,t,{getEntityHtml:e=>e instanceof V?"\n                        <g class='ped' fill='black' stroke='black' opacity='0.8' transform='scale(1,0.8)'>\n                            <circle cx='1%' cy='1%' r='0.5%' fill='orange'></circle>\n                            <rect x='.4%' y='2%' width='1.3%' height='4%' fill='green' rx='0.7%'></rect>\n                            <rect x='.66%' y='4%' width='.8%' height='3%' fill='blue'></rect>\n                            <rect x='.4%' y='7%' width='1.3%' height='.75%' rx='0.5%'></rect>\n                        </g>":"\n                        <g class='car' fill='black' stroke='black'>\n                            <rect x='1%' y='0' width='5%' height='4%' rx='1%'></rect>\n                            <rect x='0' y='1.5%' width='9%' height='3%' fill='red' rx='0.5%'></rect>\n                            <circle cx='1.5%' cy='4%' r='.9%' opacity='0.8'></circle>\n                            <circle cx='7.5%' cy='4%' r='.9%' opacity='0.8'></circle>\n                            <rect x='0' y='0' width='10%' height='1%' opacity='0'></rect>\n                        </g>",queues:[{queue:e.qPedArr,element:"svg .ss-queue.ped-arr"},{queue:e.qPedXing,element:"svg .ss-queue.ped-xing",angle:-45,max:8},{queue:e.qPedXed,element:"svg .ss-queue.ped-xed"},{queue:e.qPedLeave,element:"svg .ss-queue.ped-leave"},{queue:e.qCarArr,element:"svg .ss-queue.car-arr"},{queue:e.qCarXing,element:"svg .ss-queue.car-xing",angle:0,max:16},{queue:e.qCarXed,element:"svg .ss-queue.car-xed"}]});const s=t.querySelectorAll(".light circle"),n=document.querySelector(".svg.ss-time-now span");e.timeNowChanged.addEventListener((()=>{n.textContent=a(e.timeNow/3600);for(let t=0;t<s.length;t++)s[t].style.opacity=t==e.light?"1":""}))})),Y(new W,"Animated Crosswalk Simulation (X3DOM)",`   <p>\n            This sample uses the same Crosswalk <b>Simulation</b> class\n            as shown earlier, this time using an X3DOM-based animation.\n        </p>\n        <div class='x3d ss-time-now'>\n            Time: <b><span>0.00</span></b> hours\n        </div>\n        <x3d class='ss-anim anim-host'> \n            <scene>\n\n                \x3c!-- default viewpoint --\x3e\n                <viewpoint\n                    position='0 -320 320'\n                    orientation='1 0 0 .8'\n                    centerOfRotation='0 0 -20'>\n                </viewpoint>\n\n                \x3c!-- ground --\x3e\n                <transform scale='300 150 .1' translation='0 0 -0.5'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='0.1 0.3 0.1' transparency='0.2'></material>\n                        </appearance>\n                        <box></box>\n                    </shape>\n                </transform>\n\n                \x3c!-- street --\x3e\n                <transform scale='250 50 .1'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='.95 .95 .95'></material>\n                        </appearance>\n                        <box></box>\n                    </shape>\n                </transform>\n\n                \x3c!-- crosswalk --\x3e\n                <transform scale='50 50 .1' translation='0 0 .1'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='.6 .6 .6'></material>\n                        </appearance>\n                        <box></box>\n                    </shape>\n                </transform>\n\n                \x3c!-- light --\x3e\n                <transform class='light'>\n                    <transform translation='0 120 25' rotation='1 0 0 1.57'>\n                        <shape> \x3c!-- post --\x3e\n                            <appearance> \n                                <material diffuseColor='.5 .5 .0'></material>\n                            </appearance>\n                            <cylinder height='50' radius='3'></cylinder>\n                        </shape>\n                        <transform translation='0 -21 0'>\n                            <shape> \x3c!-- bottom rim --\x3e\n                                <appearance> \n                                    <material diffuseColor='.5 .5 .0'></material>\n                                </appearance>\n                                <cylinder height='5' radius='15'></cylinder>\n                            </shape>\n                        </transform>\n                        <transform translation='0 55 0'>\n                            <shape> \x3c!-- box --\x3e\n                                <appearance> \n                                    <material diffuseColor='.5 .5 .0'></material>\n                                </appearance>\n                                <box size='22 65 20'></box>\n                            </shape>\n                        </transform>\n                        <transform translation='0 75 5'>\n                            <shape>\n                                <appearance> \n                                    <material class='light red' diffuseColor='1 0 0'></material>\n                                </appearance>\n                                <sphere radius='10'></sphere>\n                            </shape>\n                        </transform>\n                        <transform translation='0 55 5'>\n                            <shape>\n                                <appearance> \n                                    <material class='light yellow' diffuseColor='1 1 0'></material>\n                                </appearance>\n                                <sphere radius='10'></sphere>\n                            </shape>\n                        </transform>\n                        <transform translation='0 35 5'>\n                            <shape>\n                                <appearance> \n                                    <material class='light green' diffuseColor='0 1 0'></material>\n                                </appearance>\n                                <sphere radius='10'></sphere>\n                            </shape>\n                        </transform>\n                    </transform>\n                </transform>\n\n                \x3c!-- queues --\x3e\n                ${j("car-arr",-250,0)}\n                ${j("car-xing",-50,0)}\n                ${j("car-xed",250,0)}\n                ${j("ped-arr",-125,-100)}\n                ${j("ped-xing",0,-75,5)}\n                ${j("ped-xed",0,75,5)}\n                ${j("ped-leave",250,100)}\n            </scene>\n        </x3d>\n    `,((e,t)=>{new w(e,t,{getEntityHtml:e=>e instanceof V?`<transform class='${"pedestrian"}'>\n        <transform>\n            <shape>\n                <appearance> \n                    <material diffuseColor='0 0 .5'></material>\n                </appearance>\n                <box size='5 5 8'></box>\n            </shape>\n            <shape render='false'> \x3c!-- padding --\x3e\n                <box size='7 10 8'></box>\n            </shape>\n        </transform>\n        <transform translation='0 0 8'>\n            <shape>\n                <appearance> \n                    <material diffuseColor='0 1 0'></material>\n                </appearance>\n                <box size='5 8 8'></box>\n            </shape>\n        </transform>\n        <transform translation='0 0 16'>\n            <shape>\n                <appearance> \n                    <material diffuseColor='.5 .5 0'></material>\n                </appearance>\n                <sphere radius='3'></sphere>\n            </shape>\n        </transform>\n    </transform>`:e.serial%2?J("car red",30,14,8,1,0,0):J("car green",25,12,8,1,1,0),queues:[{queue:e.qPedArr,element:"x3d .ss-queue.ped-arr"},{queue:e.qPedXing,element:"x3d .ss-queue.ped-xing",angle:-45,max:8},{queue:e.qPedXed,element:"x3d .ss-queue.ped-xed"},{queue:e.qPedLeave,element:"x3d .ss-queue.ped-leave"},{queue:e.qCarArr,element:"x3d .ss-queue.car-arr"},{queue:e.qCarXing,element:"x3d .ss-queue.car-xing",angle:0,max:16},{queue:e.qCarXed,element:"x3d .ss-queue.car-xed"}]});const s=t.querySelectorAll("material.light"),n=document.querySelector(".x3d.ss-time-now span");e.timeNowChanged.addEventListener((()=>{n.textContent=a(e.timeNow/3600);for(let t=0;t<s.length;t++){const n=s[t];n.setAttribute("transparency",t==e.light?"0":"0.7"),n.closest("transform").setAttribute("scale",t==e.light?"1.1 1.1 1.1":".9 .9 .9")}}))})),Y(new B,"Animation Options (SVG)","   <p>\n            Change the animation parameters to see their effect:\n        </p>\n        <label>\n            Queue Angle\n            <input id='q-angle' type='range' min='0' max='360' step='15'>\n        </label>\n        <label>\n            Rotate Entities\n            <input id='rotate-ents' type='checkbox'>\n        </label>\n        <label>\n            Spline Tension\n            <input id='tension' type='range' min='0' max='2' step='.1'>\n        </label>\n        <label>\n            Max Time Step\n            <input id='max-step' type='range' min='0' max='1' step='.1'>\n        </label>\n        <label>\n            Frame Delay\n            <input id='frame-delay' type='range' min='0' max='250' step='10'>\n        </label>\n        <svg class='ss-anim' viewBox='0 0 1000 500'>\n\n            \x3c!-- one rotating queue --\x3e\n            <rect class='ss-queue rotate' x='98%' y='23%' width='4%' height='4%' />\n            <line x1='100%' y1='15%' x2='100%' y2='35%' stroke='black' />\n            <line x1='90%' y1='25%' x2='110%' y2='25%' stroke='black' />\n\n            \x3c!-- one queue at the center --\x3e\n            <rect class='ss-queue center' x='38%' y='48%' width='4%' height='4%' />\n\n            \x3c!-- twelve queues around it --\x3e\n            <rect class='ss-queue q1' x='58%' y='83%' width='4%' height='4%' />\n            <rect class='ss-queue q2' x='73%' y='68%' width='4%' height='4%' />\n            <rect class='ss-queue q3' x='78%' y='48%' width='4%' height='4%' />\n            <rect class='ss-queue q4' x='73%' y='28%' width='4%' height='4%' />\n            <rect class='ss-queue q5' x='58%' y='13%' width='4%' height='4%' />\n            <rect class='ss-queue q6' x='38%' y='8%' width='4%' height='4%' />\n            <rect class='ss-queue q7' x='18%' y='13%' width='4%' height='4%' />\n            <rect class='ss-queue q8' x='3%' y='28%' width='4%' height='4%' />\n            <rect class='ss-queue q9' x='-2%' y='48%' width='4%' height='4%' />\n            <rect class='ss-queue q10' x='3%' y='68%' width='4%' height='4%' />\n            <rect class='ss-queue q11' x='18%' y='83%' width='4%' height='4%' />\n            <rect class='ss-queue q12' x='38%' y='88%' width='4%' height='4%' />\n        </svg>\n    ",((e,t)=>{const s=new w(e,t,{rotateEntities:!0,getEntityHtml:e=>e instanceof G?e.fast?"<polygon points='0,0 40,0 50,10 40,20 0,20' stroke='black' fill='yellow' opacity='0.5' />":"<polygon points='0,0 20,0 30,20 20,40 0,40' stroke='black' fill='red' opacity='0.5'/>":e.serial%2?"<polygon points='0,0 40,0 50,10 40,20 0,20' stroke='black' fill='blue' />":"<polygon points='0,0 20,0 30,20 20,40 0,40' stroke='black' fill='green' />",queues:[{queue:e.qRotate,element:"svg .ss-queue.rotate",angle:e.qAngle},{queue:e.qCenter,element:"svg .ss-queue.center"},{queue:e.q1,element:"svg .ss-queue.q1"},{queue:e.q2,element:"svg .ss-queue.q2"},{queue:e.q3,element:"svg .ss-queue.q3"},{queue:e.q4,element:"svg .ss-queue.q4"},{queue:e.q5,element:"svg .ss-queue.q5"},{queue:e.q6,element:"svg .ss-queue.q6"},{queue:e.q7,element:"svg .ss-queue.q7"},{queue:e.q8,element:"svg .ss-queue.q8"},{queue:e.q9,element:"svg .ss-queue.q9"},{queue:e.q10,element:"svg .ss-queue.q10"},{queue:e.q11,element:"svg .ss-queue.q11"},{queue:e.q12,element:"svg .ss-queue.q12"}]});l("q-angle",e.qAngle,(t=>{e.qAngle=t;let n=s.queues;n[0].angle=t,s.queues=n})),l("rotate-ents",s.rotateEntities,(e=>s.rotateEntities=e)),l("tension",e.splineTension,(t=>e.splineTension=t)),l("max-step",e.maxTimeStep,(t=>e.maxTimeStep=t)),l("frame-delay",e.frameDelay,(t=>e.frameDelay=t))})),Y(new B({frameDelay:10}),"Animation Options (A-Frame)","\n        <p>\n            This sample uses the same Crosswalk Simulation class as shown earlier,\n            this time using an <a href=\"https://aframe.io\">A-Frame-based</a> animation.\n        </p>\n        <p>\n            Change the animation parameters to see their effect:\n        </p>\n        <label>\n            Queue Angle\n            <input id='af-q-angle' type='range' min='0' max='360' step='15'>\n        </label>\n        <label>\n            Rotate Entities\n            <input id='af-rotate-ents' type='checkbox'>\n        </label>\n        <label>\n            Spline Tension\n            <input id='af-tension' type='range' min='0' max='2' step='.1'>\n        </label>\n        <label>\n            Max Time Step\n            <input id='af-max-step' type='range' min='0' max='1' step='.1'>\n        </label>\n        <label>\n            Frame Delay\n            <input id='af-frame-delay' type='range' min='0' max='250' step='10'>\n        </label>\n        <div class=\"anim-host\">\n            <a-scene embedded class='ss-anim'>\n\n                \x3c!-- mix-ins --\x3e\n                <a-assets>\n                    <a-mixin id='queue' geometry='radius:4' material='color:orange;opacity:0.3'></a-mixin>\n                    <a-mixin id='transparent' opacity='0.6' transparent='true'></a-mixin>\n                </a-assets>\n                \n                \x3c!-- camera --\x3e\n                <a-entity id='rig' position='0 -150 150' rotation='40 0 0'>\n                    <a-camera id='camera' far='50000' fov='80'></a-camera>\n                </a-entity>            \n\n                \x3c!-- camera\n                <a-entity id='rig' position='0 -200 50' rotation='70 0 0'>\n                    <a-camera id='camera' far='50000' fov='60' look-controls></a-camera>\n                </a-entity>            \n                --\x3e\n                \n                \x3c!-- add a light --\x3e\n                <a-entity light='type:directional; castShadow:true;' position='5 5 15'></a-entity>\n\n                \x3c!-- background --\x3e\n                <a-box position='0 0 -1' width='800' height='800' depth='1' color='#009FFF'></a-box>\n                <a-sky color='lightblue'></a-sky>\n\n                \x3c!-- one rotating queue --\x3e\n                <a-sphere class='ss-queue rotate' mixin='queue' position='100 100 20'></a-sphere>\n                \n                \x3c!-- one queue at the center --\x3e\n                <a-sphere class='ss-queue center' mixin='queue' position='0 0 20'></a-sphere>\n    \n                \x3c!-- twelve queues around it --\x3e\n                <a-sphere class='ss-queue q1' mixin='queue' position='50 87 0'></a-sphere>\n                <a-sphere class='ss-queue q2' mixin='queue' position='87 50  0'></a-sphere>\n                <a-sphere class='ss-queue q3' mixin='queue' position='100 0 0'></a-sphere>\n                <a-sphere class='ss-queue q4' mixin='queue' position='87 -50 0'></a-sphere>\n                <a-sphere class='ss-queue q5' mixin='queue' position='50 -87 0'></a-sphere>\n                <a-sphere class='ss-queue q6' mixin='queue' position='0 -100 0'></a-sphere>\n                <a-sphere class='ss-queue q7' mixin='queue' position='-50 -87 0'></a-sphere>\n                <a-sphere class='ss-queue q8' mixin='queue' position='-87 -50 0'></a-sphere>\n                <a-sphere class='ss-queue q9' mixin='queue' position='-100 0 0'></a-sphere>\n                <a-sphere class='ss-queue q10' mixin='queue' position='-87 50 0'></a-sphere>\n                <a-sphere class='ss-queue q11' mixin='queue' position='-50 87 0'></a-sphere>\n                <a-sphere class='ss-queue q12' mixin='queue' position='0 100 0'></a-sphere>\n            </a-scene>\n        </div>\n    ",((e,t)=>{const s=new w(e,t,{rotateEntities:!0,getEntityHtml:e=>e instanceof G?e.fast?"<a-box width='16' height='8' depth='8' color='yellow' mixin='transparent'></a-box>":"<a-box width='8' height='16' depth='10' color='red' mixin='transparent'></a-box>":e.serial%2?"<a-box width='16' height='8' depth='8' color='green' mixin='transparent'></a-box>":"<a-box width='8' height='16' depth='10' color='blue' mixin='transparent'></a-box>",queues:[{queue:e.qRotate,element:"a-scene .ss-queue.rotate",angle:e.qAngle},{queue:e.qCenter,element:"a-scene .ss-queue.center"},{queue:e.q1,element:"a-scene .ss-queue.q1"},{queue:e.q2,element:"a-scene .ss-queue.q2"},{queue:e.q3,element:"a-scene .ss-queue.q3"},{queue:e.q4,element:"a-scene .ss-queue.q4"},{queue:e.q5,element:"a-scene .ss-queue.q5"},{queue:e.q6,element:"a-scene .ss-queue.q6"},{queue:e.q7,element:"a-scene .ss-queue.q7"},{queue:e.q8,element:"a-scene .ss-queue.q8"},{queue:e.q9,element:"a-scene .ss-queue.q9"},{queue:e.q10,element:"a-scene .ss-queue.q10"},{queue:e.q11,element:"a-scene .ss-queue.q11"},{queue:e.q12,element:"a-scene .ss-queue.q12"}]});l("af-q-angle",e.qAngle,(t=>{e.qAngle=t;let n=s.queues;n[0].angle=t,s.queues=n})," degrees"),l("af-rotate-ents",s.rotateEntities,(e=>s.rotateEntities=e)),l("af-tension",e.splineTension,(t=>e.splineTension=t)),l("af-max-step",e.maxTimeStep,(t=>e.maxTimeStep=t)," sim time units"),l("af-frame-delay",e.frameDelay,(t=>e.frameDelay=t)," ms")})),Y(new B({frameDelay:10}),"Animation Options (X3DOM)",`\n        <p>\n            This sample uses the same Crosswalk Simulation class as shown earlier,\n            this time using an <a href="https://www.x3dom.org/">X3DOM-based</a> animation.\n        </p>\n        <p>\n            Press 'A' to view <b>all</b> elements or 'R' to <b>reset</b> the viewpoint.\n        </p>\n        <p>\n            Change the animation parameters to see their effect:\n        </p>\n        <label>\n            Queue Angle\n            <input id='x3-q-angle' type='range' min='0' max='360' step='15'>\n        </label>\n        <label>\n            Rotate Entities\n            <input id='x3-rotate-ents' type='checkbox'>\n        </label>\n        <label>\n            Spline Tension\n            <input id='x3-tension' type='range' min='0' max='2' step='.1'>\n        </label>\n        <label>\n            Max Time Step\n            <input id='x3-max-step' type='range' min='0' max='1' step='.1'>\n        </label>\n        <label>\n            Frame Delay\n            <input id='x3-frame-delay' type='range' min='0' max='250' step='10'>\n        </label>\n\n        <x3d class='ss-anim anim-host'> \n            <scene>\n\n                \x3c!-- default viewpoint --\x3e\n                <viewpoint\n                    position='0 -200 180'\n                    orientation='1 0 0 .75'\n                    centerOfRotation='0 0 -20'>\n                </viewpoint>\n\n                \x3c!-- background --\x3e\n                <transform scale='150 150 0.1'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='0 .9 1'></material>\n                        </appearance>\n                        <box></box>\n                    </shape>\n                </transform>\n\n                \x3c!-- one rotating queue --\x3e\n                ${j("rotate",100,100,20)}\n                \n                \x3c!-- one queue at the center --\x3e\n                ${j("center",0,0,20)}\n    \n                \x3c!-- twelve queues around it --\x3e\n                ${j("q1",50,87)}\n                ${j("q2",87,50)}\n                ${j("q3",100,0)}\n                ${j("q4",87,-50)}\n                ${j("q5",50,-87)}\n\n                ${j("q6",0,-100)}\n                ${j("q7",-50,-87)}\n                ${j("q8",-87,-50)}\n                ${j("q9",-100,0)}\n                ${j("q10",-87,50)}\n                ${j("q11",-50,87)}\n                ${j("q12",0,100)}\n            </scene>\n        </x3d>\n    `,((e,t)=>{const s=new w(e,t,{rotateEntities:!0,getEntityHtml:e=>e instanceof G?e.fast?J("yellow",30,10,4,1,1,0):J("red",20,8,4,1,0,0):e.serial%2?J("green",30,10,4,0,1,0):J("blue",20,8,4,0,0,1),queues:[{queue:e.qRotate,element:"x3d .ss-queue.rotate",angle:e.qAngle},{queue:e.qCenter,element:"x3d .ss-queue.center"},{queue:e.q1,element:"x3d .ss-queue.q1"},{queue:e.q2,element:"x3d .ss-queue.q2"},{queue:e.q3,element:"x3d .ss-queue.q3"},{queue:e.q4,element:"x3d .ss-queue.q4"},{queue:e.q5,element:"x3d .ss-queue.q5"},{queue:e.q6,element:"x3d .ss-queue.q6"},{queue:e.q7,element:"x3d .ss-queue.q7"},{queue:e.q8,element:"x3d .ss-queue.q8"},{queue:e.q9,element:"x3d .ss-queue.q9"},{queue:e.q10,element:"x3d .ss-queue.q10"},{queue:e.q11,element:"x3d .ss-queue.q11"},{queue:e.q12,element:"x3d .ss-queue.q12"}]});l("x3-q-angle",e.qAngle,(t=>{e.qAngle=t;let n=s.queues;n[0].angle=t,s.queues=n})," degrees"),l("x3-rotate-ents",s.rotateEntities,(e=>s.rotateEntities=e)),l("x3-tension",e.splineTension,(t=>e.splineTension=t)),l("x3-max-step",e.maxTimeStep,(t=>e.maxTimeStep=t)," sim time units"),l("x3-frame-delay",e.frameDelay,(t=>e.frameDelay=t)," ms")}));
