!function(e=".",t="__import__"){try{self[t]=new Function("u","return import(u)")}catch(n){const s=new URL(e,location),i=e=>{URL.revokeObjectURL(e.src),e.remove()};self[t]=e=>new Promise(((n,a)=>{const r=new URL(e,s);if(self[t].moduleMap[r])return n(self[t].moduleMap[r]);const o=new Blob([`import * as m from '${r}';`,`${t}.moduleMap['${r}']=m;`],{type:"text/javascript"}),l=Object.assign(document.createElement("script"),{type:"module",src:URL.createObjectURL(o),onerror(){a(new Error(`Failed to import: ${e}`)),i(l)},onload(){n(self[t].moduleMap[r]),i(l)}});document.head.appendChild(l)})),self[t].moduleMap={}}}("/assets/");class e{constructor(e,t){this.listener=e,this.self=t}}const t=class{};let n=t;n.empty=new t;class s{constructor(){this._listeners=[]}addEventListener(t,n){this._listeners.push(new e(t,n))}removeEventListener(e,t){const n=this._listeners;for(let s=0;s<n.length;s++){const i=n[s];if((i.listener==e||null==e)&&(i.self==t||null==t)&&(n.splice(s,1),t))break}}raise(e,t){this._listeners.forEach((n=>{n.listener.call(n.self,e,t)}))}}function i(e,t){if(!e)throw"function"==typeof t&&(t=t()),console.error(t),t}function a(e,t=2){return function(e){let t=r[e];t||(t=r[e]=new Intl.NumberFormat(navigator.language,{useGrouping:!0,minimumFractionDigits:e,maximumFractionDigits:e}));return t}(t).format(e)}const r={};function o(e,t,n,s=""){const i=document.getElementById(e),a="checkbox"==i.type,r="range"==i.type||"number"==i.type,o=i instanceof HTMLSelectElement;a?i.checked=t:o?i.selectedIndex=t:r?i.valueAsNumber=t:i.value=t;const l="range"==i.type?i.insertAdjacentElement("afterend",document.createElement("span")):null;l&&(l.textContent=` ${i.value}${s}`),i.addEventListener("input",(e=>{l&&(l.textContent=` ${i.value}${s}`);const t=a?i.checked:o?i.selectedIndex:r?i.valueAsNumber:i.value;n(t)}))}function l(e,t){if(t)for(let n in t)i(n in e,`Property ${n} is not defined`),e[n]instanceof s?e[n].addEventListener(t[n]):e[n]=t[n]}function h(e){let t="string"==typeof e?document.querySelector(e):e;return i(t instanceof Element,"Element not found:"+e),t}function u(e,t,n){return null!=t&&e<t?t:null!=n&&e>n?n:e}class c{constructor(e=0,t=0,n=0){this.x=e,this.y=t,this.z=n}static clone(e){return{x:e.x,y:e.y,z:e.z}}static copy(e,t){return e.x=t.x,e.y=t.y,e.z=t.z,e}static distance(e,t){const n=e.x-t.x,s=e.y-t.y,i=e.z||0-t.z||0;return Math.sqrt(n*n+s*s+i*i)}static interpolate(e,t,n){return{x:e.x+(t.x-e.x)*n,y:e.y+(t.y-e.y)*n,z:(e.z||0)+(t.z||0-e.z||0)*n}}static angle(e,t,n=!1){const s=Math.atan2(t.y-e.y,t.x-e.x);return n?s:Math.round(180*s/Math.PI)}}const d=class{constructor(e){this._sim=null,this._queues=new Map,this._serial=0,this._prty=0,this._serial=d._serial++,l(this,e)}get simulation(){return this._sim}get serial(){return this._serial}get priority(){return this._prty}set priority(e){this._prty=e}async delay(e,t){return i(null==t||t.queues.length>1,"delay path should have at least two queues"),new y(this,{delay:e,path:t}).promise}async enterQueue(e,t=1){return e.canEnter(t)?(e.add(this,t),new y(this,{ready:!0}).promise):new y(this,{queue:e,units:t}).promise}enterQueueImmediately(e,t=1){e.add(this,t)}leaveQueue(e){e.remove(this)}async waitSignal(e){return new y(this,{signal:e}).promise}sendSignal(e,t){let n=this.simulation._fec,s=0;for(let i=0;i<n.length&&!(null!=t&&s>=t);i++){let t=n[i];t.options.signal==e&&(t.ready=!0,s++)}return s}getAnimationPosition(e,t,n){return null}dispose(){if(this._queues.size){let e=[];Array.from(this._queues.keys()).forEach((t=>e.push(t.name))),i(!1,(()=>`Entity finished script without leaving all queues: ${e.join(", ")}.`))}}toString(){return this.constructor.name+"#"+this.serial.toString()}async script(){}};let m=d;m._serial=0;class p extends m{constructor(e,t,n,s,i){super(),this._type=e,this._interval=t,this._max=n,this._tmStart=s,this._tmEnd=i}async script(){const e=this.simulation,t=e.timeNow,n=this._interval;null!=this._tmStart&&t<this._tmStart&&await this.delay(this._tmStart-t),n&&null==this._tmStart&&await this.delay(n.sample()/2);for(let s=0;!(null!=this._max&&s>=this._max)&&!(null!=this._tmEnd&&e.timeNow>this._tmEnd);s++){const e=new this._type;if(this.simulation.activate(e),!n)break;await this.delay(n.sample())}}}var g,q;(q=g||(g={}))[q.Paused=0]="Paused",q[q.Finished=1]="Finished",q[q.Running=2]="Running";class w{constructor(e){this._fec=[],this._tmNow=0,this._tmEnd=null,this._tmMaxStep=0,this._frameDelay=0,this._tmStart=0,this._tmElapsed=0,this._state=0,this._queues=[],this._lastYield=0,this._lastFrame=0,this._yieldInterval=250,this.starting=new s,this.started=new s,this.finishing=new s,this.finished=new s,this.stateChanging=new s,this.stateChanged=new s,this.timeNowChanging=new s,this.timeNowChanged=new s,l(this,e)}get state(){return this._state}get timeEnd(){return this._tmEnd}set timeEnd(e){this._tmEnd=e}get maxTimeStep(){return this._tmMaxStep}set maxTimeStep(e){this._tmMaxStep=e}get frameDelay(){return this._frameDelay}set frameDelay(e){this._frameDelay=e}get timeElapsed(){return 2==this._state?Date.now()-this._tmStart:this._tmElapsed}get timeNow(){return this._tmNow}get yieldInterval(){return this._yieldInterval}set yieldInterval(e){this._yieldInterval=e}async start(e=!1){2!=this.state&&((e=e||0==this._fec.length)&&(this._queues.forEach((e=>e.reset())),this._fec=[],this._queues=[],this._setTimeNow(0),this.onStarting()),this._tmStart=Date.now(),this._setState(2),e&&this.onStarted(),this._step())}stop(){2==this.state&&(this._tmElapsed=Date.now()-this._tmStart,this._setState(0))}async activate(e){i(null==e.simulation,(()=>"Entity "+e.toString()+" is already active")),e._sim=this,await e.script(),e.dispose(),e._sim=null}generateEntities(e,t,n,s,i){const a=new p(e,t,n,s,i);this.activate(a)}get queues(){return this._queues}getStatsTable(e=!1){return'<table class="ss-stats">'+this._createSimulationReport()+this._createQueueReport("Populations","grossPop")+(e?this._createQueueReport("Net Populations","netPop"):"")+this._createQueueReport("Dwell Times","grossDwell")+(e?this._createQueueReport("Net Dwell Times","netDwell"):"")+"</table>"}onStarting(e=n.empty){this.starting.raise(this,e)}onStarted(e=n.empty){this.started.raise(this,e)}onFinishing(e=n.empty){this.finishing.raise(this,e)}onFinished(e=n.empty){this.finished.raise(this,e)}onStateChanging(e=n.empty){this.stateChanging.raise(this,e)}onStateChanged(e=n.empty){this.stateChanged.raise(this,e)}onTimeNowChanging(e=n.empty){this.timeNowChanging.raise(this,e)}onTimeNowChanged(e=n.empty){this.timeNowChanged.raise(this,e)}_setState(e){e!=this._state&&(this.onStateChanging(),this._state=e,this.onStateChanged())}_setTimeNow(e){e!=this._tmNow&&(this.onTimeNowChanging(),this._tmNow=e,this.onTimeNowChanged())}async _step(){if(2!=this._state)return;let e=await this._scanFec();if(null!=this._tmEnd&&this._tmNow>=this._tmEnd||e<0)return this._fec=[],this._tmElapsed=Date.now()-this._tmStart,this.onFinishing(),this._setState(1),void this.onFinished();if(this.maxTimeStep&&this.maxTimeStep>0&&e>0&&(e=Math.min(e,this._tmNow+this.maxTimeStep)),e>0&&(this._setTimeNow(e),this.frameDelay)){const e=Date.now()-this._lastFrame;this.frameDelay>e&&await new Promise((t=>setTimeout(t,this.frameDelay-e))),this._lastFrame=Date.now()}const t=Date.now();t-this._lastYield>this._yieldInterval?(this._lastYield=t,requestAnimationFrame((()=>this._step()))):this._step()}async _scanFec(){let e=this._fec,t=0,n=null;for(var s=0;s<e.length;s++){let i=e[s];if(i.ready){e.splice(s,1),t++,await i.dispatch(),s=-1;continue}const a=i.timeDue;null!=a&&(null==n||n>a)&&(n=a)}return t>0?0:null==n?-1:n}_createSimulationReport(){return`\n            <tr>\n                <th colspan="2">${this.constructor.name}</th>\n            </tr>\n            <tr>\n                <th>Finish Time</th>\n                <td>${a(this.timeNow,0)}</td>\n            </tr>\n            <tr>\n                <th>Elapsed Time (s)</th>\n                <td>${a(this.timeElapsed/1e3)}</td>\n            <tr>`}_createQueueReport(e,t){const n=t.indexOf("Pop")>-1;let s=`<tr>\n                <th colspan="6">\n                    ${e}\n                </th>\n            </tr>\n            <tr>\n                <th>Queue</th>\n                <th>Min</th>\n                <th>Avg</th>\n                <th>Max</th>\n                <th>StDev</th>\n                <th>${n?"":"Cnt"}</th>\n            </tr>`;return this.queues.forEach((e=>{if(e.name&&e.grossDwell.cnt){let i=e[t];s+=`<tr>\n                    <th>${e.name}</th>\n                    <td>${a(i.min)}</td>\n                    <td>${a(i.avg)}</td>\n                    <td>${a(i.max)}</td>\n                    <td>${a(i.stdev)}</td>\n                    <td>${n?"":a(i.cnt,0)}</td>\n                </tr>`}})),s}}class y{constructor(e,t){this._e=e,this._ready=!1,this._options=t;let n=e.simulation,s=n._fec,i=s.length;for(;i>0&&s[i-1].e.priority<e.priority;)i--;s.splice(i,0,this),this._tmStart=n.timeNow,null!=t.delay&&(this._tmDue=n.timeNow+t.delay),null!=t.ready&&(this._ready=t.ready),this._promise=new Promise((e=>{this._resolve=e}))}get e(){return this._e}get options(){return this._options}get ready(){if(this._ready)return!0;const e=this.options;return!(!e.queue||!e.queue.canEnter(e.units))||null!=this._tmDue&&this._tmDue<=this._e.simulation.timeNow}set ready(e){this._ready=e}get timeStart(){return this._tmStart}get timeDue(){return this._tmDue}async dispatch(){const e=this._options,t=e.queue;if(t){const n=e.units;t.add(this._e,null!=n?n:1)}return await this._resolve()}get promise(){return this._promise}}class x{constructor(e){this._cnt=0,this._min=0,this._max=0,this._sum=0,this._sum2=0,this._histo=null,this._histoParms=null,l(this,e)}get min(){return this._min}get max(){return this._max}get cnt(){return this._cnt}get avg(){return this._cnt>0?this._sum/this._cnt:0}get var(){return this._cnt>0&&this._max>this._min?Math.max(0,(this._sum2-this._sum*this._sum/this._cnt)/this._cnt):0}get stdev(){return Math.sqrt(this.var)}add(e,t=1){if(i(t>=0,"tally weights must be >= 0"),(!this._cnt||e>this._max)&&(this._max=e),(!this._cnt||e<this._min)&&(this._min=e),this._cnt+=t,this._sum+=e*t,this._sum2+=e*e*t,this._histo){e=u(e,this._histoParms.min,this._histoParms.max);let n=Math.floor(e/this._histoParms.size),s=this._histo.get(n)||0;this._histo.set(n,s+t)}}getHistogram(){if(this._histo){const e=this._histo,t=Array.from(e.keys());t.sort(((e,t)=>e-t));for(let i=1;i<t.length;i++)t[i]>t[i-1]+1&&t.splice(i,0,t[i-1]+1);const n=this._histoParms.size;let s=t.map((t=>({from:t*n,to:(t+1)*n,count:e.get(t)||0})));if(s.length){const e=this._histoParms,t=e.min,n=e.max;null!=t&&s[0].from>this.min&&(s[0].from=this.min),null!=n&&s[s.length-1].to<this.max&&(s[s.length-1].to=this.max)}return s}return null}getHistogramChart(e=""){let t=this.getHistogram();if(!t||!t.length)return"";let n=0;t.forEach((e=>n=Math.max(n,e.count)));const s=Math.round(1/t.length*100),i=this._histoParms.size<1?1:0;let r="";return t.forEach(((e,t)=>{const o=this.avg>=e.from&&this.avg<=e.to?' class="avg"':"",l=Math.round(e.count/n*100),h=t*s;r+=`<g${o}>\n                <title>${e.count}</title>\n                <rect\n                    ${o}\n                    x="calc(${h}% + 5px)"\n                    width="calc(${s}% - 10px)"\n                    y="calc(${100-l}% - 1.2em)"\n                    height="${l}%" />\n                <text\n                    ${o}\n                    x="${h+s/2}%"\n                    y="100%"\n                    text-anchor="middle"\n                    dominant-baseline="text-top">\n                    ${a(e.from,i)}-${a(e.to,i)}\n                </text>\n            </g>`})),`\n            <figure class="ss-histogram">\n                <figcaption>${e}</figcaption>\n                <svg width="100%" height="100%">\n                    ${r}\n                </svg>\n            </figure>`}setHistogramParameters(e,t=null,n=null){e?(i(e>0,"bin size must be positive"),i(null==t||null==n||t<=n,"histogram min must be <= max"),this._histoParms={size:e,min:t,max:n},this._histo=new Map):(this._histoParms=null,this._histo=null)}reset(){this._cnt=this._max=this._min=this._sum=this._sum2=0,this._histo&&this._histo.clear()}}class f{constructor(e="",t=null,n){this._sim=null,this._name="",this._capy=null,this._items=new Map,this._tmLastChange=0,this._inUse=0,this._totalIn=0,this._grossPop=new x,this._grossDwell=new x,this._netPop=new x,this._netDwell=new x,this._name=e,this._capy=t,l(this,n)}get name(){return this._name}set name(e){this._name=e}get capacity(){return this._capy}set capacity(e){this._capy=e}get unitsInUse(){return this._inUse}get pop(){return this._items.size}get totalIn(){return this._totalIn}get entities(){return this._entities||(this._entities=Array.from(this._items.keys())),this._entities}get items(){return this._items}get lastChange(){return this._tmLastChange}get grossPop(){return this._grossPop}get grossDwell(){return this._grossDwell}get netPop(){return this._netPop}get netDwell(){return this._netDwell}get utilization(){return this.capacity?this.grossPop.avg/this.capacity:0}get totalCount(){return this.grossDwell.cnt}get averageLength(){return this.grossPop.avg}get maxLength(){return this.grossPop.max}get averageDwell(){return this.grossDwell.avg}get maxDwell(){return this.grossDwell.max}canEnter(e=1){return null==this.capacity||this.unitsInUse+e<=this.capacity}add(e,t=1){let n=this._sim;null==n?(n=this._sim=e.simulation,n.queues.push(this),n.queues.sort(((e,t)=>e.name<t.name?-1:e.name>t.name?1:0)),this._tmLastChange=0):n!=e.simulation&&i(!1,"Queue already in use by another simulation"),i(null==this._items.get(e),(()=>e.toString()+" is already in queue"+this.name)),i(this.canEnter(t),"Queue does not have enough capacity"),this._updatePopTallies(),e._queues.set(this,!0),this._items.set(e,new v(e,t,n.timeNow)),this._inUse+=t,this._totalIn++;const s=this._entities;s&&s.push(e)}remove(e){const t=this._items.get(e);i(null!=t,(()=>"Entity "+e.toString()+" is not in queue "+this.toString())),this._updatePopTallies(),this._updateDwellTallies(t.timeIn),this._items.delete(e),e._queues.delete(this),this._inUse-=t.units;const n=this._entities;n&&n.splice(n.indexOf(e),1)}reset(){this._sim=null,this._inUse=0,this._totalIn=0,this._tmLastChange=0,this._entities=null,this._items.clear(),this._grossPop.reset(),this._grossDwell.reset(),this._netPop.reset(),this._netDwell.reset()}_updatePopTallies(){const e=this._inUse,t=this._sim.timeNow,n=t-this._tmLastChange;i(n>=0,"Time delta cannot be negative"),this._grossPop.add(e,n),e&&this._netPop.add(e,n),this._tmLastChange=t}_updateDwellTallies(e){const t=this._sim.timeNow-e;i(t>=0,"Dwell cannot be negative"),this._grossDwell.add(t,1),t>0&&this._netDwell.add(t,1)}}class v{constructor(e,t,n){this._e=e,this._units=t,this._timeIn=n}get entity(){return this._e}get units(){return this._units}get timeIn(){return this._timeIn}}class _{constructor(e,t,n){this._queues=new Map,this._disabled=!1,this._rotateEntities=!1,this._toQueueEnd=!0,this._entities=new Map,this._host=h(t),this._scene=this._host,"X3D"==this.hostTag&&(this._scene=this._host.querySelector("scene")),this._sim=e,e.timeNowChanged.addEventListener(this.updateDisplay,this),e.stateChanged.addEventListener(this.updateDisplay,this),e.yieldInterval=30,this._lastUpdate=0,this._entities=new Map,n&&l(this,n)}get hostElement(){return this._host}get hostTag(){return this._host.tagName.toUpperCase()}get isThreeD(){const e=this.hostTag;return"X3D"==e||"A-SCENE"==e}get sceneElement(){return this._scene}get getEntityHtml(){return this._getEntityHtml}set getEntityHtml(e){this._getEntityHtml=e}get rotateEntities(){return this._rotateEntities}set rotateEntities(e){this._rotateEntities=e}get animateToQueueEnd(){return this._toQueueEnd}set animateToQueueEnd(e){this._toQueueEnd=e}get disabled(){return this._disabled}set disabled(e){e!=this.disabled&&(this._disabled=e,e||this.updateDisplay())}get queues(){return this._queueArray}set queues(e){this._queueArray=e,e.forEach((e=>{let t=new b(this,e);this._queues.set(t._q,t)})),this._lastUpdate&&(this._lastUpdate=-1,this.updateDisplay())}updateDisplay(){if(this._disabled)return;const e=this._host,t=this._sim,n=e.getBoundingClientRect();if(n.height!=this._height||n.width!=this._width){this._height=n.height,this._width=n.width;for(let e of this._queues.values())e._ptStart=null}this._entities.forEach((e=>{e._inUse=!1}));for(let s of this._queues.values())s._draw();t._fec.forEach((e=>{if(e.options.path&&null!=e.timeDue){const t=this._getAnimatedEntity(e.e),n=e.options.path,s=null!=n.tension?n.tension:1,a=n.radius,r=[];n.queues.forEach(((e,t)=>{const s=this._queues.get(e);i(null!=s,"Queue missing animation info"),r.push(this._toQueueEnd&&2==n.queues.length&&t>0&&s._ptEnd||s._getStart())})),a&&function(e,t){if(t>0&&e.length>2)for(let n=e.length-2;n>=0;n--){const s=e[n],i=e[n+1],a=c.distance(s,i);if(a>2*t){let r=n+1;if(n>0){const n=c.interpolate(s,i,t/a);e.splice(r++,0,n)}if(n<e.length-2){const n=c.interpolate(s,i,1-(a-t)/a);e.splice(r,0,n)}}}}(r,a),t.updateIcon();const o=e.timeStart,l=e.timeDue,h=1-(l-this._sim.timeNow)/(l-o),[d,m]=function(e,t,n){const s=c.distance,i=c.angle,a=c.interpolate,r=(e,t)=>e[u(t,0,e.length-1)];if(n=u(n,0,1),t=u(t,0,1),e.length<3)return 2==e.length?[a(e[0],e[1],n),c.angle(e[0],e[1])]:[e[0],0];let o=0;for(let u=0;u<e.length-1;u++)o+=s(e[u],e[u+1]);const l=n*o;let h=-1,d=-1;o=0;for(let u=0;u<e.length-1;u++){const t=s(e[u],e[u+1]);if(o+t>=l){h=u,d=(l-o)/t;break}o+=t}let m=e[h],p=r(e,h+1);const g=a(m,p,d),q=i(m,p);if(0==t)return[g,q];let w;d>=.5?(p=r(e,h+1),m=a(e[h],p,.5),w=a(p,r(e,h+2),.5)):(p=e[h],m=a(r(e,h-1),p,.5),w=a(e[h],r(e,h+1),.5));if(0==h&&!s(m,p)||h==e.length-2&&!s(p,w))return[g,q];const y=s(m,p),x=s(p,w),f=(l-o+y*(d>=.5?-1:1))/(y+x),[v,_]=function(e,t,n,s){const i=(1-s)*(1-s),a=2*(1-s)*s,r=s*s,o={x:i*e.x+a*t.x+r*n.x,y:i*e.y+a*t.y+r*n.y,z:i*e.z+a*t.z+r*n.z},l=2*(s-1),h=2*(1-2*s),u=2*s,c=l*e.x+h*t.x+u*n.x,d=l*e.y+h*t.y+u*n.y,m=180*Math.atan2(d,c)/Math.PI;return[o,m]}(m,p,w,f);return[a(g,v,t),t>.1?_:q]}(r,s,h);t._drawAt(d,this.rotateEntities?m:0)}})),this._entities.forEach(((e,t)=>{if(!e._inUse){this._entities.delete(t);let n=e._element;n&&n.parentElement&&n.remove()}})),this._lastUpdate=t.timeNow}_getAnimatedEntity(e){let t=this._entities.get(e);return t||(t=new S(this,e),this._entities.set(e,t)),t}}class b{constructor(e,t){this._angle=0,this._pt1=new c,this._pt2=new c,this._anim=e,this._q=t.queue,this._max=t.max,this._element=h(t.element),this._elementEnd=t.endElement?h(t.endElement):null,this._angle=t.angle||0,this._stackEntities=t.stackEntities,i(this._q instanceof f,"q parameter should be a Queue")}_getStart(){return this._ptStart||(this._ptStart=this._getElementPosition(this._element)),this._ptStart}_getEnd(){return this._ptEnd||(this._ptEnd=this._getElementPosition(this._elementEnd||this._element)),this._ptEnd}_getElementPosition(e){const t=this._anim;switch(t.hostTag){case"X3D":return new E(e).center;case"A-SCENE":return c.clone(e.object3D.position);case"SVG":const n=e.getBBox();return new c(n.x+n.width/2,n.y+n.height/2,0);default:const s=t.hostElement.getBoundingClientRect(),i=e.getBoundingClientRect();return new c(i.left-s.left+i.width/2,i.top-s.top+i.height/2,0)}}_draw(){const e=this._anim,t=this._q;if(!t.pop)return void(this._ptEnd=null);if(!this._customPositions&&t.lastChange<e._lastUpdate&&"A-SCENE"!=e.hostTag){for(let t of this._q.items.values()){const n=e._entities.get(t.entity);n&&(n._inUse=!0)}return}let n=c.clone(this._getStart());this._ptEnd=null;let s=0;for(let i of t.items.values()){if(null!=this._max&&s>=this._max)break;const a=i.entity,r=e._getAnimatedEntity(a);r.updateIcon();const o=a.getAnimationPosition;if(o!=m.prototype.getAnimationPosition){const e=c.copy(this._pt1,this._getStart()),n=c.copy(this._pt2,this._getEnd()),s=o.call(a,t,e,n);if(null!=s){this._customPositions=!0,r._drawAt(s.position,s.angle);continue}}const l=this._angle*(e.isThreeD?-1:1),h=-l/180*Math.PI,u=Math.sin(h),d=-Math.cos(h),p=this._stackEntities,g=p?0:r._sz.x*d/2,q=p?0:(e.rotateEntities?r._sz.x:r._sz.y)*u/2;n.x+=g,n.y+=q,r._drawAt(n,l),n.x+=g,n.y+=q,s++}this._ptEnd=n}}class S{constructor(e,t){let n;switch(this._anim=e,this._entity=t,this._inUse=!1,e.hostTag){case"X3D":n=document.createElement("transform");break;case"A-SCENE":n=document.createElement("a-entity");break;case"SVG":n=document.createElementNS("http://www.w3.org/2000/svg","g"),n.style.opacity="0";break;default:n=document.createElement("div"),n.style.opacity="0"}switch(n.classList.add("ss-entity"),this._element=n,this.updateIcon(),e.sceneElement.appendChild(n),e.hostTag){case"X3D":const e=new E(n).size;this._sz={x:e.x,y:e.y,z:e.z};break;case"A-SCENE":this._sz=new c,requestAnimationFrame((()=>{const e=n.object3D,t=(new THREE.Box3).setFromObject(e);this._sz={x:t.max.x-t.min.x,y:t.max.y-t.min.y,z:t.max.z-t.min.z}}));break;case"SVG":{const e=n.getBBox();this._sz={x:e.width,y:e.height},this._offset={x:e.x+e.width/2,y:e.y+e.height/2}}break;default:{const e=n.getBoundingClientRect();this._sz={x:e.width,y:e.height},this._offset={x:e.width/2,y:e.height/2}}}}_getEntityHtml(){const e=this._anim.getEntityHtml;return e?e(this._entity):"&#9899;"}updateIcon(){const e=this._getEntityHtml();e!=this._html&&(this._element.innerHTML=this._html=e)}_drawAt(e,t){const n=this._anim,s=this._element,i=s.style;switch(n.hostTag){case"X3D":s.setAttribute("translation",`${e.x} ${e.y} ${e.z}`),s.setAttribute("rotation","0 0 1 "+(n.rotateEntities?t/180*Math.PI:0));break;case"A-SCENE":const a=s.object3D;a.position.set(e.x,e.y,e.z),a.rotation.set(0,0,t&&n.rotateEntities?t/180*Math.PI:0);break;case"SVG":default:const r=new c(e.x-this._offset.x,e.y-this._offset.y);let o=`translate(${Math.round(r.x)}px, ${Math.round(r.y)}px)`;t&&n.rotateEntities&&(o+=`rotate(${t}deg) `),i.transform=o,i.opacity=""}this._inUse=!0}}class E{constructor(e){this.center=new c,this.size=new c;const t=e.querySelectorAll("shape>:not(appearance)");if(0==t.length)this.applyGeometry(e),this.applyTransforms(e);else{this.applyGeometry(t[0]),this.applyTransforms(t[0]);for(let e=1;e<t.length;e++)this.merge(new E(t[e]))}}applyGeometry(e){const t=this.size;switch(e.tagName){case"BOX":t.x=t.y=t.z=2;let n=k(e,"size");n&&n.length>=3&&(t.x=n[0],t.y=n[1],t.z=n[2]);break;case"CONE":t.x=t.z=2*Math.max(C(e,"topRadius",0),C(e,"BottomRadius",0)),t.y=C(e,"height",0);break;case"CYLINDER":t.x=t.y=2*C(e,"radius",0),t.z=C(e,"height",0);break;case"SPHERE":t.x=t.y=t.z=2*C(e,"radius",1);break;default:console.error("skipping unknown geometry",e.tagName)}}applyTransforms(e){for(let t=e.closest("transform");null!=t;t=t.parentElement.closest("transform")){const e=k(t,"translation");if(e&&e.length>=3){const t=this.center;t.x+=e[0],t.y+=e[1],t.z+=e[2]}const n=k(t,"scale");if(n&&n.length>=3){const e=this.size;e.x*=n[0],e.y*=n[1],e.z*=n[2]}}}merge(e){const t=this.center,n=this.size,s=e.center,i=e.size,a=new c(Math.min(t.x-n.x/2,s.x-i.x/2),Math.min(t.y-n.y/2,s.y-i.y/2),Math.min(t.z-n.z/2,s.z-i.z/2)),r=new c(Math.max(t.x+n.x/2,s.x+i.x/2),Math.max(t.y+n.y/2,s.y+i.y/2),Math.max(t.z+n.z/2,s.z+i.z/2));t.x=(a.x+r.x)/2,t.y=(a.y+r.y)/2,t.z=(a.z+r.z)/2,n.x=r.x-a.x,n.y=r.y-a.y,n.z=r.y-a.y}}function k(e,t){const n=e.getAttribute(t),s=n?n.split(/\s*,\s*|\s+/):null;return s?s.map((e=>parseFloat(e))):null}function C(e,t,n){const s=e.getAttribute(t);return s?parseFloat(s):n}class M{constructor(e=null){this._seed=null,this._seed=e}sample(){if(null==this._seed)return Math.random();let e=this._seed+=1831565813;return e=Math.imul(e^e>>>15,1|e),e^=e+Math.imul(e^e>>>7,61|e),((e^e>>>14)>>>0)/4294967296}}class $ extends M{constructor(e,t,n){super(n),i(t>=e,"max >= min"),this._min=e,this._max=t}get min(){return this._min}get max(){return this._max}sample(){return this._min+super.sample()*(this._max-this._min)}}class A extends M{constructor(e,t,n,s){super(s),i(e<=t&&t<=n,"min, mode, max should be in order"),this._min=e,this._peak=t,this._max=n}get min(){return this._min}get mode(){return this._peak}get max(){return this._max}sample(){const e=this._max-this._min,t=e>0?(this._peak-this._min)/e:0,n=super.sample();return n<=t?this._min+e*Math.sqrt(t*n):this._min+e*(1-Math.sqrt((1-t)*(1-n)))}}class D extends M{constructor(e,t,n){super(n),i(t.length==e.length,"x and y arrays should have the same length");for(let s=1;s<t.length;s++)i(e[s]>=e[s-1]&&t[s]>=t[s-1],"x and y arrays should be in ascending order");i(0==t[0]&&1==t[t.length-1],"y values should range from zero to one"),this._xVals=e,this._yVals=t}get xVals(){return this._xVals}get yVals(){return this._yVals}sample(){const e=super.sample(),t=this._xVals,n=this._yVals;let s=0;for(;e>n[s]&&s<n.length;)s++;return 0==s?t[0]:t[s-1]+(e-n[s-1])*(t[s]-t[s-1])/(n[s]-n[s-1])}}class T extends M{constructor(e,t){super(t),i(e>0,"mean >= 0"),this._mean=e}get mean(){return this._mean}sample(){return-this._mean*Math.log(super.sample())}}class P extends M{constructor(e,t,n=!0,s){super(s),this._positive=!0,i(t>=0,"std >= 0"),this._mean=e,this._std=t,this._positive=n}get mean(){return this._mean}get std(){return this._std}sample(){let e=this._n1;if(null!=e)this._n1=null;else{let t,n,s,i;do{t=2*super.sample()-1,n=2*super.sample()-1,s=t*t+n*n}while(s>1);i=Math.sqrt(-2*Math.log(s)/s),this._n1=t*i,e=n*i}let t=this._mean+this._std*e;return this._positive?Math.max(0,t):t}}class z extends M{constructor(e,t,n){super(n),i(t>=0,"std >= 0"),this._mean=e,this._std=t;let s=e*e,a=t*t,r=Math.log(s/Math.sqrt(s+a)),o=Math.sqrt(Math.log((s+a)/s));this._normal=new P(r,o,!1,n)}get mean(){return this._mean}get std(){return this._std}sample(){return 0==this._mean?0:Math.pow(Math.E,this._normal.sample())}}class L extends M{constructor(e,t){super(t),this._max=e}get max(){return this._max}sample(){return Math.floor(super.sample()*(this._max+1))}}class I extends m{async script(){const e=this.simulation,t=e.randomVar,n=e.tally;n.reset(),n.setHistogramParameters(t.binSize);for(let s=0;s<e.sampleSize;s++)n.add(t.var.sample())}}class N extends M{sample(){return super.sample()<.5?8:80}}class R extends m{constructor(){super(...arguments),this.service=new $(12,18)}async script(){const e=this.simulation;await this.enterQueue(e.qWait),await this.enterQueue(e.qJoe),this.leaveQueue(e.qWait),await this.delay(this.service.sample()),this.leaveQueue(e.qJoe)}}class Q extends m{async script(){let e=this.simulation;e.qWait.canEnter()?this.enterQueueImmediately(e.qWait):await this.enterQueue(e.qWait),e.qService.canEnter()?this.enterQueueImmediately(e.qService):await this.enterQueue(e.qService),this.leaveQueue(e.qWait),await this.delay(e.service.sample()),this.leaveQueue(e.qService)}}var F,W;(W=F||(F={}))[W.RED=0]="RED",W[W.YELLOW=1]="YELLOW",W[W.GREEN=2]="GREEN";class X extends w{constructor(e){super(e),this.qPedArr=new f("Pedestrian Arrival"),this.qPedXing=new f("Pedestrian Crossing"),this.qPedXed=new f("Pedestrian Crossed"),this.qPedLeave=new f("Pedestrian Leaving"),this.qCarArr=new f("Car Arrival"),this.qCarXing=new f("Car Crossing"),this.qCarXed=new f("Car Crossed"),this.walkToXing=new $(60,120),this.walkAcross=new $(10,20),this.walkAway=new $(120,180),this.driveToXing=new $(5,6),this.driveAway=new $(10,12),this.pedestrianArrivalInterval=new T(6),this.carArrivalInterval=new T(10),this.cycle={red:20,yellow:10,green:30},this.light=0,this.qPedXing.grossPop.setHistogramParameters(3),this.qCarXing.grossPop.setHistogramParameters(2),null==this.timeEnd&&(this.timeEnd=86400)}onStarting(){super.onStarting(),this.activate(new V),this.generateEntities(H,this.pedestrianArrivalInterval),this.generateEntities(B,this.carArrivalInterval)}}class H extends m{async script(){let e=this.simulation;for(await this.delay(e.walkToXing.sample(),{queues:[e.qPedArr,e.qPedXing]}),await this.enterQueue(e.qPedXing);2!=e.light;)await this.waitSignal(2);this.leaveQueue(e.qPedXing),await this.delay(e.walkAcross.sample(),{queues:[e.qPedXing,e.qPedXed]}),await this.delay(e.walkAway.sample(),{queues:[e.qPedXed,e.qPedLeave]})}}class B extends m{async script(){let e=this.simulation;for(await this.delay(e.driveToXing.sample(),{queues:[e.qCarArr,e.qCarXing]}),await this.enterQueue(e.qCarXing);0!=e.light;)await this.waitSignal(0);this.leaveQueue(e.qCarXing),await this.delay(e.driveAway.sample(),{queues:[e.qCarXing,e.qCarXed]})}}class V extends m{async script(){let e=this.simulation;for(;;)this.setLight(2),await this.delay(e.cycle.green),this.setLight(1),await this.delay(e.cycle.yellow),this.setLight(0),await this.delay(e.cycle.red)}setLight(e){this.simulation.light=e,this.sendSignal(e)}}class O extends w{constructor(){super(...arguments),this.qAngle=270,this.qRotate=new f("Rotate"),this.qCenter=new f("qcenter"),this.q1=new f("q1"),this.q2=new f("q2"),this.q3=new f("q3"),this.q4=new f("q4"),this.q5=new f("q5"),this.q6=new f("q6"),this.q7=new f("q7"),this.q8=new f("q8"),this.q9=new f("q9"),this.q10=new f("q10"),this.q11=new f("q11"),this.q12=new f("q12"),this.splineTension=.5,this.interArrival=new $(5,10),this.moveDelayLong=new $(50,200),this.moveDelayShort=new $(30,60)}onStarting(){super.onStarting();for(let e=0;e<6;e++)this.activate(new U);this.generateEntities(G,this.interArrival,20)}}class U extends m{async script(){let e=this.simulation;this.enterQueueImmediately(e.qRotate),await this.waitSignal(null)}}class G extends m{constructor(e){super(null),this.fast=!1,this.fast=this.serial%2==0,l(this,e)}async script(){let e=this.simulation;for(;;){const t=this.fast?e.moveDelayShort:e.moveDelayLong;await this.delay(t.sample(),{queues:[e.qCenter,e.q1,e.q2,e.q3,e.q4,e.q5,e.q11,e.q10,e.q9,e.q8,e.q7,e.qCenter],tension:e.splineTension})}}}class j extends m{async script(){const e=this.simulation;await this.enterQueue(e.qMultiWait),await this.enterQueue(e.qMulti),await this.delay(e.service.sample()),this.leaveQueue(e.qMulti),this.leaveQueue(e.qMultiWait)}}class Y extends m{async script(){const e=this.simulation;let t;for(await this.enterQueue(e.qSingleWait);null==t;){for(let n=0;n<e.qSingle.length;n++){let s=e.qSingle[n];if(s.canEnter()){t=s;break}}null==t&&await this.waitSignal(Y)}this.enterQueueImmediately(t),await this.delay(e.service.sample()),this.leaveQueue(t),this.leaveQueue(e.qSingleWait),this.sendSignal(Y)}}class J extends m{async script(){const e=this.simulation;await this.enterQueue(e.qSingleWaitNC);let t=Math.floor(10*Math.random()),n=e.qSingleNC[t];await this.enterQueue(n),await this.delay(e.service.sample()),this.leaveQueue(n),this.leaveQueue(e.qSingleWaitNC)}}class K{constructor(e){l(this,e)}set nodes(e){this._nodes=e}get nodes(){return this._nodes}set links(e){this._links=e}get links(){return this._links}getNode(e){return e=e.toString(),this._nodes.find((t=>t.id==e))}shortestPath(e,t){const n=[],s=[];for(this._nodes.forEach((t=>{n.push({id:t.id,node:t,distance:t==e?0:1/0,link:null})}));n.length;){let e=null;n.forEach((t=>{(null==e||t.distance<e.distance)&&(e=t)})),n.splice(n.indexOf(e),1),s.push(e),n.length&&this._links.forEach((t=>{t.from!=e.node||t.disabled||n.forEach((n=>{if(n.node==t.to){const s=e.distance+this.getLinkDistance(t,e.link);s<n.distance&&(n.distance=s,n.link=t)}}))}))}const i=[];for(let a=t;null!=a;){const e=this._getPathPart(s,a).link;if(!e)break;a=e.from,i.unshift(e)}return i}getLinkDistance(e,t){let n=null;return null!=e.distance?n=e.distance:(i(null!=e.from.position&&null!=e.to.position,"link must have a distance or connect points with positions"),n=c.distance(e.from.position,e.to.position)),n}mergePath(e){const t=[];let n=0;return e.forEach(((s,i)=>{n+=this.getLinkDistance(s,i>0?e[i-1]:null),0==i&&t.push(s.from.queue),t.push(s.to.queue)})),[t,n]}_getLinkAngle(e){return c.angle(e.from.position,e.to.position,!0)}_getPathPart(e,t){for(let n=0;n<e.length;n++){let s=e[n];if(s.node==t)return s}return null}}var Z;function ee(e,t){return`${e}.${t.serial}`}!function(e){e[e.RequestArrived=0]="RequestArrived",e[e.RequestAssigned=1]="RequestAssigned",e[e.ServiceArrived=2]="ServiceArrived",e[e.ServiceFinished=3]="ServiceFinished"}(Z||(Z={}));class te extends w{constructor(){super(...arguments),this.serviceVehicles=5,this.requests=1e3,this.requestsServed=0,this.requestsMissed=0,this.qBusy=new f("busy",this.serviceVehicles),this.qWait=new f("wait"),this.qService=new f("service"),this.interArrivalTime=new T(60),this.serviceTime=new T(120),this.serviceVehicleSpeed=new $(3,6),this.network=function(e,t,n){const s=[];for(let a=0;a<e;a++)for(let e=0;e<t;e++)s.push({id:s.length.toString(),position:{x:e*n,y:a*n},queue:new f});const i=[];for(let a=0;a<s.length;a++){const n=Math.floor(a/t),r=a%t;r<t-1&&(i.push({from:s[a],to:s[a+1]}),i.push({from:s[a+1],to:s[a]})),n<e-1&&a%2!=0&&(i.push({from:s[a],to:s[a+t]}),i.push({from:s[a+t],to:s[a]})),0==n&&0==r&&(i.push({from:s[a+1],to:s[a+t]}),i.push({from:s[a+t],to:s[a+1]})),0==n&&r==t-1&&(i.push({from:s[a-1],to:s[a+t]}),i.push({from:s[a+t],to:s[a-1]})),n==e-1&&0==r&&(i.push({from:s[a+1],to:s[a-t]}),i.push({from:s[a-t],to:s[a+1]})),n==e-1&&r==t-1&&(i.push({from:s[a-1],to:s[a-t]}),i.push({from:s[a-t],to:s[a-1]}))}return new K({nodes:s,links:i})}(5,9,100),this.rndNode=new L(this.network.nodes.length-1),this.requestFinished=new s}onStarting(){super.onStarting(),this.servers=[],this.requestsServed=0,this.requestsMissed=0,this.generateEntities(ne,this.interArrivalTime,this.requests),this.generateEntities(se,new L(0),this.serviceVehicles)}getRandomFreeNode(){const e=this.network.nodes;let t=this.rndNode.sample();for(let n=0;n<e.length;n++){let s=e[(t+n)%e.length];if(!s.queue.pop)return s}return null}onRequestFinished(e){this.requestFinished.raise(this,e)}}class ne extends m{async script(){const e=this.simulation;if(this.node=e.getRandomFreeNode(),!this.node)return e.requestsMissed++,void console.log(`out of free nodes (${e.requestsMissed} times)`);this.enterQueueImmediately(e.qWait),this.enterQueueImmediately(this.node.queue),this.sendSignal(0),await this.waitSignal(ee(1,this)),await this.waitSignal(ee(2,this)),this.leaveQueue(e.qWait),this.leaveQueue(this.node.queue),await this.waitSignal(ee(3,this)),e.onRequestFinished()}}class se extends m{constructor(){super(...arguments),this.busy=!1}async script(){const e=this.simulation;for(e.servers.push(this),this.node=e.getRandomFreeNode(),this.enterQueueImmediately(this.node.queue);;){for(this.request=null;!this.request;)this.request=this.getClosestRequest(),this.request||await this.waitSignal(0);i(null==this.request.assigned,"request should not be assigned"),this.request.assigned=this.serial,this.sendSignal(ee(1,this.request)),this.enterQueueImmediately(e.qBusy),this.leaveQueue(this.node.queue);const t=e.network.shortestPath(this.node,this.request.node);i(t.length>0,"cannot reach destination");{const[n,s]=e.network.mergePath(t);await this.delay(s/e.serviceVehicleSpeed.sample(),{queues:n,tension:.8})}this.busy=!0,this.node=this.request.node,this.sendSignal(ee(2,this.request)),this.enterQueueImmediately(this.node.queue),this.enterQueueImmediately(e.qService),await this.delay(e.serviceTime.sample()),this.leaveQueue(e.qService),this.sendSignal(ee(3,this.request)),this.leaveQueue(this.node.queue),this.busy=!1,e.requestsServed++,this.enterQueueImmediately(this.node.queue),this.leaveQueue(e.qBusy)}}getClosestRequest(){const e=this.simulation;i(!this.busy,"should not be looking for service while busy");let t,n=null;return e.qWait.entities.forEach((e=>{if(null==e.assigned){const s=c.distance(this.node.position,e.node.position);(null==t||s<t)&&(n=e,t=s)}})),n}getClosestRequest2(){const e=this.simulation;i(!this.busy,"should not be looking for service while busy");const t=e.servers.filter((e=>0==e.busy)),n=e.qWait.entities.filter((e=>null==e.assigned));if(0==n.length)return null;const s=[];t.forEach((e=>{let t=[];s.push(t),n.forEach((n=>{const s=c.distance(e.node.position,n.node.position);t.push(s)}))}));const a=new Map,r=new Map;for(;a.size<t.length&&r.size<n.length;){const e={distance:null,vehicle:null,destination:null};for(let i=0;i<s.length;i++)if(!a.has(t[i]))for(let a=0;a<s[i].length;a++)if(!r.has(n[a])){let r=s[i][a];(null==e.distance||r<e.distance)&&(e.vehicle=t[i],e.destination=n[a],e.distance=r)}a.set(e.vehicle,e.destination),r.set(e.destination,e.vehicle)}return a.get(this)}}function ie(e,t){const n=t.querySelector("scene");let s="";e.nodes.forEach((e=>{const t=e.position;s+=`\n            <transform class='ss-queue q${e.id}' translation='${t.x} ${t.y} 0'>\n                <shape>\n                    <appearance>\n                        <material transparency='0.5' diffuseColor='1 1 0'/>\n                    </appearance>\n                    <box size='5 5 2'></box>\n                </shape>\n            </transform>`})),e.links.forEach(((e,t)=>{if(t%2==0){const t=e.from.position,n=e.to.position,i=c.distance(t,n);s+=`\n            <transform translation='${t.x} ${t.y} 0' rotation='0 0 1 ${c.angle(t,n,!0)}'>\n                <transform translation='${i/2} 0 0'>\n                    <shape>\n                        <appearance>\n                            <material transparency='0' diffuseColor='.1 .1 .1'/>\n                        </appearance>\n                        <box size='${i+30} 40 1'></box>\n                    </shape>\n                </transform>\n            </transform>`}})),n.innerHTML+=s}class ae extends m{constructor(){super(...arguments),this.speed=0,this.accel=10,this.position=0,this.maxSpeed=0}async script(){const e=this.simulation,t=e.timeIncrement;for(this.maxSpeed=e.carSpeeds.sample(),this.enterQueueImmediately(e.qStrip);this.position<e.stripLength;)this.speed=this.getSpeed(t),await this.delay(t),this.position+=this.speed*t;this.leaveQueue(e.qStrip),e.onCarFinished()}getAnimationPosition(e,t,n){const s=this.simulation;return{position:c.interpolate(t,n,this.position/s.stripLength),angle:c.angle(t,n,!1)}}getSpeed(e){const t=Math.min(this.getSafeSpeed(e),this.maxSpeed);return t>this.speed?Math.min(t,this.speed+this.accel*e):t<this.speed?Math.max(t,this.speed-this.accel*e):this.speed}getSafeSpeed(e){let t=this.maxSpeed;const n=this.getCarAhead();if(null!=n){let s=n.position-this.position;n.speed&&n.accel&&(s+=n.speed*n.speed/(2*n.accel));const i=e*e/4-(this.speed*e-2*s)/this.accel;t=i>0?+this.accel*(Math.sqrt(i)-e/2):-this.accel*e/2}return Math.max(0,t)}getCarAhead(){const e=this.simulation,t=e.qStrip.entities;let n=t.indexOf(this);return n>0?t[n-1]:{speed:0,maxSpeed:0,accel:0,position:e.stripLength}}}class re extends m{constructor(){super(...arguments),this.speed=0,this.accel=10,this.position=0,this.length=25,this.maxSpeed=0,this.delayStart=0}async script(){const e=this.simulation,t=e.network,n=t.nodes,s=e.timeIncrement;this.maxSpeed=e.carSpeeds.sample();let i=n[0],a=n[n.length-1],r=0;for(;i!=a;){const n=e.timeNow;this.path=t.shortestPath(i,a);const o=this.path[0],l=e.network.getLinkDistance(o);for(this.position=r,this.enterQueueImmediately(o.queue);this.position<l;)this.speed=this.getSpeed(s),this.delayStart=e.timeNow,await this.delay(s),this.position+=this.speed*s;this.leaveQueue(o.queue),i=o.to,r=Math.max(0,this.position-l),e.stats.totalDistance+=c.distance(o.from.position,o.to.position),e.stats.totalTime+=e.timeNow-n}e.stats.carsDone++,e.onCarFinished()}getAnimationPosition(e,t,n){const s=this.simulation,i=s.network.getLinkDistance(this.path[0]),a=this.position+(s.timeNow-this.delayStart)*this.speed;return{position:c.interpolate(t,n,a/i),angle:c.angle(t,n,!1)}}getSpeed(e){const t=Math.min(this.getSafeSpeed(e),this.maxSpeed);return t>this.speed?Math.min(t,this.speed+this.accel*e):t<this.speed?Math.max(t,this.speed-this.accel*e):this.speed}getSafeSpeed(e){let t=this.maxSpeed;const n=this.getCarAhead();if(null!=n){let s=Math.max(0,n.position-this.position-n.length);n.speed&&n.accel&&(s+=n.speed*n.speed/(2*n.accel));const i=e*e/4-(this.speed*e-2*s)/this.accel;t=i>0?+this.accel*(Math.sqrt(i)-e/2):-this.accel*e/2}return Math.max(0,t)}getCarAhead(){const e=this.simulation,t=this.path[0],n=t.queue,s=n.entities.indexOf(this);if(s>0)return n.entities[s-1];if(this.path.length>1){const e=this.path[1].queue;if(e.pop){const t=e.entities[0];return{speed:t.speed,maxSpeed:t.maxSpeed,accel:t.maxSpeed,position:this.position+t.position,length:t.length}}return null}return{speed:0,maxSpeed:0,accel:0,position:e.network.getLinkDistance(t),length:0}}}class oe extends K{getLinkDistance(e,t){let n=super.getLinkDistance(e,t);return n+=n*e.queue.pop*.5,n}}const le={};var he,ue;(ue=he||(he={})).thrust="thrust.mp3",ue.missile="missile.mp3",ue.explosion="explosion.mp3",ue.won="won.mp3",ue.lost="lost.mp3";class ce extends m{constructor(e){super(e),this.radius=0,this.spd=new c,this.done=!1,e&&null!=e.angle||(this.angle=-90),e&&e.pos||(this.pos={x:500,y:250})}get angle(){return this._angle}set angle(e){this._angle=e,this._cos=Math.cos(e*Math.PI/180),this._sin=Math.sin(e*Math.PI/180)}get sin(){return this._sin}get cos(){return this._cos}incrementSpeed(e,t){const n=this.spd;if(n.x+=e*this.cos,n.y+=e*this.sin,null!=t){const e=Math.sqrt(n.x*n.x+n.y*n.y),s=t/e;0!=e&&s<1&&(n.x*=s,n.y*=s)}}updatePosition(e,t){const n=this.pos,s=this.spd;return n.x+=s?s.x*e:0,n.y+=s?s.y*e:0,t&&(n.x=this.wrap(n.x,1e3),n.y=this.wrap(n.y,500)),n.x>=0&&n.x<=1e3&&n.y>=0&&n.y<=500}wrap(e,t){return e<0?t:e>t?0:e}collidedWidth(e){return!this.done&&!e.done&&c.distance(this.pos,e.pos)<this.radius+e.radius}getAnimationPosition(e,t,n){return null==this.pos&&(this.pos=t),{position:this.pos,angle:this.angle}}}class de extends ce{constructor(){super(...arguments),this.engineOn=0}async script(){const e=this.simulation,t=e.timeIncrement;for(this.radius=45,this.enterQueueImmediately(e.q);!this.done;)await this.delay(t),this.updatePosition(t,!0),e.timeNow-this.engineOn>3&&(this.engineOn=0);this.leaveQueue(e.q)}keydown(e){if(!this.done){const t=this.simulation;switch(e.key){case"ArrowLeft":case"ArrowRight":{let t="ArrowLeft"==e.key?-10:10;e.shiftKey&&(t*=3),this.angle=(this.angle+t)%360}e.preventDefault();break;case"ArrowUp":this.incrementSpeed(2,20),this.engineOn=t.timeNow,t.play(he.thrust),e.preventDefault();break;case" ":const n=new me(this);t.activate(n),t.missilesFired++,t.onMissilesFiredChanged(),e.preventDefault();break;case"S":case"s":t.sound=!t.sound,e.preventDefault()}}}}class me extends ce{constructor(e){super(),this.radius=10;const t=e.pos;this.pos={x:t.x+80*e.cos,y:t.y+80*e.sin},this.angle=e.angle,this.spd=c.clone(e.spd),this.incrementSpeed(30)}async script(){const e=this.simulation,t=e.timeIncrement;for(e.play(he.missile),this.enterQueueImmediately(e.q);!this.done&&(await this.delay(t),this.updatePosition(t,!1)););this.leaveQueue(e.q)}}class pe extends ce{constructor(){super(...arguments),this.small=Math.random()<.4}async script(){const e=this.simulation,t=e.ship,n=e.q.entities,s=e.timeIncrement,i=e.asteroidSpeed.sample(),a=(Math.floor(20*Math.random())-10)*(this.small?2:1);for(this.radius=this.small?40:80,this.pos=new c(t.pos.x+500,t.pos.y+250),this.angle=Math.floor(360*Math.random()),this.incrementSpeed(i),this.enterQueueImmediately(e.q);!this.done&&!t.done;){if(this.collidedWidth(t)){e.play(he.explosion),e.gameOver(!1);break}for(let t=0;t<n.length;t++){const s=n[t];if(s instanceof me&&this.collidedWidth(s)){e.play(he.explosion),s.done=!0,this.done=!0,e.asteroidsDestroyed++,e.onAsteroidsDestroyedChanged(),8==e.asteroidsDestroyed&&e.gameOver(!0);break}}await this.delay(s),this.updatePosition(s,!0),this.angle=(this.angle+a)%360}this.leaveQueue(e.q)}}function ge(e,t,n,s=0){return`\n        <transform class='ss-queue ${e}' translation='${t} ${n} ${s}'>\n            <shape>\n                <appearance>\n                    <material diffuseColor='1 1 0' transparency='0.6'></material>\n                </appearance>\n                <sphere radius='4'></sphere>\n            </shape>\n        </transform>`}function qe(e,t,n,s,i){return`<transform class='ss-car ${e}' translation='0 0 ${n/2}'>\n        <transform>\n            <shape> \x3c!-- body --\x3e\n                <appearance>\n                    <material diffuseColor='${i[0]} ${i[1]} ${i[2]}'></material>\n                </appearance>\n                <box size='${t} ${n} ${s}'></box>\n            </shape>\n            <shape render='false'> \x3c!-- 5 unit padding --\x3e\n                <box size='${1.1*t} ${1.1*n} ${1.1*s}'></box>\n            </shape>\n        </transform>\n        <transform translation='${.2*-t} 0 ${.5*+s}'>\n            <shape> \x3c!-- cabin --\x3e\n                <appearance>\n                    <material diffuseColor='${i[0]/3} ${i[1]/3} ${i[2]/3}'></material>\n                </appearance>\n                <box size='${.5*t} ${.75*n} ${s}'></box>\n            </shape>\n        </transform>\n        <transform translation='${-t/2+4} 0 -2'>\n            <shape> \x3c!-- front wheels --\x3e\n                <appearance>\n                    <material diffuseColor='0 0 0'></material>\n                </appearance>\n                <cylinder radius='3' height='${n+2}'></cylinder>\n            </shape>\n        </transform>\n        <transform translation='${+t/2-4} 0 -2'>\n            <shape> \x3c!-- rear wheels --\x3e\n                <appearance>\n                    <material diffuseColor='0 0 0'></material>\n                </appearance>\n                <cylinder radius='3' height='${n+2}'></cylinder>\n            </shape>\n        </transform>\n    </transform>`}we(new class extends w{constructor(e){super(e),this._tally=new x,this._sampleSize=1e3,this._seeded=!1,this._index=0,this.createRandomVars()}get seeded(){return this._seeded}set seeded(e){this._seeded=e,this.createRandomVars()}get sampleSize(){return this._sampleSize}set sampleSize(e){this._sampleSize=e}get randomVars(){return this._randomVars}get randomVar(){return this._randomVars[this._index]}get tally(){return this._tally}get randomVarIndex(){return this._index}set randomVarIndex(e){this._index=e}createRandomVars(){const e=this._seeded?1:null;this._randomVars=[{var:new M(e),name:"Uniform(0, 1)",binSize:.1},{var:new $(5,10,e),name:"Uniform(5, 10)",binSize:.5},{var:new A(5,6,10,e),name:"Triangular(5, 6, 10)",binSize:.5},{var:new D([5,8,10],[0,.8,1],e),name:"Empirical([5, 8, 10], [0, .8, 1])",binSize:.5},{var:new T(10,e),name:"Exponential(10)",binSize:20},{var:new P(10,2,!0,e),name:"Normal(10, 2)",binSize:2},{var:new z(10,2,e),name:"LogNormal(10, 2)",binSize:2},{var:new L(10,e),name:"RandomInt(10)",binSize:1},{var:new N(e),name:"EightEighty()",binSize:10}]}onStarting(){super.onStarting(),this.createRandomVars(),this.activate(new I)}},"RandomVarTest Simulation","<p>\n        Shows how to create and use\n        <a href='https://en.wikipedia.org/wiki/Random_variable'>random variable</a>\n        objects.\n    </p>\n    <p>\n        Random variables are used to obtain values for inter-arrival times,\n        service times, and other non-deterministic values.\n    </p>\n    <p>\n        Random variables may specify seed values, which cause the variable to\n        produce repeatable streams of random values. If a seed value is not\n        specified, then each run produces a different stream of random values.\n    </p>",((e,t)=>{t.innerHTML=`\n        <label>\n            Type:\n            <select id='rand-type'>${function(){let t="";return e.randomVars.forEach(((n,s)=>{t+=`<option ${s==e.randomVarIndex?"selected":""}>\n                    ${n.name}\n                </option>`})),t}()}</select>\n        </label>\n        <label>\n            Sample size:\n            <input id='rand-size' type='range' data='size' min='10' max='100000'>\n        </label>\n        <label>\n            Seeded:\n            <input id='rand-seeded' type='checkbox'>\n        </label>\n        <ul>\n            <li>Count:\n                <b>${a(e.tally.cnt,0)}</b>\n            </li>\n            <li>Average:\n                <b>${a(e.tally.avg)}</b>\n            </li>\n            <li>Standard Deviation:\n                <b>${a(e.tally.stdev)}</b>\n            </li>\n            <li>Variance:\n                <b>${a(e.tally.var)}</b>\n            </li>\n            <li>Min:\n                <b>${a(e.tally.min)}</b>\n            </li>\n            <li>Max:\n                <b>${a(e.tally.max)}</b>\n            </li>\n        </ul>`+e.tally.getHistogramChart(e.randomVar.name),o("rand-type",e.randomVarIndex,(t=>e.randomVarIndex=t)),o("rand-size",e.sampleSize,(t=>e.sampleSize=t)," samples"),o("rand-seeded",e.seeded,(t=>e.seeded=t))})),we(new class extends w{constructor(e){super(e),this.qMulti=new f("MultiServer",10),this.qMultiWait=new f("MultiServerWait"),this.qSingle=[],this.qSingleWait=new f("SingleServerWait"),this.qSingleNC=[],this.qSingleWaitNC=new f("SingleServerWaitNC"),this.interArrival=new T(10),this.service=new T(80);for(let t=0;t<10;t++)this.qSingle.push(new f(`Single(${t})`,1)),this.qSingleNC.push(new f(`SingleNC(${t})`,1))}onStarting(){super.onStarting(),this.generateEntities(j,this.interArrival),this.generateEntities(Y,this.interArrival),this.generateEntities(J,this.interArrival)}}({timeEnd:1e5}),"MultiServer Simulation","<p>\n        Single resource with multiple servers versus\n        multiple resources with a single server.\n    </p>",((e,t)=>{let n=0;e.qSingle.forEach((e=>{n+=e.grossPop.avg/e.capacity})),n/=e.qSingle.length;let s=0;e.qSingleNC.forEach((e=>{s+=e.grossPop.avg/e.capacity})),s/=e.qSingleNC.length;const i=(e,t)=>`\n                <ul>\n                    <li>Utilization:\n                        <b>${a(100*e)}%</b>\n                    </li>\n                    <li>Count:\n                        <b>${a(t.totalCount,0)}</b> customers\n                    </li>\n                    <li>Average Wait:\n                        <b>${a(t.averageDwell)}</b> minutes\n                    </li>\n                    <li>Longest Wait:\n                        <b>${a(t.maxDwell)}</b> minutes\n                    </li>\n                    <li>Average Queue:\n                        <b>${a(t.averageLength)}</b> customers\n                    </li>\n                    <li>Longest Queue (95%):\n                        <b>${a(t.grossPop.avg+2*t.grossPop.stdev)}</b> customers\n                    </li>\n                    <li>Longest Queue:\n                        <b>${a(t.maxLength)}</b> customers\n                    </li>\n                </ul>\n            `;t.innerHTML=`\n            <h3>\n                Single Multi-Server Resource\n            </h3>\n            <p>\n                One queue (resource) with multiple servers.\n            </p>\n            ${i(e.qMulti.utilization,e.qMultiWait)}\n            <h3>\n                Multiple Single-Server Resources (Available Server, single-line)\n            </h3>\n            <p>\n                Multiple queues (resources) with a single server each.\n            </p>\n            <p>\n                Customers look for available servers as they arrive.\n                The results are the same as those for a single queue\n                with multiple servers.\n            </p>\n            ${i(n,e.qSingleWait)}\n            <h3>\n                Multiple Single-Server Resources (Random Server, multi-line)\n            </h3>\n            <p>\n                Multiple queues (resources) with a single server each.\n            </p>\n            <p>\n                Customers choose a server randomly when they arrive.\n                Even though the number of servers and service times\n                are the same, the load is not evenly distributed among\n                the servers, so queues and waits are longer.\n            </p>\n            ${i(s,e.qSingleWaitNC)}\n            <h3>\n                Stats\n            </h3>\n            ${e.getStatsTable(!0)}\n        `})),we(new class extends w{constructor(){super(...arguments),this.qJoe=new f("Joe",1),this.qWait=new f("Wait Area")}onStarting(){super.onStarting(),this.timeEnd=3360,this.qWait.grossDwell.setHistogramParameters(1),this.generateEntities(R,new $(12,24))}},"BarberShop Simulation","<p>\n        This is a classic\n        <a\n            href='https://try-mts.com/gpss-introduction-and-barber-shop-simulation/'\n        >GPSS simulation example</a>:\n        customers arrive at a barbershop,\n        wait until the barber is available, get serviced, and leave.\n    </p>",((e,t)=>{t.innerHTML=`<ul>\n            <li>Simulated time: <b>${a(e.timeNow/60,0)}</b> hours</li>\n            <li>Elapsed time: <b>${a(e.timeElapsed/1e3,2)}</b> seconds</li>\n            <li>Barber Utilization: <b>${a(100*e.qJoe.grossPop.avg)}%</b></li>\n            <li>Average Wait: <b>${a(e.qWait.grossDwell.avg)}</b> minutes</li>\n            <li>Longest Wait: <b>${a(e.qWait.grossDwell.max)}</b> minutes</li>\n            <li>Waiting chairs needed: <b>${a(e.qWait.grossPop.max,0)}</b></li>\n            <li>Customers Served: <b>${a(e.qJoe.grossDwell.cnt,0)}</b></li>\n        </ul>`+e.getStatsTable(!0)+e.qWait.grossDwell.getHistogramChart("Waiting Times (min)")})),we(new class extends w{constructor(){super(...arguments),this.qWait=new f("Wait"),this.qService=new f("Service",2),this.interArrival=new T(80),this.service=new T(100),this.tally=new x}onStarting(){super.onStarting(),this.interArrival=new T(this.interArrival.mean),this.service=new T(this.service.mean),this.qWait.grossPop.setHistogramParameters(1,0,10),this.qWait.grossDwell.setHistogramParameters(60,0,499.9),this.generateEntities(Q,this.interArrival,1e5)}},"M/M/C Simulation","<p>\n        This is a classic\n        <a href='https://en.wikipedia.org/wiki/M/M/c_queue'>M/M/C queueing system</a>.\n        Entities arrive, are served by one of C servers, and leave.\n    </p>\n    <p>\n        This system is simple enough that there are formulas to calculate the\n        average queue length and waits (calculated values are shown in italics).\n    </p>",((e,t)=>{const n=1/e.interArrival.mean,s=1/e.service.mean,i=e.qService.capacity,r=n/s,l=r/i,h=1/(function(e,t){let n=0;for(let s=0;s<t;s++)n+=1/d(s)*Math.pow(e,s);return n}(r,i)+1/d(i)*Math.pow(r,i)*i*s/(i*s-n)),u=(Math.pow(r,i)*s*h/(d(i-1)*Math.pow(i*s-n,2))+1/s)*n-r,c=u/n;function d(e){let t=1;for(let n=2;n<=e;n++)t*=n;return t}t.innerHTML=`\n            <label>\n                Number of Servers:\n                <input id='mmc-capy' type='range' min='2' max='10'>\n            </label>\n            <label>\n                Mean inter-arrival time:\n                <input id='mmc-inter-arr' type='range' min='10' max='200'>\n            </label>\n            <label>\n                Mean service time:\n                <input id='mmc-service' type='range' min='10' max='200'>\n            </label>\n            <ul>\n                <li>Simulated time:\n                    <b>${a(e.timeNow/60,0)}</b> hours\n                </li>\n                <li>Elapsed time:\n                    <b>${a(e.timeElapsed/1e3,2)}</b> seconds\n                </li>\n                <li>Number of Servers:\n                    <b>${a(e.qService.capacity,0)}</b>\n                </li>\n                <li>Mean Inter-Arrival Time:\n                    <b>${a(e.interArrival.mean,0)}</b> minutes\n                </li>\n                <li>Mean Service Time:\n                    <b>${a(e.service.mean,0)}</b> minutes\n                </li>\n                <li>Server Utilization:\n                    <b>${a(e.qService.grossPop.avg/e.qService.capacity*100)}%</b>\n                    (<i>${a(100*l)}%</i>)\n                </li>\n                <li>Average Wait:\n                    <b>${a(e.qWait.grossDwell.avg)}</b>\n                    (<i>${a(c)})</i> minutes\n                </li>\n                <li>Average Queue:\n                    <b>${a(e.qWait.grossPop.avg)}</b>\n                    (<i>${a(u)}</i>) customers\n                </li>\n                <li>Longest Wait:\n                    <b>${a(e.qWait.grossDwell.max)}</b> minutes\n                </li>\n                <li>Longest Queue:\n                    <b>${a(e.qWait.grossPop.max,0)}</b> customers\n                </li>\n                <li>\n                    Customers Served: <b>${a(e.qService.grossDwell.cnt,0)}</b>\n                </li>\n            </ul>`,l>1&&(t.innerHTML+="<p class='error'>\n                ** The server utilization exceeds 100%; the system will not reach a steady-state **\n            </p>"),t.innerHTML+=`\n            ${e.qWait.grossPop.getHistogramChart("Queue lengths")}\n            ${e.qWait.grossDwell.getHistogramChart("Wait times (minutes)")}`,o("mmc-capy",e.qService.capacity,(t=>e.qService.capacity=t)),o("mmc-inter-arr",e.interArrival.mean,(t=>e.interArrival=new T(t))),o("mmc-service",e.service.mean,(t=>e.service=new T(t)))})),we(new X,"Crosswalk Simulation","<p>\n        Simulates a crosswalk with a traffic light.\n    </p>\n    <p>\n        Shows how to use the <b>waitsignal</b> and <b>sendSignal</b> methods.\n    </p>",((e,t)=>{const n=e.cycle,s=(n.yellow+n.red)/(n.yellow+n.red+n.green)*(n.yellow+n.red)/2,i=(n.yellow+n.green)/(n.yellow+n.red+n.green)*(n.yellow+n.green)/2,r=n.yellow+n.red,l=n.yellow+n.green;t.innerHTML=`\n            <p>\n                Pedestrian light cycle times (seconds):\n            </p>\n            <label>\n                <span class='light red'></span>Red:\n                <input id='xwalk-red' type='range' min='0' max='120' >\n            </label>\n            <label>\n                <span class='light yellow'></span>Yellow:\n                <input id='xwalk-yellow' type='range' min='0' max='120' >\n            </label>\n            <label>\n                <span class='light green'></span>Green:\n                <input id='xwalk-green' type='range' min='0' max='120' >\n            </label>\n            <ul>\n                <li>Simulated time: <b>${a(e.timeNow/60/60)}</b> hours</li>\n                <li>Elapsed time: <b>${a(e.timeElapsed/1e3)}</b> seconds</li>\n                <li>\n                    Average Pedestrian Wait: <b>${a(e.qPedXing.grossDwell.avg)}</b>\n                    <i>(${a(s)})</i> seconds\n                </li>\n                <li>\n                    Longest Pedestrian Wait: <b>${a(e.qPedXing.grossDwell.max)}</b>\n                    <i>(${a(r)})</i> seconds\n                </li>\n                <li>\n                    Average Car Wait: <b>${a(e.qCarXing.grossDwell.avg)}</b>\n                    <i>(${a(i)})</i> seconds\n                </li>\n                <li>\n                    Longest Car Wait: <b>${a(e.qCarXing.grossDwell.max)}</b>\n                    <i>(${a(l)})</i> seconds\n                </li>\n                <li>Pedestrian Count: <b>${a(e.qPedXing.grossDwell.cnt,0)}</b></li>\n                <li>Car Count: <b>${a(e.qCarXing.grossDwell.cnt,0)}</b></li>\n            </ul>`+e.qPedXing.grossPop.getHistogramChart("Pedestrians waiting to cross")+e.qCarXing.grossPop.getHistogramChart("Cars waiting to cross"),o("xwalk-red",e.cycle.red,(t=>e.cycle.red=t)," seconds"),o("xwalk-yellow",e.cycle.yellow,(t=>e.cycle.yellow=t)," seconds"),o("xwalk-green",e.cycle.green,(t=>e.cycle.green=t)," seconds")})),we(new X({frameDelay:20}),"Animated Crosswalk Simulation","   <p>\n            This sample uses the same Crosswalk <b>Simulation</b> class\n            as shown earlier, with an added <b>Animation</b> object that\n            adds an animated pane to show the flow of entities through\n            the simulation.\n        </p>\n        <p>\n            The animation pane is a regular <code>&lt;div&gt;</code> element.\n            Queue positions are defined by elements in the animation element.\n            Entities in each queue and in transit between queues are shown\n            using <code>&lt;img&gt;</code> elements.\n        </p>\n        <p>\n            Animations are great for presenting simulations and can be useful\n            for debugging purposes.\n            Keeping them decoupled from the simulations keeps <b>SimScript</b>\n            simple and flexible.\n        </p>\n        <div class='ss-anim'>\n            <div class='time-now'>\n                Time: <span>0.00</span> hours\n            </div>\n            <div class='light'>\n                <div class='red'></div>\n                <div class='yellow'></div>\n                <div class='green'></div>\n            </div>\n\n            <div class='street'></div>\n            <div class='crosswalk'></div>\n\n            <div class='ss-queue car-arr'></div>\n            <div class='ss-queue car-xing'></div>\n            <div class='ss-queue car-xed'></div>\n\n            <div class='ss-queue ped-arr'></div>\n            <div class='ss-queue ped-xing'></div>\n            <div class='ss-queue ped-xed'></div>\n            <div class='ss-queue ped-leave'></div>\n        </div>\n    ",((e,t)=>{new _(e,t,{getEntityHtml:e=>e instanceof H?"<img class='ped' src='resources/blueped.png' width='15' height='19'>":"<img class='car' src='resources/redcar.png' width='55' height='19'>",queues:[{queue:e.qPedArr,element:".ss-queue.ped-arr"},{queue:e.qPedXing,element:".ss-queue.ped-xing",angle:-45,max:8},{queue:e.qPedXed,element:".ss-queue.ped-xed"},{queue:e.qPedLeave,element:".ss-queue.ped-leave"},{queue:e.qCarArr,element:".ss-queue.car-arr"},{queue:e.qCarXing,element:".ss-queue.car-xing",angle:0,max:16},{queue:e.qCarXed,element:".ss-queue.car-xed"}]});const n=t.querySelectorAll(".light div"),s=t.querySelector(".time-now span"),i=()=>{s.textContent=a(e.timeNow/3600);for(let t=0;t<n.length;t++)n[t].style.opacity=t==e.light?"1":""};e.timeNowChanged.addEventListener(i),e.stateChanged.addEventListener(i)})),we(new X({frameDelay:20}),"Animated Crosswalk Simulation (SVG)","   <p>\n            This sample uses the same Crosswalk <b>Simulation</b> class\n            as shown earlier, this time using an SVG-based animation.\n        </p>\n        <div class='svg ss-time-now'>\n            Time: <b><span>0.00</span></b> hours\n        </div>\n        <svg class='ss-anim' viewBox='0 0 1000 500'>\n            <g class='light'>\n                <rect class='light' x='47.5%' y='0%' width='5%' height='25%' rx='2%' />\n                <circle class='red' cx='50%' cy='5%' r='2%' />\n                <circle class='yellow' cx='50%' cy='12.5%' r='2%' />\n                <circle class='green' cx='50%' cy='20%' r='2%' />\n            </g>\n\n            <rect class='street' x='10%' y='50%' width='80%' height='20%' />\n            <rect class='crosswalk' x='45%' y='50%' width='10%' height='20%' />\n\n            <circle class='ss-queue car-arr' cx='10%' cy='60%' r='10' />\n            <circle class='ss-queue car-xing' cx='40%' cy='60%' r='10' />\n            <circle class='ss-queue car-xed' cx='90%' cy='60%' r='10' />\n\n            <circle class='ss-queue ped-arr' cx='10%' cy='85%' r='10' />\n            <circle class='ss-queue ped-xing' cx='50%' cy='75%' r='10' />\n            <circle class='ss-queue ped-xed' cx='50%' cy='45%' r='10' />\n            <circle class='ss-queue ped-leave' cx='90%' cy='35%' r='10' />\n        </svg>\n    ",((e,t)=>{new _(e,t,{getEntityHtml:e=>e instanceof H?"<g class='ped' fill='black' stroke='black' opacity='0.8' transform='scale(1,0.8)'>\n                        <circle cx='1%' cy='1%' r='0.5%' fill='orange' />\n                        <rect x='.4%' y='2%' width='1.3%' height='4%' fill='green' rx='0.7%' />\n                        <rect x='.66%' y='4%' width='.8%' height='3%' fill='blue' />\n                        <rect x='.4%' y='7%' width='1.3%' height='.75%' rx='0.5%' />\n                    </g>":"<g class='car' fill='black' stroke='black'>\n                        <rect x='1%' y='0' width='5%' height='4%' rx='1%' />\n                        <rect x='0' y='1.5%' width='9%' height='3%' fill='red' rx='0.5%' />\n                        <circle cx='1.5%' cy='4%' r='.9%' opacity='0.8' />\n                        <circle cx='7.5%' cy='4%' r='.9%' opacity='0.8' />\n                        <rect x='0' y='0' width='10%' height='1%' opacity='0' />\n                    </g>",queues:[{queue:e.qPedArr,element:"svg .ss-queue.ped-arr"},{queue:e.qPedXing,element:"svg .ss-queue.ped-xing",angle:-45,max:8},{queue:e.qPedXed,element:"svg .ss-queue.ped-xed"},{queue:e.qPedLeave,element:"svg .ss-queue.ped-leave"},{queue:e.qCarArr,element:"svg .ss-queue.car-arr"},{queue:e.qCarXing,element:"svg .ss-queue.car-xing",angle:0,max:16},{queue:e.qCarXed,element:"svg .ss-queue.car-xed"}]});const n=t.querySelectorAll(".light circle"),s=document.querySelector(".svg.ss-time-now span"),i=()=>{s.textContent=a(e.timeNow/3600);for(let t=0;t<n.length;t++)n[t].style.opacity=t==e.light?"1":""};e.timeNowChanged.addEventListener(i),e.stateChanged.addEventListener(i)})),we(new X({frameDelay:20}),"Animated Crosswalk Simulation (X3DOM)",`   <p>\n            This sample uses the same Crosswalk <b>Simulation</b> class\n            as shown earlier, this time using an X3DOM-based animation.\n        </p>\n        <div class='x3d ss-time-now'>\n            Time: <b><span>0.00</span></b> hours\n        </div>\n        <x3d class='ss-anim anim-host'> \n            <scene>\n\n                \x3c!-- default viewpoint --\x3e\n                <viewpoint\n                    position='0 -320 320'\n                    orientation='1 0 0 .8'\n                    centerOfRotation='0 0 -20'>\n                </viewpoint>\n\n                \x3c!-- ground --\x3e\n                <transform scale='300 150 .1' translation='0 0 -0.5'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='0.1 0.3 0.1' transparency='0.2'></material>\n                        </appearance>\n                        <box></box>\n                    </shape>\n                </transform>\n\n                \x3c!-- street --\x3e\n                <transform scale='250 50 .1'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='.95 .95 .95'></material>\n                        </appearance>\n                        <box></box>\n                    </shape>\n                </transform>\n\n                \x3c!-- crosswalk --\x3e\n                <transform scale='50 50 .1' translation='0 0 .1'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='.6 .6 .6'></material>\n                        </appearance>\n                        <box></box>\n                    </shape>\n                </transform>\n\n                \x3c!-- light --\x3e\n                <transform class='light'>\n                    <transform translation='0 120 25' rotation='1 0 0 1.57'>\n                        <shape> \x3c!-- post --\x3e\n                            <appearance> \n                                <material diffuseColor='.5 .5 .0'></material>\n                            </appearance>\n                            <cylinder height='50' radius='3'></cylinder>\n                        </shape>\n                        <transform translation='0 -21 0'>\n                            <shape> \x3c!-- bottom rim --\x3e\n                                <appearance> \n                                    <material diffuseColor='.5 .5 .0'></material>\n                                </appearance>\n                                <cylinder height='5' radius='15'></cylinder>\n                            </shape>\n                        </transform>\n                        <transform translation='0 55 0'>\n                            <shape> \x3c!-- box --\x3e\n                                <appearance> \n                                    <material diffuseColor='.5 .5 .0'></material>\n                                </appearance>\n                                <box size='22 65 20'></box>\n                            </shape>\n                        </transform>\n                        <transform translation='0 75 5'>\n                            <shape>\n                                <appearance> \n                                    <material class='light red' diffuseColor='1 0 0'></material>\n                                </appearance>\n                                <sphere radius='10'></sphere>\n                            </shape>\n                        </transform>\n                        <transform translation='0 55 5'>\n                            <shape>\n                                <appearance> \n                                    <material class='light yellow' diffuseColor='1 1 0'></material>\n                                </appearance>\n                                <sphere radius='10'></sphere>\n                            </shape>\n                        </transform>\n                        <transform translation='0 35 5'>\n                            <shape>\n                                <appearance> \n                                    <material class='light green' diffuseColor='0 1 0'></material>\n                                </appearance>\n                                <sphere radius='10'></sphere>\n                            </shape>\n                        </transform>\n                    </transform>\n                </transform>\n\n                \x3c!-- queues --\x3e\n                ${ge("car-arr",-250,0)}\n                ${ge("car-xing",-50,0)}\n                ${ge("car-xed",250,0)}\n                ${ge("ped-arr",-125,-100)}\n                ${ge("ped-xing",0,-75,5)}\n                ${ge("ped-xed",0,75,5)}\n                ${ge("ped-leave",250,100)}\n            </scene>\n        </x3d>\n    `,((e,t)=>{new _(e,t,{getEntityHtml:e=>e instanceof H?`<transform class='${"pedestrian"}'>\n        <transform>\n            <shape>\n                <appearance> \n                    <material diffuseColor='0 0 .5'></material>\n                </appearance>\n                <box size='5 5 8'></box>\n            </shape>\n            <shape render='false'> \x3c!-- padding --\x3e\n                <box size='7 10 8'></box>\n            </shape>\n        </transform>\n        <transform translation='0 0 8'>\n            <shape>\n                <appearance> \n                    <material diffuseColor='0 1 0'></material>\n                </appearance>\n                <box size='5 8 8'></box>\n            </shape>\n        </transform>\n        <transform translation='0 0 16'>\n            <shape>\n                <appearance> \n                    <material diffuseColor='.5 .5 0'></material>\n                </appearance>\n                <sphere radius='3'></sphere>\n            </shape>\n        </transform>\n    </transform>`:e.serial%2?qe("car red",30,14,8,[1,0,0]):qe("car green",25,12,8,[1,1,0]),queues:[{queue:e.qPedArr,element:"x3d .ss-queue.ped-arr"},{queue:e.qPedXing,element:"x3d .ss-queue.ped-xing",angle:-45,max:8},{queue:e.qPedXed,element:"x3d .ss-queue.ped-xed"},{queue:e.qPedLeave,element:"x3d .ss-queue.ped-leave"},{queue:e.qCarArr,element:"x3d .ss-queue.car-arr"},{queue:e.qCarXing,element:"x3d .ss-queue.car-xing",angle:0,max:16},{queue:e.qCarXed,element:"x3d .ss-queue.car-xed"}]});const n=t.querySelectorAll("material.light"),s=document.querySelector(".x3d.ss-time-now span"),i=()=>{s.textContent=a(e.timeNow/3600);for(let t=0;t<n.length;t++){const s=n[t];s.setAttribute("transparency",t==e.light?"0":"0.7"),s.closest("transform").setAttribute("scale",t==e.light?"1.1 1.1 1.1":".9 .9 .9")}};e.timeNowChanged.addEventListener(i),e.stateChanged.addEventListener(i)})),we(new O({maxTimeStep:.1}),"Animation Options (SVG)","   <p>\n            Change the animation parameters to see their effect:\n        </p>\n        <label>\n            Queue Angle\n            <input id='q-angle' type='range' min='0' max='360' step='15'>\n        </label>\n        <label>\n            Rotate Entities\n            <input id='rotate-ents' type='checkbox'>\n        </label>\n        <label>\n            Spline Tension\n            <input id='tension' type='range' min='0' max='1' step='.1'>\n        </label>\n        <label>\n            Max Time Step\n            <input id='max-step' type='range' min='0' max='1' step='.1'>\n        </label>\n        <label>\n            Frame Delay\n            <input id='frame-delay' type='range' min='0' max='250' step='10'>\n        </label>\n        <svg class='ss-anim' viewBox='0 0 1000 500'>\n\n            \x3c!-- one rotating queue --\x3e\n            <rect class='ss-queue rotate' x='98%' y='23%' width='4%' height='4%' />\n            <line x1='100%' y1='15%' x2='100%' y2='35%' stroke='black' />\n            <line x1='90%' y1='25%' x2='110%' y2='25%' stroke='black' />\n\n            \x3c!-- one queue at the center --\x3e\n            <rect class='ss-queue center' x='38%' y='48%' width='4%' height='4%' />\n\n            \x3c!-- twelve queues around it --\x3e\n            <rect class='ss-queue q1' x='58%' y='83%' width='4%' height='4%' />\n            <rect class='ss-queue q2' x='73%' y='68%' width='4%' height='4%' />\n            <rect class='ss-queue q3' x='78%' y='48%' width='4%' height='4%' />\n            <rect class='ss-queue q4' x='73%' y='28%' width='4%' height='4%' />\n            <rect class='ss-queue q5' x='58%' y='13%' width='4%' height='4%' />\n            <rect class='ss-queue q6' x='38%' y='8%' width='4%' height='4%' />\n            <rect class='ss-queue q7' x='18%' y='13%' width='4%' height='4%' />\n            <rect class='ss-queue q8' x='3%' y='28%' width='4%' height='4%' />\n            <rect class='ss-queue q9' x='-2%' y='48%' width='4%' height='4%' />\n            <rect class='ss-queue q10' x='3%' y='68%' width='4%' height='4%' />\n            <rect class='ss-queue q11' x='18%' y='83%' width='4%' height='4%' />\n            <rect class='ss-queue q12' x='38%' y='88%' width='4%' height='4%' />\n        </svg>\n    ",((e,t)=>{const n=new _(e,t,{rotateEntities:!0,getEntityHtml:e=>e instanceof G?e.fast?"<polygon points='0 0, 40 0, 50 10, 40 20, 0 20' stroke='black' fill='yellow' opacity='0.5' />":"<polygon points='0 0, 20 0, 30 20, 20 40, 0 40' stroke='black' fill='red' opacity='0.5'/>":e.serial%2?"<polygon points='0 0, 40 0, 50 10, 40 20, 0 20' stroke='black' fill='blue' />":"<polygon points='0 0, 20 0, 30 20, 20 40, 0 40' stroke='black' fill='green' />",queues:[{queue:e.qRotate,element:"svg .ss-queue.rotate",angle:e.qAngle},{queue:e.qCenter,element:"svg .ss-queue.center"},{queue:e.q1,element:"svg .ss-queue.q1"},{queue:e.q2,element:"svg .ss-queue.q2"},{queue:e.q3,element:"svg .ss-queue.q3"},{queue:e.q4,element:"svg .ss-queue.q4"},{queue:e.q5,element:"svg .ss-queue.q5"},{queue:e.q6,element:"svg .ss-queue.q6"},{queue:e.q7,element:"svg .ss-queue.q7"},{queue:e.q8,element:"svg .ss-queue.q8"},{queue:e.q9,element:"svg .ss-queue.q9"},{queue:e.q10,element:"svg .ss-queue.q10"},{queue:e.q11,element:"svg .ss-queue.q11"},{queue:e.q12,element:"svg .ss-queue.q12"}]});o("q-angle",e.qAngle,(t=>{e.qAngle=t;let s=n.queues;s[0].angle=t,n.queues=s})),o("rotate-ents",n.rotateEntities,(e=>n.rotateEntities=e)),o("tension",e.splineTension,(t=>e.splineTension=t)),o("max-step",e.maxTimeStep,(t=>e.maxTimeStep=t)),o("frame-delay",e.frameDelay,(t=>e.frameDelay=t))})),we(new O({maxTimeStep:.1}),"Animation Options (A-Frame)","\n        <p>\n            This sample uses the same Crosswalk Simulation class as shown earlier,\n            this time using an <a href=\"https://aframe.io\">A-Frame-based</a> animation.\n        </p>\n        <p>\n            Change the animation parameters to see their effect:\n        </p>\n        <label>\n            Queue Angle\n            <input id='af-q-angle' type='range' min='0' max='360' step='15'>\n        </label>\n        <label>\n            Rotate Entities\n            <input id='af-rotate-ents' type='checkbox'>\n        </label>\n        <label>\n            Spline Tension\n            <input id='af-tension' type='range' min='0' max='1' step='.1'>\n        </label>\n        <label>\n            Max Time Step\n            <input id='af-max-step' type='range' min='0' max='1' step='.1'>\n        </label>\n        <label>\n            Frame Delay\n            <input id='af-frame-delay' type='range' min='0' max='250' step='10'>\n        </label>\n        <div class=\"anim-host\">\n            <a-scene embedded class='ss-anim'>\n\n                \x3c!-- mix-ins --\x3e\n                <a-assets>\n                    <a-mixin id='queue' geometry='radius:4' material='color:orange;opacity:0.3'></a-mixin>\n                    <a-mixin id='transparent' opacity='0.6' transparent='true'></a-mixin>\n                </a-assets>\n                \n                \x3c!-- camera --\x3e\n                <a-entity id='rig' position='0 -150 150' rotation='40 0 0'>\n                    <a-camera id='camera' far='50000' fov='80'></a-camera>\n                </a-entity>            \n\n                \x3c!-- camera\n                <a-entity id='rig' position='0 -200 50' rotation='70 0 0'>\n                    <a-camera id='camera' far='50000' fov='60' look-controls></a-camera>\n                </a-entity>            \n                --\x3e\n                \n                \x3c!-- add a light --\x3e\n                <a-entity light='type:directional; castShadow:true;' position='5 5 15'></a-entity>\n\n                \x3c!-- background --\x3e\n                <a-box position='0 0 -1' width='800' height='800' depth='1' color='#009FFF'></a-box>\n                <a-sky color='lightblue'></a-sky>\n\n                \x3c!-- one rotating queue --\x3e\n                <a-sphere class='ss-queue rotate' mixin='queue' position='100 100 20'></a-sphere>\n                \n                \x3c!-- one queue at the center --\x3e\n                <a-sphere class='ss-queue center' mixin='queue' position='0 0 20'></a-sphere>\n    \n                \x3c!-- twelve queues around it --\x3e\n                <a-sphere class='ss-queue q1' mixin='queue' position='50 87 0'></a-sphere>\n                <a-sphere class='ss-queue q2' mixin='queue' position='87 50  0'></a-sphere>\n                <a-sphere class='ss-queue q3' mixin='queue' position='100 0 0'></a-sphere>\n                <a-sphere class='ss-queue q4' mixin='queue' position='87 -50 0'></a-sphere>\n                <a-sphere class='ss-queue q5' mixin='queue' position='50 -87 0'></a-sphere>\n                <a-sphere class='ss-queue q6' mixin='queue' position='0 -100 0'></a-sphere>\n                <a-sphere class='ss-queue q7' mixin='queue' position='-50 -87 0'></a-sphere>\n                <a-sphere class='ss-queue q8' mixin='queue' position='-87 -50 0'></a-sphere>\n                <a-sphere class='ss-queue q9' mixin='queue' position='-100 0 0'></a-sphere>\n                <a-sphere class='ss-queue q10' mixin='queue' position='-87 50 0'></a-sphere>\n                <a-sphere class='ss-queue q11' mixin='queue' position='-50 87 0'></a-sphere>\n                <a-sphere class='ss-queue q12' mixin='queue' position='0 100 0'></a-sphere>\n            </a-scene>\n        </div>\n    ",((e,t)=>{const n=new _(e,t,{rotateEntities:!0,getEntityHtml:e=>e instanceof G?e.fast?"<a-box width='16' height='8' depth='8' color='yellow' mixin='transparent'></a-box>":"<a-box width='8' height='16' depth='10' color='red' mixin='transparent'></a-box>":e.serial%2?"<a-box width='16' height='8' depth='8' color='green' mixin='transparent'></a-box>":"<a-box width='8' height='16' depth='10' color='blue' mixin='transparent'></a-box>",queues:[{queue:e.qRotate,element:"a-scene .ss-queue.rotate",angle:e.qAngle},{queue:e.qCenter,element:"a-scene .ss-queue.center"},{queue:e.q1,element:"a-scene .ss-queue.q1"},{queue:e.q2,element:"a-scene .ss-queue.q2"},{queue:e.q3,element:"a-scene .ss-queue.q3"},{queue:e.q4,element:"a-scene .ss-queue.q4"},{queue:e.q5,element:"a-scene .ss-queue.q5"},{queue:e.q6,element:"a-scene .ss-queue.q6"},{queue:e.q7,element:"a-scene .ss-queue.q7"},{queue:e.q8,element:"a-scene .ss-queue.q8"},{queue:e.q9,element:"a-scene .ss-queue.q9"},{queue:e.q10,element:"a-scene .ss-queue.q10"},{queue:e.q11,element:"a-scene .ss-queue.q11"},{queue:e.q12,element:"a-scene .ss-queue.q12"}]});o("af-q-angle",e.qAngle,(t=>{e.qAngle=t;let s=n.queues;s[0].angle=t,n.queues=s})," degrees"),o("af-rotate-ents",n.rotateEntities,(e=>n.rotateEntities=e)),o("af-tension",e.splineTension,(t=>e.splineTension=t)),o("af-max-step",e.maxTimeStep,(t=>e.maxTimeStep=t)," sim time units"),o("af-frame-delay",e.frameDelay,(t=>e.frameDelay=t)," ms")})),we(new O({maxTimeStep:.1}),"Animation Options (X3DOM)",`\n        <p>\n            This sample uses the same Crosswalk Simulation class as shown earlier,\n            this time using an <a href="https://www.x3dom.org/">X3DOM-based</a> animation.\n        </p>\n        <p>\n            Press 'A' to view <b>all</b> elements or 'R' to <b>reset</b> the viewpoint.\n        </p>\n        <p>\n            Change the animation parameters to see their effect:\n        </p>\n        <label>\n            Queue Angle\n            <input id='x3-q-angle' type='range' min='0' max='360' step='15'>\n        </label>\n        <label>\n            Rotate Entities\n            <input id='x3-rotate-ents' type='checkbox'>\n        </label>\n        <label>\n            Spline Tension\n            <input id='x3-tension' type='range' min='0' max='1' step='.1'>\n        </label>\n        <label>\n            Max Time Step\n            <input id='x3-max-step' type='range' min='0' max='1' step='.1'>\n        </label>\n        <label>\n            Frame Delay\n            <input id='x3-frame-delay' type='range' min='0' max='250' step='10'>\n        </label>\n\n        <x3d class='ss-anim anim-host'> \n            <scene>\n\n                \x3c!-- default viewpoint --\x3e\n                <viewpoint\n                    position='0 -200 180'\n                    orientation='1 0 0 .75'\n                    centerOfRotation='0 0 -20'>\n                </viewpoint>\n\n                \x3c!-- background --\x3e\n                <transform scale='150 150 0.1'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='0 .9 1'></material>\n                        </appearance>\n                        <box></box>\n                    </shape>\n                </transform>\n\n                \x3c!-- one rotating queue --\x3e\n                ${ge("rotate",100,100,20)}\n                \n                \x3c!-- one queue at the center --\x3e\n                ${ge("center",0,0,20)}\n    \n                \x3c!-- twelve queues around it --\x3e\n                ${ge("q1",50,87)}\n                ${ge("q2",87,50)}\n                ${ge("q3",100,0)}\n                ${ge("q4",87,-50)}\n                ${ge("q5",50,-87)}\n\n                ${ge("q6",0,-100)}\n                ${ge("q7",-50,-87)}\n                ${ge("q8",-87,-50)}\n                ${ge("q9",-100,0)}\n                ${ge("q10",-87,50)}\n                ${ge("q11",-50,87)}\n                ${ge("q12",0,100)}\n            </scene>\n        </x3d>\n    `,((e,t)=>{const n=new _(e,t,{rotateEntities:!0,getEntityHtml:e=>e instanceof G?e.fast?qe("yellow",30,10,4,[1,1,0]):qe("red",20,8,4,[1,0,0]):e.serial%2?qe("green",30,10,4,[0,1,0]):qe("blue",20,8,4,[0,0,1]),queues:[{queue:e.qRotate,element:"x3d .ss-queue.rotate",angle:e.qAngle},{queue:e.qCenter,element:"x3d .ss-queue.center"},{queue:e.q1,element:"x3d .ss-queue.q1"},{queue:e.q2,element:"x3d .ss-queue.q2"},{queue:e.q3,element:"x3d .ss-queue.q3"},{queue:e.q4,element:"x3d .ss-queue.q4"},{queue:e.q5,element:"x3d .ss-queue.q5"},{queue:e.q6,element:"x3d .ss-queue.q6"},{queue:e.q7,element:"x3d .ss-queue.q7"},{queue:e.q8,element:"x3d .ss-queue.q8"},{queue:e.q9,element:"x3d .ss-queue.q9"},{queue:e.q10,element:"x3d .ss-queue.q10"},{queue:e.q11,element:"x3d .ss-queue.q11"},{queue:e.q12,element:"x3d .ss-queue.q12"}]});o("x3-q-angle",e.qAngle,(t=>{e.qAngle=t;let s=n.queues;s[0].angle=t,n.queues=s})," degrees"),o("x3-rotate-ents",n.rotateEntities,(e=>n.rotateEntities=e)),o("x3-tension",e.splineTension,(t=>e.splineTension=t)),o("x3-max-step",e.maxTimeStep,(t=>e.maxTimeStep=t)," sim time units"),o("x3-frame-delay",e.frameDelay,(t=>e.frameDelay=t)," ms")})),we(new te({maxTimeStep:.25}),"Network Intro (SVG)","   <p>\n            This sample uses a network to simulate an area with random service\n            requests and a fixed number of service vehicles.\n        </p>\n        <ul>\n            <li>\n                Red circles show service requests that happen at random locations\n                on the network.\n            </li>        \n            <li>\n                Green circles show service vehicles that looking for or traveling\n                to requests.\n            </li>        \n            <li>\n                Yellow circles show service vehicles servicing a request.\n            </li>\n        </ul>\n        <label>\n            Slow Mode\n            <input id='network-svg-slow' type='checkbox'>\n        </label>\n        <label>\n            Number of Service Vehicles: <b><span id='network-svg-nsvc'>0</span></b>\n        </label>\n        <label>\n            Server Utilization: <b><span id='network-svg-utz'>0</span>%</b>\n        </label>\n        <label>\n            Average Response Time: <b><span id='network-svg-wait'>0</span></b> seconds\n        </label>\n        <label>\n            Requests Served:\n            <b><span id='network-svg-served'>0</span></b>\n            /\n            <span id='network-svg-nreq'>0</span>\n        </label>\n        <label>\n            Requests Missed: <b><span id='network-svg-missed'>0</span></b>\n        </label>\n        <p></p>\n        <svg class='ss-anim anim-host'\n            viewbox='0 0 800 400'\n            fill='orange'\n            stroke='black'\n            stroke-width='1'\n            font-size='10'\n            text-anchor='middle'\n            dominant-baseline='middle'>\n        </svg>\n    ",((e,t)=>{!function(e,t,n=!0,s=!0,i=!1){const a="http://www.w3.org/2000/svg",r=(e,t)=>{for(let n in t)e.setAttribute(n,t[n].toString())};s&&e.links.forEach(((e,n)=>{if(n%2==0){const n=document.createElementNS(a,"line"),s=e.from.position,o=e.to.position;if(r(n,{class:"ss-link "+(e.id?"id"+e.id:""),x1:s.x,y1:s.y,x2:o.x,y2:o.y}),t.appendChild(n),i){const n=document.createElementNS(a,"circle"),i=(s.x+o.x)/2,l=(s.y+o.y)/2;r(n,{cx:i,cy:l,r:1,"stroke-width":0,fill:"white"}),t.appendChild(n);const h=document.createElementNS(a,"text");r(h,{x:i,y:l}),h.innerHTML=this.getLinkDistance(e).toFixed(0),t.appendChild(h)}}})),n&&e.nodes.forEach((e=>{const n=document.createElementNS(a,"circle"),s=e.position;r(n,{class:"ss-node "+(e.id?"id"+e.id:""),cx:s.x,cy:s.y,r:"2%"}),t.appendChild(n);const i=document.createElementNS(a,"text");r(i,{x:s.x,y:s.y,fill:"black",strokeWidth:0}),i.innerHTML=e.id,t.appendChild(i)}))}(e.network,t,!0,!0);const n=[];e.network.nodes.forEach((e=>{n.push({queue:e.queue,element:"svg .ss-node.id"+e.id,stackEntities:!0})})),new _(e,t,{animateToQueueEnd:!1,rotateEntities:!0,queues:n,getEntityHtml:e=>e instanceof se?`<g opacity='0.5'>\n                        <circle r='20' stroke='black' fill=${e.busy?"yellow":"green"} />\n                        <polygon\n                            stroke='none'\n                            fill=${e.busy?"none":"black"}\n                            points='20 0, -13 -18, -13 18' />\n                    </g>`:"<g opacity='0.5'>\n                        <circle r='30' fill='red'/>\n                    </g>"}),o("network-svg-slow",e.maxTimeStep>0,(t=>e.maxTimeStep=t?.25:0));document.getElementById("network-svg-nsvc").textContent=a(e.serviceVehicles,0);document.getElementById("network-svg-nreq").textContent=a(e.requests,0);const s=document.getElementById("network-svg-utz"),i=document.getElementById("network-svg-wait"),r=document.getElementById("network-svg-served"),l=document.getElementById("network-svg-missed"),h=()=>{s.textContent=a(100*e.qBusy.utilization,0),i.textContent=a(e.qWait.averageDwell,0),r.textContent=a(e.requestsServed,0),l.textContent=a(e.requestsMissed,0)};e.requestFinished.addEventListener(h),e.stateChanged.addEventListener(h)})),we(new te({maxTimeStep:.1}),"Network Intro (X3DOM)","   <p>\n            This sample uses a network to simulate an area with random service\n            requests and a fixed number of service vehicles.\n        </p>\n        <ul>\n            <li>\n                Red spheres show service requests that happen at random locations\n                on the network.\n            </li>        \n            <li>\n                Green service vehicles are looking for or traveling to requests.\n            </li>        \n            <li>\n                Yellow service vehicles are servicing a request.\n            </li>\n        </ul>\n        <label>\n            Slow Mode\n            <input id='network-x3d-slow' type='checkbox'>\n        </label>\n        <label>\n            Number of Service Vehicles: <b><span id='network-x3d-nsvc'>0</span></b>\n        </label>\n        <label>\n            Server Utilization: <b><span id='network-x3d-utz'>0</span>%</b>\n        </label>\n        <label>\n            Average Response Time: <b><span id='network-x3d-wait'>0</span></b> seconds\n        </label>\n        <label>\n            Requests Served:\n            <b><span id='network-x3d-served'>0</span></b>\n            /\n            <span id='network-x3d-nreq'>0</span>\n        </label>\n        <label>\n            Requests Missed: <b><span id='network-x3d-missed'>0</span></b>\n        </label>\n        <p></p>\n        <x3d class='ss-anim anim-host network'> \n            <scene>\n\n                \x3c!-- default viewpoint --\x3e\n                <viewpoint\n                    position='400 -80 700'\n                    orientation='1 0 0 0.36771'\n                    centerOfRotation='450 250 0'>\n                </viewpoint>\n\n                \x3c!-- background --\x3e\n                <transform translation='400 200 0'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='0 .5 .5'></material>\n                        </appearance>\n                        <box size='1200 800 .1'></box>\n                    </shape>\n                </transform>\n            </transform>                \n            </scene>\n        </x3d>\n    ",((e,t)=>{ie(e.network,t);const n=[];e.network.nodes.forEach((e=>{n.push({queue:e.queue,element:"x3d.network .ss-queue.q"+e.id,stackEntities:!0})})),new _(e,t,{queues:n,rotateEntities:!0,getEntityHtml:e=>e instanceof se?qe("service",40,15,10,[e.busy?1:0,.5,0]):"<shape>\n                        <appearance>\n                            <material transparency='0.5' diffuseColor='1 0 0'/>\n                        </appearance>\n                        <sphere radius='40'></sphere>\n                    </shape>"}),o("network-x3d-slow",e.maxTimeStep>0,(t=>e.maxTimeStep=t?1:0));document.getElementById("network-x3d-nsvc").textContent=a(e.serviceVehicles,0);document.getElementById("network-x3d-nreq").textContent=a(e.requests,0);const s=document.getElementById("network-x3d-utz"),i=document.getElementById("network-x3d-wait"),r=document.getElementById("network-x3d-served"),l=document.getElementById("network-x3d-missed"),h=()=>{s.textContent=a(100*e.qBusy.utilization,0),i.textContent=a(e.qWait.averageDwell,0),r.textContent=a(e.requestsServed,0),l.textContent=a(e.requestsMissed,0)};e.requestFinished.addEventListener(h),e.stateChanged.addEventListener(h)})),we(new class extends w{constructor(){super(...arguments),this.timeIncrement=2,this.totalCars=1e3,this.stripLength=1e3,this.carSpeeds=new $(40/3.6,100/3.6),this.interArrival=new T(20),this.qStrip=new f("strip"),this.carFinished=new s}onStarting(e){super.onStarting(e),this.maxTimeStep=this.timeIncrement,this.generateEntities(ae,this.interArrival,this.totalCars)}onCarFinished(e){this.carFinished.raise(this,e)}}({maxTimeStep:1e-4,frameDelay:50}),"Car Following","<p>\n        Simple car-following demo.\n    </p>\n    <p>\n        Cars are randomly generated and follow the car ahead, adjusting\n        their speed as needed to keep a safe headway (so they could\n        stop before hitting the car ahead).\n    </p>\n    <p>\n        The animation is not to scale, so the cars may appear to move\n        together too closely (the road strip is 1km long).\n    </p>\n    <p>\n        The simulation uses a simplified version of\n        <a href='https://en.wikipedia.org/wiki/Gipps%27_model'>Gipp's model</a>\n        to update the vehicle speeds at fixed time intervals.\n    </p>\n    <p>\n        This sample shows how to use the <b>getAnimationPosition</b>\n        method in the <b>Entity</b> class to customize queue\n        animations.\n    </p>\n    <label>\n        Vehicle Count:\n        <b><span id='carfollow-cnt'>0</span></b> / <span id='carfollow-tot'>0</span>\n    </label>\n    <label>\n        Max Speed:\n        <b><span id='carfollow-speed-max'>0</span></b> km/h\n    </label>\n    <label>\n        Min Speed:\n        <b><span id='carfollow-speed-min'>0</span></b> km/h\n    </label>\n    <label>\n        Average Speed:\n        <b><span id='carfollow-speed'>0</span></b> km/h\n    </label>\n    <svg class='anim-host ss-anim car-follow' viewBox='0 0 1000 500'>\n        <line class='strip'\n            x1='0%' y1='90%'\n            x2='100%' y2='10%'\n            stroke='lightgrey'\n            stroke-width='5%' />\n        <circle class='strip-start' cx='0%' cy='90%' r='1%' fill='orange' opacity='0.5' />\n        <circle class='strip-end' cx='100%' cy='10%' r='1%' fill='orange' opacity='0.5' />\n    </svg>",((e,t)=>{const n=["red","green","blue","white"];new _(e,t,{rotateEntities:!0,queues:[{queue:e.qStrip,element:".strip-start",endElement:".strip-end"}],getEntityHtml:e=>`<g>\n                    <polygon\n                        stroke-width='1'\n                        stroke='black'\n                        fill='${n[e.serial%n.length]}'\n                        points='0 0, 40 0, 42 3, 42 17, 40 20, 0 20' />\n                    <polygon\n                        fill='black'\n                        points='20 2, 30 2, 30 18, 20 18' />\n                </g>`});document.getElementById("carfollow-tot").textContent=a(e.totalCars,0);document.getElementById("carfollow-speed-max").textContent=a(3.6*e.carSpeeds.max,0);document.getElementById("carfollow-speed-min").textContent=a(3.6*e.carSpeeds.min,0);const s=document.getElementById("carfollow-cnt"),i=document.getElementById("carfollow-speed"),r=()=>{const t=e.qStrip.averageDwell,n=e.stripLength;s.textContent=a(e.qStrip.totalCount,0),i.textContent=a(t?n/t*3.6:0,0)};e.carFinished.addEventListener(r),e.stateChanged.addEventListener(r)})),we(new class extends w{constructor(){super(...arguments),this.timeIncrement=1,this.totalCars=1e3,this.carSpeeds=new $(40/3.6,100/3.6),this.interArrival=new T(15),this.network=function(e,t,n){const s=[];for(let a=0;a<e;a++)for(let e=0;e<t;e++)s.push({id:s.length.toString(),position:{x:e*n,y:a*n},queue:new f});const i=[];for(let a=0;a<s.length;a++){const n=Math.floor(a/t),r=a%t;r<t-1&&(i.push({from:s[a],to:s[a+1],queue:new f}),i.push({from:s[a+1],to:s[a],queue:new f})),n<e-1&&a%2!=0&&(i.push({from:s[a],to:s[a+t],queue:new f}),i.push({from:s[a+t],to:s[a],queue:new f})),0==n&&0==r&&(i.push({from:s[a+1],to:s[a+t],queue:new f}),i.push({from:s[a+t],to:s[a+1],queue:new f})),0==n&&r==t-1&&(i.push({from:s[a-1],to:s[a+t],queue:new f}),i.push({from:s[a+t],to:s[a-1],queue:new f})),n==e-1&&0==r&&(i.push({from:s[a+1],to:s[a-t],queue:new f}),i.push({from:s[a-t],to:s[a+1],queue:new f})),n==e-1&&r==t-1&&(i.push({from:s[a-1],to:s[a-t],queue:new f}),i.push({from:s[a-t],to:s[a-1],queue:new f}))}return new oe({nodes:s,links:i})}(5,9,100),this.rndNode=new L(this.network.nodes.length-1),this.stats={totalDistance:0,totalTime:0,carsDone:0},this.carFinished=new s}onStarting(e){this.stats.totalDistance=0,this.stats.totalTime=0,this.stats.carsDone=0,super.onStarting(e),this.generateEntities(re,this.interArrival,this.totalCars)}onCarFinished(e){this.carFinished.raise(this,e)}}({maxTimeStep:.001}),"Network Car Following (X3DOM)","<p>\n        Network-based car-following demo.\n    </p>\n    <p>\n        Cars are randomly generated travel from the first to the\n        last network nodes using a simple car-following model.\n    </p>\n    <p>\n        The animation is not to scale, so the cars may appear to move\n        together too closely (the network nodes are 100m apart).\n        But they may not overtake each other.\n    </p>\n    <p>\n        The simulation uses a simplified version of\n        <a href='https://en.wikipedia.org/wiki/Gipps%27_model'>Gipp's model</a>\n        to update the vehicle speeds at fixed time intervals.\n        It also accounts for congestion when calculating shortest paths.\n    </p>\n    <p>\n        This sample shows how to use the <b>getAnimationPosition</b>\n        method in the <b>Entity</b> class to customize queue\n        animations.\n    </p>\n    <label>\n        Slow Mode\n        <input id='carfollowing-slow' type='checkbox'>\n    </label>\n    <label>\n        Vehicle Count:\n        <b><span id='carfollowing-cnt'>0</span></b> / <span id='carfollowing-tot'>0</span>\n    </label>\n    <label>\n        Max Speed:\n        <b><span id='carfollowing-speed-max'>0</span></b> km/h\n    </label>\n    <label>\n        Min Speed:\n        <b><span id='carfollowing-speed-min'>0</span></b> km/h\n    </label>\n    <label>\n        Average Speed:\n        <b><span id='carfollowing-speed'>0</span></b> km/h\n    </label>\n        <p></p>\n        <x3d class='ss-anim anim-host car-following'> \n            <scene>\n\n                \x3c!-- default viewpoint --\x3e\n                <viewpoint\n                    position='400 -50 600'\n                    orientation='1 0 0 0.34'\n                    centerOfRotation='450 250 0'>\n                </viewpoint>\n\n                \x3c!-- background --\x3e\n                <transform translation='400 200 0'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='0 .5 .5'></material>\n                        </appearance>\n                        <box size='1200 800 .1'></box>\n                    </shape>\n                </transform>\n            </transform>                \n            </scene>\n        </x3d>\n    ",((e,t)=>{ie(e.network,t);const n=[];e.network.nodes.forEach((e=>{n.push({queue:e.queue,element:"x3d.car-following .ss-queue.q"+e.id})})),e.network.links.forEach((e=>{n.push({queue:e.queue,element:"x3d.car-following .ss-queue.q"+e.from.id,endElement:"x3d.car-following .ss-queue.q"+e.to.id})}));const s=[[1,0,0],[0,1,0],[0,0,1],[1,1,1]];new _(e,t,{queues:n,rotateEntities:!0,getEntityHtml:e=>qe("car",25,10,6,s[e.serial%s.length])}),o("carfollowing-slow",e.maxTimeStep>0,(t=>e.maxTimeStep=t?.001:0));document.getElementById("carfollowing-tot").textContent=a(e.totalCars,0);document.getElementById("carfollowing-speed-max").textContent=a(3.6*e.carSpeeds.max,0);document.getElementById("carfollowing-speed-min").textContent=a(3.6*e.carSpeeds.min,0);const i=document.getElementById("carfollowing-cnt"),r=document.getElementById("carfollowing-speed"),l=()=>{const t=e.stats.totalTime,n=e.stats.totalDistance;i.textContent=a(e.stats.carsDone,0),r.textContent=a(t?n/t*3.6:0,0)};e.carFinished.addEventListener(l),e.stateChanged.addEventListener(l)}));function we(e,t,n,s){const i="&#9654; Run";let a=ye(`\n        <div class='sim'>\n            <h2>\n                <button class='collapse'>+</button> ${t}\n            </h2>\n            <div class='body' style='display:none'>\n                <div class='intro'>\n                    ${n}\n                </div>\n                <button class='run'></button>\n                <div class='log'></div>\n            </div>\n        </div>`,document.body),r=a.querySelector("button.run"),o=a.querySelector("button.collapse"),l=a.querySelector(".body"),h=a.querySelector(".ss-anim"),u=a.querySelector("div.log");h&&s&&s(e,h),s||(s=()=>{u.innerHTML="",ye(e.getStatsTable(),u)}),o.addEventListener("click",(e=>{if(l.offsetHeight)o.innerHTML="+",l.style.display="none";else{o.innerHTML="-",l.style.display="";l.querySelector("a-scene")&&window.dispatchEvent(new Event("resize"))}})),r.innerHTML=i,r.addEventListener("click",(t=>{c=0,e.state==g.Running?e.stop():(e.start(!!t.ctrlKey||null),u.style.display="")})),e.stateChanged.addEventListener((()=>{r.innerHTML=e.state==g.Running?"&#9632; Stop":i,d()}));let c=0;e.timeNowChanged.addEventListener((()=>{let e=Date.now();e-c>500&&(c=e,d())}));const d=()=>{u&&s&&!h&&s(e,u)}}function ye(e,t){let n=document.createElement("div");return n.innerHTML=e,1==n.children.length&&(n=n.children[0]),t&&t.appendChild(n),n}we(new class extends w{constructor(){super(...arguments),this.timeIncrement=1,this.asteroidCount=8,this.asteroidInterval=new $(0,20),this.asteroidSpeed=new $(7.5,15),this.q=new f,this.sound=!0,this.won=!1,this.keydown=this._keydown.bind(this),this.touchstart=this._touchstart.bind(this),this.touchend=this._touchend.bind(this),this.missilesFiredChanged=new s,this.asteroidsDestroyedChanged=new s}onMissilesFiredChanged(e){this.missilesFiredChanged.raise(this,e)}onAsteroidsDestroyedChanged(e){this.asteroidsDestroyedChanged.raise(this,e)}onStarting(){super.onStarting(),Object.keys(he).forEach((e=>{const t=he[e];if(!le[t]){const e=`https://bernardo-castilho.github.io/simscript/dist/resources/${t}`;le[t]=new Audio(e)}})),this.ship=new de,this.activate(this.ship),this.missilesFired=0,this.onMissilesFiredChanged(),this.asteroidsDestroyed=0,this.onAsteroidsDestroyedChanged(),this.generateEntities(pe,this.asteroidInterval,this.asteroidCount),document.addEventListener("keydown",this.keydown),document.addEventListener("touchstart",this.touchstart,{passive:!1}),document.addEventListener("touchend",this.touchend)}onFinishing(){document.removeEventListener("keydown",this.keydown),document.removeEventListener("touchstart",this.touchstart),document.removeEventListener("touchend",this.touchend)}gameOver(e){this.won=e,this.q.entities.forEach((e=>e.done=!0)),setTimeout((()=>{this.play(e?he.won:he.lost)}),800)}play(e){if(this.sound){const t=le[e];t.currentTime=0,t.play()}}_keydown(e){this.ship.keydown(e)}_touchstart(e){const t=e.target.closest("svg.asteroids");this._touch=t?e.touches[0]:null,this._touch&&e.preventDefault()}_touchend(e){if(e.target.closest("svg.asteroids")&&this._touch){const t=this._touch,n=e.changedTouches[0],s=30,i=n.clientX-t.clientX>s?"ArrowRight":t.clientX-n.clientX>s?"ArrowLeft":t.clientY-n.clientY>s?"ArrowUp":" ";this.ship.keydown(new KeyboardEvent("keydown",{key:i,shiftKey:!0}))}this._touch=null}}({frameDelay:50}),"Asteroids (SVG)","<p>\n        SimScript is not a game engine, but it can be used to create\n        simple games such as the classic Asteroids.\n    </p>\n    <p>\n        This sample shows how simulations can handle keyboard and\n        touch events, and perform collision tests.\n    </p>\n    <p>\n        To play, press the run button and use these keys:\n    </p>\n    <ul>\n        <li>\n            <code>LEFT/RIGHT</code> arrows to turn the ship\n            (or swipe left/right on touch devices).\n        </li>\n        <li>\n            <code>UP</code> arrow to accelerate\n            (or swipe up on touch devices).\n        </li>\n        <li>\n            <code>SPACE</code> bar to fire a missile\n            (or tap on touch devices).\n        </li>\n        <li>\n            <code>S</code> to toggle sound effects.\n        </li>\n    </ul>\n    <label>\n        Professional Mode:\n        <input id='pro-mode' type='checkbox'>\n    </label>\n    <label>\n        Missiles Fired:\n        <b><span id='missiles-fired'>0</span></b>\n    </label>\n    <label>\n        Asteroids Destroyed:\n            <b><span id='asteroids-destroyed'>0</span></b>\n            /\n            <span id='asteroids-cnt'>0</span>\n    </label>\n    <svg class='ss-anim anim-host asteroids' viewBox='0 0 1000 500'>\n        <radialGradient id='jetGradient' fx='1'>\n            <stop offset='0%' stop-color='yellow'/>\n            <stop offset='100%' stop-color='transparent'/>\n        </radialGradient>    \n        <circle class='ss-queue center' cx='50%' cy='50%' r='0'/>\n        <text class='game-over' x='50%' y='50%' fill='white' text-anchor='middle' font-size='36pt'>\n        </text>\n    </svg>",((e,t)=>{new _(e,t,{rotateEntities:!0,getEntityHtml:e=>{if(e instanceof de)return`<g>\n                        <polygon\n                            fill='none'\n                            stroke='white'\n                            stroke-width='2'\n                            points='0 0, -20 30, 40 0, -20 -30' />\n                        <circle\n                            r='25'\n                            cx='-30'\n                            fill='url(#jetGradient)'\n                            opacity=${e.engineOn?"1":"0"} />\n                    </g>`;if(e instanceof me)return"<g>\n                        <line\n                            x1='-10' y1='0' x2='10' y2='0'\n                            stroke='red'\n                            stroke-width='6' />\n                    </g>";if(e instanceof pe){return`<g ${e.small?"transform='scale(0.5, 0.5)'":""}'>\n                        <polygon\n                            fill='none'\n                            stroke='white'\n                            stroke-width='2'\n                            points='0 49, 17 29, 41 24, 46 0, 29 -17, 21 -36, 0 -50, -20 -35, -26 -15, -53 0, -29 17, -27 46' />\n                    </g>`}throw"unknown entity type"},queues:[{queue:e.q,element:"svg.asteroids .ss-queue.center"}]}),o("pro-mode",!1,(t=>e.maxTimeStep=t?10:50));const n=document.getElementById("missiles-fired"),s=document.getElementById("asteroids-destroyed");document.getElementById("asteroids-cnt").textContent=a(e.asteroidCount,0);const i=t.querySelector(".game-over"),r=()=>{n.textContent=a(e.missilesFired,0),s.textContent=a(e.asteroidsDestroyed,0)};e.asteroidsDestroyedChanged.addEventListener(r),e.missilesFiredChanged.addEventListener(r),e.stateChanged.addEventListener((()=>{r(),i.innerHTML=e.state==g.Finished?"Game Over! You "+(e.won?"Won!!!":"Lost..."):""}))}));
