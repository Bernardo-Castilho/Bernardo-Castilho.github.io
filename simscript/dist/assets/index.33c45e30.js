!function(e=".",t="__import__"){try{self[t]=new Function("u","return import(u)")}catch(s){const n=new URL(e,location),i=e=>{URL.revokeObjectURL(e.src),e.remove()};self[t]=e=>new Promise(((s,a)=>{const r=new URL(e,n);if(self[t].moduleMap[r])return s(self[t].moduleMap[r]);const o=new Blob([`import * as m from '${r}';`,`${t}.moduleMap['${r}']=m;`],{type:"text/javascript"}),l=Object.assign(document.createElement("script"),{type:"module",src:URL.createObjectURL(o),onerror(){a(new Error(`Failed to import: ${e}`)),i(l)},onload(){s(self[t].moduleMap[r]),i(l)}});document.head.appendChild(l)})),self[t].moduleMap={}}}("/assets/");class e{constructor(e,t){this.listener=e,this.self=t}}const t=class{};let s=t;s.empty=new t;class n{constructor(){this._listeners=[]}addEventListener(t,s){this._listeners.push(new e(t,s))}removeEventListener(e,t){const s=this._listeners;for(let n=0;n<s.length;n++){const i=s[n];if((i.listener==e||null==e)&&(i.self==t||null==t)&&(s.splice(n,1),t))break}}raise(e,t){this._listeners.forEach((s=>{s.listener.call(s.self,e,t)}))}}function i(e,t){if(!e)throw"function"==typeof t&&(t=t()),console.error(t),t}function a(e,t=2){return function(e){let t=r[e];t||(t=r[e]=new Intl.NumberFormat(navigator.language,{useGrouping:!0,minimumFractionDigits:e,maximumFractionDigits:e}));return t}(t).format(e)}const r={};function o(e,t,s,n="",i){const r=document.getElementById(e),o="checkbox"==r.type,l="range"==r.type||"number"==r.type,h=r instanceof HTMLSelectElement,u=e=>` ${a(e,null!=i?i:e==Math.round(e)?0:2)}${n}`;o?r.checked=t:h?r.selectedIndex=t:l?r.valueAsNumber=t:r.value=t;const c="range"==r.type?r.insertAdjacentElement("afterend",document.createElement("span")):null;c&&(c.textContent=u(r.valueAsNumber)),r.addEventListener("input",(e=>{c&&(c.textContent=u(r.valueAsNumber));const t=o?r.checked:h?r.selectedIndex:l?r.valueAsNumber:r.value;s(t)}))}function l(e,t){if(t)for(let s in t)i(s in e,`Property ${s} is not defined`),e[s]instanceof n?e[s].addEventListener(t[s]):e[s]=t[s]}function h(e){let t="string"==typeof e?document.querySelector(e):e;return i(t instanceof Element,"Element not found:"+e),t}function u(e,t,s){return null!=t&&e<t?t:null!=s&&e>s?s:e}class c{constructor(e=0,t=0,s=0){this.x=e,this.y=t,this.z=s}static clone(e){return{x:e.x,y:e.y,z:e.z}}static copy(e,t){return e.x=t.x,e.y=t.y,e.z=t.z,e}static distance(e,t){const s=e.x-t.x,n=e.y-t.y,i=e.z||0-t.z||0;return Math.sqrt(s*s+n*n+i*i)}static interpolate(e,t,s){return{x:e.x+(t.x-e.x)*s,y:e.y+(t.y-e.y)*s,z:(e.z||0)+(t.z||0-e.z||0)*s}}static angle(e,t,s=!1){const n=Math.atan2(t.y-e.y,t.x-e.x);return s?n:Math.round(180*n/Math.PI)}}class d{constructor(e=null){this._seed=null,this._seed=e}sample(){if(null==this._seed)return Math.random();let e=this._seed+=1831565813;return e=Math.imul(e^e>>>15,1|e),e^=e+Math.imul(e^e>>>7,61|e),((e^e>>>14)>>>0)/4294967296}}class m extends d{constructor(e,t,s){super(s),i(t>=e,"max >= min"),this._min=e,this._max=t}get min(){return this._min}get max(){return this._max}sample(){return this._min+super.sample()*(this._max-this._min)}}class p extends d{constructor(e,t,s,n){super(n),i(e<=t&&t<=s,"min, mode, max should be in order"),this._min=e,this._peak=t,this._max=s}get min(){return this._min}get mode(){return this._peak}get max(){return this._max}sample(){const e=this._max-this._min,t=e>0?(this._peak-this._min)/e:0,s=super.sample();return s<=t?this._min+e*Math.sqrt(t*s):this._min+e*(1-Math.sqrt((1-t)*(1-s)))}}class g extends d{constructor(e,t,s){super(s),i(t.length==e.length,"x and y arrays should have the same length");for(let n=1;n<t.length;n++)i(e[n]>=e[n-1]&&t[n]>=t[n-1],"x and y arrays should be in ascending order");i(0==t[0]&&1==t[t.length-1],"y values should range from zero to one"),this._xVals=e,this._yVals=t}get xVals(){return this._xVals}get yVals(){return this._yVals}sample(){const e=super.sample(),t=this._xVals,s=this._yVals;let n=0;for(;e>s[n]&&n<s.length;)n++;return 0==n?t[0]:t[n-1]+(e-s[n-1])*(t[n]-t[n-1])/(s[n]-s[n-1])}}class w extends d{constructor(e,t){super(t),i(e>0,"mean >= 0"),this._mean=e}get mean(){return this._mean}sample(){return-this._mean*Math.log(super.sample())}}class y extends w{constructor(e,t,s){i(e>0,"shape parameter must be an integer > 0."),super(t,s),this._shape=e}get shape(){return this._shape}get scale(){return this._mean}sample(){let e=0;for(let t=0;t<this._shape;t++)e+=super.sample();return e}}class f extends d{constructor(e,t,s){super(s),i(e>0,"shape parameter must be > 0."),this._shape=e,this._scale=t}get shape(){return this._shape}get scale(){return this._scale}sample(){const e=this._shape,t=this._scale;if(e>0&&e<1){const s=(Math.E+e)/Math.E;for(let n=0;n<1e3;n++){const n=s*super.sample();if(n<=1){const s=Math.pow(n,1/e);if(super.sample()<=Math.exp(-s))return t*s}else{const i=-Math.log((s-n)/e);if(super.sample()<=Math.pow(i,e-1))return t*i}}i(!1,"Possible infinite loop generating Gamma variable")}else{if(1==e)return-t*Math.log(super.sample());if(e>1)for(let s=0;;s++){const s=1/Math.sqrt(2*e-1),n=e-Math.log(4),i=e+1/s,a=4.5,r=1+Math.log(a),o=super.sample(),l=super.sample(),h=s*Math.log(o/(1-o)),u=e*Math.exp(h),c=o*o*l,d=n+i*h-u;if(d+r-a*c>=0||d>=Math.log(c))return t*u}}}}class q extends d{constructor(e,t,s=!0,n){super(n),this._positive=!0,i(t>=0,"std >= 0"),this._mean=e,this._std=t,this._positive=s}get mean(){return this._mean}get std(){return this._std}sample(){let e=this._n1;if(null!=e)this._n1=null;else{let t,s,n,i;do{t=2*super.sample()-1,s=2*super.sample()-1,n=t*t+s*s}while(n>1);i=Math.sqrt(-2*Math.log(n)/n),this._n1=t*i,e=s*i}let t=this._mean+this._std*e;return this._positive?Math.max(0,t):t}}class b extends q{constructor(e,t,s){const n=e*e,i=t*t;super(Math.log(n/Math.sqrt(n+i)),Math.sqrt(Math.log((n+i)/n)),!1,s),this._lnMean=e,this._lnStd=t}get mean(){return this._lnMean}get std(){return this._lnStd}sample(){return 0==this._lnMean?0:Math.pow(Math.E,super.sample())}}class v extends d{constructor(e,t){super(t),this._max=e}get max(){return this._max}sample(){return Math.floor(super.sample()*(this._max+1))}}const x=class{constructor(e){this._sim=null,this._queues=new Map,this._serial=0,this._prty=0,this._serial=x._serial++,l(this,e)}get simulation(){return this._sim}get serial(){return this._serial}get priority(){return this._prty}set priority(e){this._prty=e}async delay(e,t,s){return i(e>=0,"delays must be >= 0"),i(null==t||t.queues.length>1,"delay path should have at least two queues"),new M(this,{delay:e,path:t,signal:s}).promise}async enterQueue(e,t=1){return new M(this,{queue:e,units:t}).promise}enterQueueImmediately(e,t=1){e.add(this,t)}leaveQueue(e){e.remove(this)}async waitSignal(e){return new M(this,{signal:e}).promise}sendSignal(e,t){let s=this.simulation._fec,n=0;for(let i=0;i<s.length&&!(null!=t&&n>=t);i++){let t=s[i];t.options.signal==e&&(t.ready=!0,n++)}return n}getAnimationPosition(e,t,s){return null}dispose(){if(this._queues.size){let e=[];Array.from(this._queues.keys()).forEach((t=>e.push(t.name))),i(!1,(()=>`Entity finished script without leaving all queues: ${e.join(", ")}.`))}}toString(){return this._str||(this._str=this.constructor.name+"#"+this.serial.toString()),this._str}async script(){}};let S=x;S._serial=0;class _ extends S{constructor(e,t,s,n,i){super(),this._type=e,this._interval=t,this._max=s,this._tmStart=n,this._tmEnd=i}async script(){const e=this.simulation,t=e.timeNow,s=this._interval;if(null!=this._tmStart&&t<this._tmStart&&await this.delay(this._tmStart-t),null!=s&&null==this._tmStart){const e=s instanceof d?s.sample():s;await this.delay(e/2)}for(let n=0;!(null!=this._max&&n>=this._max)&&!(null!=this._tmEnd&&e.timeNow>this._tmEnd);n++){const e=new this._type;if(i(e instanceof S,"Entity expected"),this.simulation.activate(e),!s)break;{const e=s instanceof d?s.sample():s;await this.delay(e)}}}}var k,E;(E=k||(k={}))[E.Paused=0]="Paused",E[E.Finished=1]="Finished",E[E.Running=2]="Running";class T{constructor(e){this._fec=[],this._tmNow=0,this._tmEnd=null,this._tmMaxStep=0,this._frameDelay=0,this._tmStart=0,this._tmElapsed=0,this._state=0,this._queues=[],this._lastYield=0,this._lastFrame=0,this._yieldInterval=250,this.starting=new n,this.started=new n,this.finishing=new n,this.finished=new n,this.stateChanging=new n,this.stateChanged=new n,this.timeNowChanging=new n,this.timeNowChanged=new n,l(this,e)}get state(){return this._state}get timeEnd(){return this._tmEnd}set timeEnd(e){this._tmEnd=e}get maxTimeStep(){return this._tmMaxStep}set maxTimeStep(e){this._tmMaxStep=e}get frameDelay(){return this._frameDelay}set frameDelay(e){this._frameDelay=e}get timeElapsed(){return 2==this._state?Date.now()-this._tmStart:this._tmElapsed}get timeNow(){return this._tmNow}get yieldInterval(){return this._yieldInterval}set yieldInterval(e){this._yieldInterval=e}async start(e=!1){2!=this.state&&((e=e||0==this._fec.length)&&(this._queues.forEach((e=>e.reset())),this._fec=[],this._queues=[],this._setTimeNow(0),this.onStarting()),this._tmStart=Date.now(),this._setState(2),e&&this.onStarted(),this._step())}stop(){2==this.state&&(this._tmElapsed=Date.now()-this._tmStart,this._setState(0))}async activate(e){i(null==e.simulation,(()=>"Entity "+e.toString()+" is already active")),e._sim=this,await e.script(),e.dispose(),e._sim=null}generateEntities(e,t,s,n,i){const a=new _(e,t,s,n,i);this.activate(a)}get queues(){return this._queues}getStatsTable(e=!1){return'<table class="ss-stats">'+this._createSimulationReport()+this._createQueueReport("Populations","grossPop")+(e?this._createQueueReport("Net Populations","netPop"):"")+this._createQueueReport("Dwell Times","grossDwell")+(e?this._createQueueReport("Net Dwell Times","netDwell"):"")+"</table>"}onStarting(e=s.empty){this.starting.raise(this,e)}onStarted(e=s.empty){this.started.raise(this,e)}onFinishing(e=s.empty){this.finishing.raise(this,e)}onFinished(e=s.empty){this.finished.raise(this,e)}onStateChanging(e=s.empty){this.stateChanging.raise(this,e)}onStateChanged(e=s.empty){this.stateChanged.raise(this,e)}onTimeNowChanging(e=s.empty){this.timeNowChanging.raise(this,e)}onTimeNowChanged(e=s.empty){this.timeNowChanged.raise(this,e)}_setState(e){e!=this._state&&(this.onStateChanging(),this._state=e,this.onStateChanged())}_setTimeNow(e){e!=this._tmNow&&(this.onTimeNowChanging(),this._tmNow=e,this.onTimeNowChanged())}async _step(){if(2!=this._state)return;let e=await this._scanFec();if(null!=this._tmEnd&&this._tmNow>=this._tmEnd||e<0)return this._fec=[],this._tmElapsed=Date.now()-this._tmStart,this.queues.forEach((e=>e._updateTallies())),this.onFinishing(),this._setState(1),void this.onFinished();if(this.maxTimeStep&&this.maxTimeStep>0&&e>0&&(e=Math.min(e,this._tmNow+this.maxTimeStep)),e>0&&(this._setTimeNow(e),this.frameDelay)){const e=Date.now()-this._lastFrame;this.frameDelay>e&&await new Promise((t=>setTimeout(t,this.frameDelay-e))),this._lastFrame=Date.now()}const t=Date.now();t-this._lastYield>this._yieldInterval?(this._lastYield=t,requestAnimationFrame((()=>this._step()))):this._step()}async _scanFec(){let e=this._fec,t=0,s=null;for(let n=0;n<e.length;n++){let i=e[n];if(i.ready){e.splice(n,1),t++,await i.dispatch(),n=-1;continue}const a=i.timeDue;null!=a&&(null==s||s>a)&&(s=a)}return t>0?0:null==s?-1:s}_createSimulationReport(){return`\n            <tr>\n                <th colspan="2">${this.constructor.name}</th>\n            </tr>\n            <tr>\n                <th>Finish Time</th>\n                <td>${a(this.timeNow,0)}</td>\n            </tr>\n            <tr>\n                <th>Elapsed Time (s)</th>\n                <td>${a(this.timeElapsed/1e3)}</td>\n            <tr>`}_createQueueReport(e,t){const s=t.indexOf("Pop")>-1;let n=`<tr>\n                <th colspan="6">\n                    ${e}\n                </th>\n            </tr>\n            <tr>\n                <th>Queue</th>\n                <th>Min</th>\n                <th>Avg</th>\n                <th>Max</th>\n                <th>StDev</th>\n                <th>${s?"Capy":"Cnt"}</th>\n                <th>${s?"Utz":""}</th>\n            </tr>`;return this.queues.forEach((e=>{if(e.name&&e.grossDwell.cnt){const i=e.capacity,r=e[t];n+=`<tr>\n                    <th>${e.name}</th>\n                    <td>${a(r.min)}</td>\n                    <td>${a(r.avg)}</td>\n                    <td>${a(r.max)}</td>\n                    <td>${a(r.stdev)}</td>\n                    <td>${s?null!=i?a(i,0):"*":a(r.cnt,0)}</td>\n                    <td>${s&&null!=i?a(100*e.utilization,0)+"%":""}</td>\n                </tr>`}})),n}}class M{constructor(e,t){this._e=e,this._ready=!1,this._options=t;let s=e.simulation,n=s._fec,i=n.length;for(;i>0&&n[i-1].e.priority<e.priority;)i--;n.splice(i,0,this),this._tmStart=s.timeNow,null!=t.delay&&(this._tmDue=s.timeNow+t.delay),null!=t.ready&&(this._ready=t.ready),this._promise=new Promise((e=>{this._resolve=e}))}get e(){return this._e}get options(){return this._options}get ready(){if(this._ready)return!0;const e=this.options;return!(!e.queue||!e.queue.canEnter(e.units))||null!=this._tmDue&&this._tmDue<=this._e.simulation.timeNow}set ready(e){this._ready=e}get timeStart(){return this._tmStart}get timeDue(){return this._tmDue}async dispatch(){const e=this._e,t=e.simulation,s=this._options,n=s.queue;if(n){const t=s.units;n.add(e,null!=t?t:1)}return await this._resolve(t.timeNow-this._tmStart)}get promise(){return this._promise}}class C{constructor(e){this._cnt=0,this._min=0,this._max=0,this._sum=0,this._sum2=0,this._histo=null,this._histoParms=null,l(this,e)}get min(){return this._min}get max(){return this._max}get cnt(){return this._cnt}get avg(){return this._cnt>0?this._sum/this._cnt:0}get var(){return this._cnt>0&&this._max>this._min?Math.max(0,(this._sum2-this._sum*this._sum/this._cnt)/this._cnt):0}get stdev(){return Math.sqrt(this.var)}add(e,t=1){if(i(t>=0,"tally weights must be >= 0"),(!this._cnt||e>this._max)&&(this._max=e),(!this._cnt||e<this._min)&&(this._min=e),this._cnt+=t,this._sum+=e*t,this._sum2+=e*e*t,this._histo){e=u(e,this._histoParms.min,this._histoParms.max);let s=Math.floor(e/this._histoParms.size),n=this._histo.get(s)||0;this._histo.set(s,n+t)}}getHistogram(){if(this._histo){const e=this._histo,t=Array.from(e.keys());t.sort(((e,t)=>e-t));for(let i=1;i<t.length;i++)t[i]>t[i-1]+1&&t.splice(i,0,t[i-1]+1);const s=this._histoParms.size;let n=t.map((t=>({from:t*s,to:(t+1)*s,count:e.get(t)||0})));if(n.length){const e=this._histoParms,t=e.min,s=e.max;null!=t&&n[0].from>this.min&&(n[0].from=this.min),null!=s&&n[n.length-1].to<this.max&&(n[n.length-1].to=this.max)}return n}return null}getHistogramChart(e="",t=1){const s=this.getHistogram();if(!s||!s.length)return"";let n=0;s.forEach((e=>n=Math.max(n,e.count)));const i=Math.round(1/s.length*100),r=this._histoParms.size<1?1:0;let o="";return s.forEach(((e,s)=>{const l=this.avg>=e.from&&this.avg<=e.to?' class="avg"':"",h=Math.round(e.count/n*100),u=s*i;o+=`<g${l}>\n                <title>${e.count} (${Math.round(e.count/this.cnt*100)}%)</title>\n                <rect\n                    ${l}\n                    x="calc(${u}% + 5px)"\n                    y="calc(${100-h}% - 1.2em)"\n                    width="calc(${i}% - 10px)"\n                    height="${h}%" />\n                <text\n                    ${l}\n                    x="${u+i/2}%"\n                    y="100%"\n                    text-anchor="middle"\n                    dominant-baseline="text-top">\n                    ${a(e.from*t,r)}-${a(e.to*t,r)}\n                </text>\n            </g>`})),`\n            <figure class="ss-histogram">\n                <figcaption>${e}</figcaption>\n                <svg width="100%" height="100%">\n                    ${o}\n                </svg>\n            </figure>`}setHistogramParameters(e,t=null,s=null){e?(i(e>0,"bin size must be positive"),i(null==t||null==s||t<=s,"histogram min must be <= max"),this._histoParms={size:e,min:t,max:s},this._histo=new Map):(this._histoParms=null,this._histo=null)}reset(){this._cnt=this._max=this._min=this._sum=this._sum2=0,this._histo&&this._histo.clear()}}class D{constructor(e="",t=null,s){this._sim=null,this._name="",this._capy=null,this._items=new Map,this._tmLastChange=0,this._inUse=0,this._totalIn=0,this._grossPop=new C,this._grossDwell=new C,this._netPop=new C,this._netDwell=new C,this._name=e,this._capy=t,l(this,s)}get name(){return this._name}set name(e){this._name=e}get capacity(){return this._capy}set capacity(e){this._capy=e}get unitsInUse(){return this._inUse}get pop(){return this._items.size}get totalIn(){return this._totalIn}get entities(){return this._entities||(this._entities=Array.from(this._items.keys())),this._entities}get items(){return this._items}get lastChange(){return this._tmLastChange}get grossPop(){return this._grossPop}get grossDwell(){return this._grossDwell}get netPop(){return this._netPop}get netDwell(){return this._netDwell}get utilization(){return this.capacity?this.grossPop.avg/this.capacity:0}get totalCount(){return this.grossDwell.cnt}get averageLength(){return this.grossPop.avg}get maxLength(){return this.grossPop.max}get averageDwell(){return this.grossDwell.avg}get maxDwell(){return this.grossDwell.max}canEnter(e=1){return null==this.capacity||this.unitsInUse+e<=this.capacity}add(e,t=1){let s=this._sim;null==s?(s=this._sim=e.simulation,s.queues.push(this),s.queues.sort(((e,t)=>e.name<t.name?-1:e.name>t.name?1:0)),this._tmLastChange=0):s!=e.simulation&&i(!1,"Queue already in use by another simulation"),i(null==this._items.get(e),(()=>e.toString()+" is already in queue"+this.name)),i(this.canEnter(t),"Queue does not have enough capacity"),this._updatePopTallies(),e._queues.set(this,!0),this._items.set(e,new P(e,t,s.timeNow)),this._inUse+=t,this._totalIn++;const n=this._entities;n&&n.push(e)}remove(e){const t=this._items.get(e);i(null!=t,(()=>"Entity "+e.toString()+" is not in queue "+this.toString())),this._updatePopTallies(),this._updateDwellTallies(t.timeIn),this._items.delete(e),e._queues.delete(this),this._inUse-=t.units;const s=this._entities;s&&s.splice(s.indexOf(e),1)}reset(){this._sim=null,this._inUse=0,this._totalIn=0,this._tmLastChange=0,this._entities=null,this._items.clear(),this._grossPop.reset(),this._grossDwell.reset(),this._netPop.reset(),this._netDwell.reset()}_updateTallies(){this._updatePopTallies();for(let e of this.items.values())this._updateDwellTallies(e.timeIn)}_updatePopTallies(){const e=this._inUse,t=this._sim.timeNow,s=t-this._tmLastChange;i(s>=0,"Time delta cannot be negative"),this._grossPop.add(e,s),e&&this._netPop.add(e,s),this._tmLastChange=t}_updateDwellTallies(e){const t=this._sim.timeNow-e;i(t>=0,"Dwell time cannot be negative"),this._grossDwell.add(t,1),t>0&&this._netDwell.add(t,1)}}class P{constructor(e,t,s){this._e=e,this._units=t,this._timeIn=s}get entity(){return this._e}get units(){return this._units}get timeIn(){return this._timeIn}}class z{constructor(e,t,s){this._queues=new Map,this._disabled=!1,this._rotateEntities=!1,this._toQueueEnd=!0,this._entities=new Map,this._host=h(t),this._scene=this._host,"X3D"==this.hostTag&&(this._scene=this._host.querySelector("scene")),this._sim=e,e.timeNowChanged.addEventListener(this.updateDisplay,this),e.stateChanged.addEventListener(this.updateDisplay,this),e.yieldInterval=30,this._lastUpdate=0,this._entities=new Map,s&&l(this,s)}get hostElement(){return this._host}get hostTag(){return this._host.tagName.toUpperCase()}get isThreeD(){const e=this.hostTag;return"X3D"==e||"A-SCENE"==e}get sceneElement(){return this._scene}get getEntityHtml(){return this._getEntityHtml}set getEntityHtml(e){this._getEntityHtml=e}get rotateEntities(){return this._rotateEntities}set rotateEntities(e){this._rotateEntities=e}get animateToQueueEnd(){return this._toQueueEnd}set animateToQueueEnd(e){this._toQueueEnd=e}get disabled(){return this._disabled}set disabled(e){e!=this.disabled&&(this._disabled=e,e||this.updateDisplay())}get queues(){return this._queueArray}set queues(e){this._queueArray=e,e.forEach((e=>{let t=new A(this,e);this._queues.set(t._q,t)})),this._lastUpdate&&(this._lastUpdate=-1,this.updateDisplay())}updateDisplay(){if(this._disabled)return;const e=this._host,t=this._sim,s=e.getBoundingClientRect();if(s.height!=this._height||s.width!=this._width){this._height=s.height,this._width=s.width;for(let e of this._queues.values())e._ptStart=null}this._entities.forEach((e=>{e._inUse=!1}));for(let n of this._queues.values())n._draw();t._fec.forEach((e=>{if(e.options.path&&null!=e.timeDue){const t=this._getAnimatedEntity(e.e),s=e.options.path,n=null!=s.tension?s.tension:1,a=s.radius,r=[];s.queues.forEach(((e,t)=>{const n=this._queues.get(e);i(null!=n,"Queue missing animation info"),r.push(this._toQueueEnd&&2==s.queues.length&&t>0&&n._ptEnd||n._getStart())})),a&&function(e,t){if(t>0&&e.length>2)for(let s=e.length-2;s>=0;s--){const n=e[s],i=e[s+1],a=c.distance(n,i);if(a>2*t){let r=s+1;if(s>0){const s=c.interpolate(n,i,t/a);e.splice(r++,0,s)}if(s<e.length-2){const s=c.interpolate(n,i,1-(a-t)/a);e.splice(r,0,s)}}}}(r,a),t.updateIcon();const o=e.timeStart,l=e.timeDue,h=1-(l-this._sim.timeNow)/(l-o),[d,m]=function(e,t,s){const n=c.distance,i=c.angle,a=c.interpolate,r=(e,t)=>e[u(t,0,e.length-1)];if(s=u(s,0,1),t=u(t,0,1),e.length<3)return 2==e.length?[a(e[0],e[1],s),c.angle(e[0],e[1])]:[e[0],0];let o=0;for(let u=0;u<e.length-1;u++)o+=n(e[u],e[u+1]);const l=s*o;let h=-1,d=-1;o=0;for(let u=0;u<e.length-1;u++){const t=n(e[u],e[u+1]);if(o+t>=l){h=u,d=(l-o)/t;break}o+=t}let m=e[h],p=r(e,h+1);const g=a(m,p,d),w=i(m,p);if(0==t)return[g,w];let y;d>=.5?(p=r(e,h+1),m=a(e[h],p,.5),y=a(p,r(e,h+2),.5)):(p=e[h],m=a(r(e,h-1),p,.5),y=a(e[h],r(e,h+1),.5));if(0==h&&!n(m,p)||h==e.length-2&&!n(p,y))return[g,w];const f=n(m,p),q=n(p,y),b=(l-o+f*(d>=.5?-1:1))/(f+q),[v,x]=function(e,t,s,n){const i=(1-n)*(1-n),a=2*(1-n)*n,r=n*n,o={x:i*e.x+a*t.x+r*s.x,y:i*e.y+a*t.y+r*s.y,z:i*e.z+a*t.z+r*s.z},l=2*(n-1),h=2*(1-2*n),u=2*n,c=l*e.x+h*t.x+u*s.x,d=l*e.y+h*t.y+u*s.y,m=180*Math.atan2(d,c)/Math.PI;return[o,m]}(m,p,y,b);return[a(g,v,t),t>.1?x:w]}(r,n,h);t._drawAt(d,this.rotateEntities?m:0)}})),this._entities.forEach(((e,t)=>{if(!e._inUse){this._entities.delete(t);let s=e._element;s&&s.parentElement&&s.remove()}})),this._lastUpdate=t.timeNow}_getAnimatedEntity(e){let t=this._entities.get(e);return t||(t=new $(this,e),this._entities.set(e,t)),t}}class A{constructor(e,t){this._angle=0,this._pt1=new c,this._pt2=new c,this._anim=e,this._q=t.queue,this._max=t.max,this._element=h(t.element),this._elementEnd=t.endElement?h(t.endElement):null,this._angle=t.angle||0,this._stackEntities=t.stackEntities,i(this._q instanceof D,"q parameter should be a Queue")}_getStart(){return this._ptStart||(this._ptStart=this._getElementPosition(this._element)),this._ptStart}_getEnd(){return this._ptEnd||(this._ptEnd=this._getElementPosition(this._elementEnd||this._element)),this._ptEnd}_getElementPosition(e){const t=this._anim;switch(t.hostTag){case"X3D":return new Q(e).center;case"A-SCENE":return c.clone(e.object3D.position);case"SVG":const s=e.getBBox();return new c(s.x+s.width/2,s.y+s.height/2,0);default:const n=t.hostElement.getBoundingClientRect(),i=e.getBoundingClientRect();return new c(i.left-n.left+i.width/2,i.top-n.top+i.height/2,0)}}_draw(){const e=this._anim,t=this._q;if(!t.pop)return void(this._ptEnd=null);if(!this._customPositions&&t.lastChange<e._lastUpdate&&"A-SCENE"!=e.hostTag){for(let t of this._q.items.values()){const s=e._entities.get(t.entity);s&&(s._inUse=!0)}return}let s=c.clone(this._getStart());this._ptEnd=null;let n=0;for(let i of t.items.values()){if(null!=this._max&&n>=this._max)break;const a=i.entity,r=e._getAnimatedEntity(a);r.updateIcon();const o=a.getAnimationPosition;if(o!=S.prototype.getAnimationPosition){const e=c.copy(this._pt1,this._getStart()),s=c.copy(this._pt2,this._getEnd()),n=o.call(a,t,e,s);if(null!=n){this._customPositions=!0,r._drawAt(n.position,n.angle);continue}}const l=this._angle*(e.isThreeD?-1:1),h=-l/180*Math.PI,u=Math.sin(h),d=-Math.cos(h),m=this._stackEntities,p=m?0:r._sz.x*d/2,g=m?0:(e.rotateEntities?r._sz.x:r._sz.y)*u/2;s.x+=p,s.y+=g,r._drawAt(s,l),s.x+=p,s.y+=g,n++}this._ptEnd=s}}class ${constructor(e,t){let s;switch(this._anim=e,this._entity=t,this._inUse=!1,e.hostTag){case"X3D":s=document.createElement("transform");break;case"A-SCENE":s=document.createElement("a-entity");break;case"SVG":s=document.createElementNS("http://www.w3.org/2000/svg","g"),s.style.opacity="0";break;default:s=document.createElement("div"),s.style.opacity="0"}switch(s.classList.add("ss-entity"),this._element=s,this.updateIcon(),e.sceneElement.appendChild(s),e.hostTag){case"X3D":const e=new Q(s).size;this._sz={x:e.x,y:e.y,z:e.z};break;case"A-SCENE":this._sz=new c,requestAnimationFrame((()=>{const e=s.object3D,t=(new THREE.Box3).setFromObject(e);this._sz={x:t.max.x-t.min.x,y:t.max.y-t.min.y,z:t.max.z-t.min.z}}));break;case"SVG":{const e=s.getBBox();this._sz={x:e.width,y:e.height},this._offset={x:e.x+e.width/2,y:e.y+e.height/2}}break;default:{const e=s.getBoundingClientRect();this._sz={x:e.width,y:e.height},this._offset={x:e.width/2,y:e.height/2}}}}_getEntityHtml(){const e=this._anim.getEntityHtml;return e?e(this._entity):"&#9899;"}updateIcon(){const e=this._getEntityHtml();e!=this._html&&(this._element.innerHTML=this._html=e)}_drawAt(e,t){const s=this._anim,n=this._element,i=n.style;switch(s.hostTag){case"X3D":n.setAttribute("translation",`${e.x} ${e.y} ${e.z}`),n.setAttribute("rotation","0 0 1 "+(s.rotateEntities?t/180*Math.PI:0));break;case"A-SCENE":const a=n.object3D;a.position.set(e.x,e.y,e.z),a.rotation.set(0,0,t&&s.rotateEntities?t/180*Math.PI:0);break;case"SVG":default:const r=new c(e.x-this._offset.x,e.y-this._offset.y);let o=`translate(${Math.round(r.x)}px, ${Math.round(r.y)}px)`;t&&s.rotateEntities&&(o+=`rotate(${t}deg) `),i.transform=o,i.opacity=""}this._inUse=!0}}class Q{constructor(e){this.center=new c,this.size=new c;const t=e.querySelectorAll("shape>:not(appearance)");if(0==t.length)this.applyGeometry(e),this.applyTransforms(e);else{this.applyGeometry(t[0]),this.applyTransforms(t[0]);for(let e=1;e<t.length;e++)this.merge(new Q(t[e]))}}applyGeometry(e){const t=this.size;switch(e.tagName){case"BOX":t.x=t.y=t.z=2;let s=R(e,"size");s&&s.length>=3&&(t.x=s[0],t.y=s[1],t.z=s[2]);break;case"CONE":t.x=t.z=2*Math.max(L(e,"topRadius",0),L(e,"BottomRadius",0)),t.y=L(e,"height",0);break;case"CYLINDER":t.x=t.y=2*L(e,"radius",0),t.z=L(e,"height",0);break;case"SPHERE":t.x=t.y=t.z=2*L(e,"radius",1);break;default:console.error("skipping unknown geometry",e.tagName)}}applyTransforms(e){for(let t=e.closest("transform");null!=t;t=t.parentElement.closest("transform")){const e=R(t,"translation");if(e&&e.length>=3){const t=this.center;t.x+=e[0],t.y+=e[1],t.z+=e[2]}const s=R(t,"scale");if(s&&s.length>=3){const e=this.size;e.x*=s[0],e.y*=s[1],e.z*=s[2]}}}merge(e){const t=this.center,s=this.size,n=e.center,i=e.size,a=new c(Math.min(t.x-s.x/2,n.x-i.x/2),Math.min(t.y-s.y/2,n.y-i.y/2),Math.min(t.z-s.z/2,n.z-i.z/2)),r=new c(Math.max(t.x+s.x/2,n.x+i.x/2),Math.max(t.y+s.y/2,n.y+i.y/2),Math.max(t.z+s.z/2,n.z+i.z/2));t.x=(a.x+r.x)/2,t.y=(a.y+r.y)/2,t.z=(a.z+r.z)/2,s.x=r.x-a.x,s.y=r.y-a.y,s.z=r.y-a.y}}function R(e,t){const s=e.getAttribute(t),n=s?s.split(/\s*,\s*|\s+/):null;return n?n.map((e=>parseFloat(e))):null}function L(e,t,s){const n=e.getAttribute(t);return n?parseFloat(n):s}class I extends S{constructor(e){super(null),this.start=0,this.duration=0,l(this,e)}async preempt(e,t,s=[]){for(;t>=.001;)this.sendSignal(e),s.forEach((e=>this.enterQueueImmediately(e))),await this.enterQueue(e),s.forEach((e=>this.leaveQueue(e))),t-=await this.delay(t,null,e),this.leaveQueue(e)}log(e){console.log(`${this.constructor.name} ${e} at ${this.simulation.timeNow}`)}}class N extends I{async script(){const e=this.simulation;this.log("arrived"),await this.delay(this.start),await this.preempt(e.resource,this.duration,[e.q0]),i(115==e.timeNow,"should finish at 115"),this.log("done (@115)")}}class W extends I{async script(){const e=this.simulation;this.log("arrived"),await this.delay(this.start),await this.preempt(e.resource,this.duration,[e.q1]),i(25==e.timeNow,"should finish at 25"),this.log("done (@25)")}}class O extends I{async script(){const e=this.simulation;this.log("arrived"),await this.delay(this.start),await this.preempt(e.resource,this.duration,[e.q2]),i(17==e.timeNow,"should finish at 17"),this.log("done (@17)")}}class F extends S{async script(){const e=this.simulation,t=e.randomVar,s=e.tally;s.reset(),s.setHistogramParameters(t.binSize);for(let n=0;n<e.sampleSize;n++)s.add(t.var.sample())}}class H extends d{sample(){return super.sample()<.5?8:80}}class G extends S{constructor(){super(...arguments),this.service=new m(12,18)}async script(){const e=this.simulation;await this.enterQueue(e.qWait),await this.enterQueue(e.qJoe),this.leaveQueue(e.qWait),await this.delay(this.service.sample()),this.leaveQueue(e.qJoe)}}class X extends S{async script(){let e=this.simulation;e.qWait.canEnter()?this.enterQueueImmediately(e.qWait):await this.enterQueue(e.qWait),e.qService.canEnter()?this.enterQueueImmediately(e.qService):await this.enterQueue(e.qService),this.leaveQueue(e.qWait),await this.delay(e.service.sample()),this.leaveQueue(e.qService)}}var V,B;(B=V||(V={}))[B.RED=0]="RED",B[B.YELLOW=1]="YELLOW",B[B.GREEN=2]="GREEN";class U extends T{constructor(e){super(e),this.qPedArr=new D("Pedestrian Arrival"),this.qPedXing=new D("Pedestrian Crossing"),this.qPedXed=new D("Pedestrian Crossed"),this.qPedLeave=new D("Pedestrian Leaving"),this.qCarArr=new D("Car Arrival"),this.qCarXing=new D("Car Crossing"),this.qCarXed=new D("Car Crossed"),this.walkToXing=new m(60,120),this.walkAcross=new m(10,20),this.walkAway=new m(120,180),this.driveToXing=new m(5,6),this.driveAway=new m(10,12),this.pedestrianArrivalInterval=new w(6),this.carArrivalInterval=new w(10),this.cycle={red:20,yellow:10,green:30},this.light=0,this.qPedXing.grossPop.setHistogramParameters(3),this.qCarXing.grossPop.setHistogramParameters(2),null==this.timeEnd&&(this.timeEnd=86400)}onStarting(){super.onStarting(),this.activate(new Y),this.generateEntities(j,this.pedestrianArrivalInterval),this.generateEntities(J,this.carArrivalInterval)}}class j extends S{async script(){let e=this.simulation;for(await this.delay(e.walkToXing.sample(),{queues:[e.qPedArr,e.qPedXing]}),await this.enterQueue(e.qPedXing);2!=e.light;)await this.waitSignal(2);this.leaveQueue(e.qPedXing),await this.delay(e.walkAcross.sample(),{queues:[e.qPedXing,e.qPedXed]}),await this.delay(e.walkAway.sample(),{queues:[e.qPedXed,e.qPedLeave]})}}class J extends S{async script(){let e=this.simulation;for(await this.delay(e.driveToXing.sample(),{queues:[e.qCarArr,e.qCarXing]}),await this.enterQueue(e.qCarXing);0!=e.light;)await this.waitSignal(0);this.leaveQueue(e.qCarXing),await this.delay(e.driveAway.sample(),{queues:[e.qCarXing,e.qCarXed]})}}class Y extends S{async script(){let e=this.simulation;for(;;)this.setLight(2),await this.delay(e.cycle.green),this.setLight(1),await this.delay(e.cycle.yellow),this.setLight(0),await this.delay(e.cycle.red)}setLight(e){this.simulation.light=e,this.sendSignal(e)}}class K extends T{constructor(){super(...arguments),this.qAngle=270,this.qRotate=new D("Rotate"),this.qCenter=new D("qcenter"),this.q1=new D("q1"),this.q2=new D("q2"),this.q3=new D("q3"),this.q4=new D("q4"),this.q5=new D("q5"),this.q6=new D("q6"),this.q7=new D("q7"),this.q8=new D("q8"),this.q9=new D("q9"),this.q10=new D("q10"),this.q11=new D("q11"),this.q12=new D("q12"),this.splineTension=.5,this.interArrival=new m(5,10),this.moveDelayLong=new m(50,200),this.moveDelayShort=new m(30,60)}onStarting(){super.onStarting();for(let e=0;e<6;e++)this.activate(new Z);this.generateEntities(ee,this.interArrival,20)}}class Z extends S{async script(){this.enterQueueImmediately(this.simulation.qRotate),await this.waitSignal(null)}}class ee extends S{constructor(e){super(null),this.fast=!1,this.fast=this.serial%2==0,l(this,e)}async script(){let e=this.simulation;for(;;){const t=this.fast?e.moveDelayShort:e.moveDelayLong;await this.delay(t.sample(),{queues:[e.qCenter,e.q1,e.q2,e.q3,e.q4,e.q5,e.q11,e.q10,e.q9,e.q8,e.q7,e.qCenter],tension:e.splineTension})}}}class te extends S{async script(){const e=this.simulation;await this.enterQueue(e.qMultiWait),await this.enterQueue(e.qMulti),await this.delay(e.service.sample()),this.leaveQueue(e.qMulti),this.leaveQueue(e.qMultiWait)}}class se extends S{async script(){const e=this.simulation;let t;for(await this.enterQueue(e.qSingleWait);null==t;){for(let s=0;s<e.qSingle.length;s++){let n=e.qSingle[s];if(n.canEnter()){t=n;break}}null==t&&await this.waitSignal(se)}this.enterQueueImmediately(t),await this.delay(e.service.sample()),this.leaveQueue(t),this.leaveQueue(e.qSingleWait),this.sendSignal(se)}}class ne extends S{async script(){const e=this.simulation;await this.enterQueue(e.qSingleWaitNC);let t=Math.floor(10*Math.random()),s=e.qSingleNC[t];await this.enterQueue(s),await this.delay(e.service.sample()),this.leaveQueue(s),this.leaveQueue(e.qSingleWaitNC)}}class ie{constructor(e){l(this,e)}set nodes(e){this._nodes=e}get nodes(){return this._nodes}set links(e){this._links=e}get links(){return this._links}getNode(e){return e=e.toString(),this._nodes.find((t=>t.id==e))}shortestPath(e,t){const s=[],n=[];for(this._nodes.forEach((t=>{s.push({id:t.id,node:t,distance:t==e?0:1/0,link:null})}));s.length;){let e=null;s.forEach((t=>{(null==e||t.distance<e.distance)&&(e=t)})),s.splice(s.indexOf(e),1),n.push(e),s.length&&this._links.forEach((t=>{t.from!=e.node||t.disabled||s.forEach((s=>{if(s.node==t.to){const n=e.distance+this.getLinkDistance(t,e.link);n<s.distance&&(s.distance=n,s.link=t)}}))}))}const i=[];for(let a=t;null!=a;){const e=this._getPathPart(n,a).link;if(!e)break;a=e.from,i.unshift(e)}return i}getLinkDistance(e,t){let s=null;return null!=e.distance?s=e.distance:(i(null!=e.from.position&&null!=e.to.position,"link must have a distance or connect points with positions"),s=c.distance(e.from.position,e.to.position)),s}mergePath(e){const t=[];let s=0;return e.forEach(((n,i)=>{s+=this.getLinkDistance(n,i>0?e[i-1]:null),0==i&&t.push(n.from.queue),t.push(n.to.queue)})),[t,s]}_getLinkAngle(e){return c.angle(e.from.position,e.to.position,!0)}_getPathPart(e,t){for(let s=0;s<e.length;s++){let n=e[s];if(n.node==t)return n}return null}}var ae;function re(e,t){return`${e}.${t.serial}`}!function(e){e[e.RequestArrived=0]="RequestArrived",e[e.RequestAssigned=1]="RequestAssigned",e[e.ServiceArrived=2]="ServiceArrived",e[e.ServiceFinished=3]="ServiceFinished"}(ae||(ae={}));class oe extends T{constructor(){super(...arguments),this.serviceVehicles=5,this.requests=1e3,this.requestsServed=0,this.requestsMissed=0,this.qBusy=new D("busy",this.serviceVehicles),this.qWait=new D("wait"),this.qService=new D("service"),this.interArrivalTime=new w(60),this.serviceTime=new w(120),this.serviceVehicleSpeed=new m(3,6),this.network=function(e,t,s){const n=[];for(let a=0;a<e;a++)for(let e=0;e<t;e++)n.push({id:n.length.toString(),position:{x:e*s,y:a*s},queue:new D});const i=[];for(let a=0;a<n.length;a++){const s=Math.floor(a/t),r=a%t;r<t-1&&(i.push({from:n[a],to:n[a+1]}),i.push({from:n[a+1],to:n[a]})),s<e-1&&a%2!=0&&(i.push({from:n[a],to:n[a+t]}),i.push({from:n[a+t],to:n[a]})),0==s&&0==r&&(i.push({from:n[a+1],to:n[a+t]}),i.push({from:n[a+t],to:n[a+1]})),0==s&&r==t-1&&(i.push({from:n[a-1],to:n[a+t]}),i.push({from:n[a+t],to:n[a-1]})),s==e-1&&0==r&&(i.push({from:n[a+1],to:n[a-t]}),i.push({from:n[a-t],to:n[a+1]})),s==e-1&&r==t-1&&(i.push({from:n[a-1],to:n[a-t]}),i.push({from:n[a-t],to:n[a-1]}))}return new ie({nodes:n,links:i})}(5,9,100),this.rndNode=new v(this.network.nodes.length-1),this.requestFinished=new n}onStarting(){super.onStarting(),this.servers=[],this.requestsServed=0,this.requestsMissed=0,this.generateEntities(le,this.interArrivalTime,this.requests),this.generateEntities(he,new v(0),this.serviceVehicles)}getRandomFreeNode(){const e=this.network.nodes;let t=this.rndNode.sample();for(let s=0;s<e.length;s++){let n=e[(t+s)%e.length];if(!n.queue.pop)return n}return null}onRequestFinished(e){this.requestFinished.raise(this,e)}}class le extends S{async script(){const e=this.simulation;if(this.node=e.getRandomFreeNode(),!this.node)return e.requestsMissed++,void console.log(`out of free nodes (${e.requestsMissed} times)`);this.enterQueueImmediately(e.qWait),this.enterQueueImmediately(this.node.queue),this.sendSignal(0),await this.waitSignal(re(1,this)),await this.waitSignal(re(2,this)),this.leaveQueue(e.qWait),this.leaveQueue(this.node.queue),await this.waitSignal(re(3,this)),e.onRequestFinished()}}class he extends S{constructor(){super(...arguments),this.busy=!1}async script(){const e=this.simulation;for(e.servers.push(this),this.node=e.getRandomFreeNode(),this.enterQueueImmediately(this.node.queue);;){for(this.request=null;!this.request;)this.request=this.getClosestRequest(),this.request||await this.waitSignal(0);i(null==this.request.assigned,"request should not be assigned"),this.request.assigned=this.serial,this.sendSignal(re(1,this.request)),this.enterQueueImmediately(e.qBusy),this.leaveQueue(this.node.queue);const t=e.network.shortestPath(this.node,this.request.node);i(t.length>0,"cannot reach destination");{const[s,n]=e.network.mergePath(t);await this.delay(n/e.serviceVehicleSpeed.sample(),{queues:s,tension:.8})}this.busy=!0,this.node=this.request.node,this.sendSignal(re(2,this.request)),this.enterQueueImmediately(this.node.queue),this.enterQueueImmediately(e.qService),await this.delay(e.serviceTime.sample()),this.leaveQueue(e.qService),this.sendSignal(re(3,this.request)),this.leaveQueue(this.node.queue),this.busy=!1,e.requestsServed++,this.enterQueueImmediately(this.node.queue),this.leaveQueue(e.qBusy)}}getClosestRequestQuick(){const e=this.simulation;i(!this.busy,"should not be looking for service while busy");let t,s=null;return e.qWait.entities.forEach((e=>{if(null==e.assigned){const n=c.distance(this.node.position,e.node.position);(null==t||n<t)&&(s=e,t=n)}})),s}getClosestRequest(){const e=this.simulation;i(!this.busy,"should not be looking for service while busy");const t=e.servers.filter((e=>0==e.busy)),s=e.qWait.entities.filter((e=>null==e.assigned));if(0==s.length)return null;const n=[];t.forEach((e=>{let t=[];n.push(t),s.forEach((s=>{const n=c.distance(e.node.position,s.node.position);t.push(n)}))}));const a=new Map,r=new Map;for(;a.size<t.length&&r.size<s.length;){const e={distance:null,vehicle:null,destination:null};for(let i=0;i<n.length;i++)if(!a.has(t[i]))for(let a=0;a<n[i].length;a++)if(!r.has(s[a])){let r=n[i][a];(null==e.distance||r<e.distance)&&(e.vehicle=t[i],e.destination=s[a],e.distance=r)}a.set(e.vehicle,e.destination),r.set(e.destination,e.vehicle)}return a.get(this)}}function ue(e,t){const s=t.querySelector("scene");let n="";e.nodes.forEach((e=>{const t=e.position;n+=`\n            <transform class='ss-queue q${e.id}' translation='${t.x} ${t.y} 0'>\n                <shape>\n                    <appearance>\n                        <material transparency='0.5' diffuseColor='1 1 0'/>\n                    </appearance>\n                    <box size='5 5 2'></box>\n                </shape>\n            </transform>`})),e.links.forEach(((e,t)=>{if(t%2==0){const t=e.from.position,s=e.to.position,i=c.distance(t,s);n+=`\n            <transform translation='${t.x} ${t.y} 0' rotation='0 0 1 ${c.angle(t,s,!0)}'>\n                <transform translation='${i/2} 0 0'>\n                    <shape>\n                        <appearance>\n                            <material transparency='0' diffuseColor='.1 .1 .1'/>\n                        </appearance>\n                        <box size='${i+30} 40 1'></box>\n                    </shape>\n                </transform>\n            </transform>`}})),s.innerHTML+=n}class ce extends S{constructor(){super(...arguments),this.speed=0,this.accel=10,this.position=0,this.maxSpeed=0}async script(){const e=this.simulation,t=e.timeIncrement;for(this.maxSpeed=e.carSpeeds.sample(),this.enterQueueImmediately(e.qStrip);this.position<e.stripLength;)this.speed=this.getSpeed(t),await this.delay(t),this.position+=this.speed*t;this.leaveQueue(e.qStrip),e.onCarFinished()}getAnimationPosition(e,t,s){const n=this.simulation;return{position:c.interpolate(t,s,this.position/n.stripLength),angle:c.angle(t,s,!1)}}getSpeed(e){const t=Math.min(this.getSafeSpeed(e),this.maxSpeed);return t>this.speed?Math.min(t,this.speed+this.accel*e):t<this.speed?Math.max(t,this.speed-this.accel*e):this.speed}getSafeSpeed(e){let t=this.maxSpeed;const s=this.getCarAhead();if(null!=s){let n=s.position-this.position;s.speed&&s.accel&&(n+=s.speed*s.speed/(2*s.accel));const i=e*e/4-(this.speed*e-2*n)/this.accel;t=i>0?+this.accel*(Math.sqrt(i)-e/2):-this.accel*e/2}return Math.max(0,t)}getCarAhead(){const e=this.simulation,t=e.qStrip.entities;let s=t.indexOf(this);return s>0?t[s-1]:{speed:0,maxSpeed:0,accel:0,position:e.stripLength}}}class de extends S{constructor(){super(...arguments),this.speed=0,this.accel=10,this.position=0,this.length=25,this.maxSpeed=0,this.delayStart=0}async script(){const e=this.simulation,t=e.network,s=t.nodes,n=e.timeIncrement;this.maxSpeed=e.carSpeeds.sample();let i=s[0],a=s[s.length-1],r=0;for(;i!=a;){const s=e.timeNow;this.path=t.shortestPath(i,a);const o=this.path[0],l=e.network.getLinkDistance(o);for(this.position=r,this.enterQueueImmediately(o.queue);this.position<l;)this.speed=this.getSpeed(n),this.delayStart=e.timeNow,await this.delay(n),this.position+=this.speed*n;this.leaveQueue(o.queue),i=o.to,r=Math.max(0,this.position-l),e.stats.totalDistance+=c.distance(o.from.position,o.to.position),e.stats.totalTime+=e.timeNow-s}e.stats.carsDone++,e.onCarFinished()}getAnimationPosition(e,t,s){const n=this.simulation,i=n.network.getLinkDistance(this.path[0]),a=this.position+(n.timeNow-this.delayStart)*this.speed;return{position:c.interpolate(t,s,a/i),angle:c.angle(t,s,!1)}}getSpeed(e){const t=Math.min(this.getSafeSpeed(e),this.maxSpeed);return t>this.speed?Math.min(t,this.speed+this.accel*e):t<this.speed?Math.max(t,this.speed-this.accel*e):this.speed}getSafeSpeed(e){let t=this.maxSpeed;const s=this.getCarAhead();if(null!=s){let n=Math.max(0,s.position-this.position-s.length);s.speed&&s.accel&&(n+=s.speed*s.speed/(2*s.accel));const i=e*e/4-(this.speed*e-2*n)/this.accel;t=i>0?+this.accel*(Math.sqrt(i)-e/2):-this.accel*e/2}return Math.max(0,t)}getCarAhead(){const e=this.simulation,t=this.path[0],s=t.queue,n=s.entities.indexOf(this);if(n>0)return s.entities[n-1];if(this.path.length>1){const e=this.path[1].queue;if(e.pop){const t=e.entities[0];return{speed:t.speed,maxSpeed:t.maxSpeed,accel:t.maxSpeed,position:this.position+t.position,length:t.length}}return null}return{speed:0,maxSpeed:0,accel:0,position:e.network.getLinkDistance(t),length:0}}}class me extends ie{getLinkDistance(e,t){let s=super.getLinkDistance(e,t);return s+=s*e.queue.pop*.5,s}}const pe={};var ge,we;(we=ge||(ge={})).thrust="thrust.mp3",we.missile="missile.mp3",we.explosion="explosion.mp3",we.won="won.mp3",we.lost="lost.mp3";class ye extends S{constructor(e){super(e),this.radius=0,this.spd=new c,this.done=!1,e&&null!=e.angle||(this.angle=-90),e&&e.pos||(this.pos={x:500,y:250})}get angle(){return this._angle}set angle(e){this._angle=e,this._cos=Math.cos(e*Math.PI/180),this._sin=Math.sin(e*Math.PI/180)}get sin(){return this._sin}get cos(){return this._cos}incrementSpeed(e,t){const s=this.spd;if(s.x+=e*this.cos,s.y+=e*this.sin,null!=t){const e=Math.sqrt(s.x*s.x+s.y*s.y),n=t/e;0!=e&&n<1&&(s.x*=n,s.y*=n)}}updatePosition(e,t){const s=this.pos,n=this.spd;return s.x+=n?n.x*e:0,s.y+=n?n.y*e:0,t&&(s.x=this.wrap(s.x,1e3),s.y=this.wrap(s.y,500)),s.x>=0&&s.x<=1e3&&s.y>=0&&s.y<=500}wrap(e,t){return e<0?t:e>t?0:e}collidedWidth(e){return!this.done&&!e.done&&c.distance(this.pos,e.pos)<this.radius+e.radius}getAnimationPosition(e,t,s){return null==this.pos&&(this.pos=t),{position:this.pos,angle:this.angle}}}class fe extends ye{constructor(){super(...arguments),this.engineOn=0}async script(){const e=this.simulation,t=e.timeIncrement;for(this.radius=45,this.enterQueueImmediately(e.q);!this.done;)await this.delay(t),this.updatePosition(t,!0),e.timeNow-this.engineOn>3&&(this.engineOn=0);this.leaveQueue(e.q)}keydown(e){if(!this.done){const t=this.simulation;switch(e.key){case"ArrowLeft":case"ArrowRight":{let t="ArrowLeft"==e.key?-10:10;e.shiftKey&&(t*=3),this.angle=(this.angle+t)%360}e.preventDefault();break;case"ArrowUp":this.incrementSpeed(2,20),this.engineOn=t.timeNow,t.play(ge.thrust),e.preventDefault();break;case" ":const s=new qe(this);t.activate(s),t.missilesFired++,t.onMissilesFiredChanged(),e.preventDefault();break;case"S":case"s":t.sound=!t.sound,e.preventDefault()}}}}class qe extends ye{constructor(e){super(),this.radius=10;const t=e.pos;this.pos={x:t.x+80*e.cos,y:t.y+80*e.sin},this.angle=e.angle,this.spd=c.clone(e.spd),this.incrementSpeed(30)}async script(){const e=this.simulation,t=e.timeIncrement;for(e.play(ge.missile),this.enterQueueImmediately(e.q);!this.done&&(await this.delay(t),this.updatePosition(t,!1)););this.leaveQueue(e.q)}}class be extends ye{constructor(){super(...arguments),this.small=Math.random()<.4}async script(){const e=this.simulation,t=e.ship,s=e.q.entities,n=e.timeIncrement,i=e.asteroidSpeed.sample(),a=(Math.floor(20*Math.random())-10)*(this.small?2:1);for(this.radius=this.small?40:80,this.pos=new c(t.pos.x+500,t.pos.y+250),this.angle=Math.floor(360*Math.random()),this.incrementSpeed(i),this.enterQueueImmediately(e.q);!this.done&&!t.done;){if(this.collidedWidth(t)){e.play(ge.explosion),e.gameOver(!1);break}for(let t=0;t<s.length;t++){const n=s[t];if(n instanceof qe&&this.collidedWidth(n)){e.play(ge.explosion),n.done=!0,this.done=!0,e.asteroidsDestroyed++,e.onAsteroidsDestroyedChanged(),8==e.asteroidsDestroyed&&e.gameOver(!0);break}}await this.delay(n),this.updatePosition(n,!0),this.angle=(this.angle+a)%360}this.leaveQueue(e.q)}}class ve extends S{async script(){const e=this.simulation;let t=!1;for(this.enterQueueImmediately(e.totalDuration);!t;)e.lines.canEnter(1)?(this.enterQueueImmediately(e.lines),await this.delay(e.callDuration.sample()),this.leaveQueue(e.lines),t=!0):await this.delay(300);this.leaveQueue(e.totalDuration)}}class xe extends S{async script(){const e=this.simulation,t=e.getDemandQty();t>e.stock?e.stockOuts++:e.stock-=t,e.stockHistory.push(e.stock)}}class Se extends S{async script(){const e=this.simulation;if(e.stock<e.reorder){const t=e.target-e.stock;t>0&&(e.stock+=t)}}}class _e extends S{async preempt(e,t,s=[]){for(;t>=.001;)this.sendSignal(e),s.forEach((e=>this.enterQueueImmediately(e))),await this.enterQueue(e),s.forEach((e=>this.leaveQueue(e))),t-=await this.delay(t,null,e),this.leaveQueue(e)}}class ke extends _e{async script(){const e=this.simulation;this.priority=1,await this.preempt(e.qRepairMan,e.serviceOverhaul.sample(),[e.qAllJobs,e.qOverhaulJobs])}}class Ee extends _e{async script(){const e=this.simulation;this.priority=2,await this.preempt(e.qRepairMan,e.serviceCustomer.sample(),[e.qAllJobs,e.qCustomerJobs])}}class Te extends _e{async script(){const e=this.simulation;this.priority=3,await this.preempt(e.qRepairMan,e.serviceOnTheSpot.sample(),[e.qAllJobs,e.qOnTheSpotJobs])}}class Me extends S{async script(){const e=this.simulation;for(let t=!1;!t;)if(await this.enterQueue(e.m1),await this.delay(e.timeP1.sample()),this.leaveQueue(e.m1),await this.delay(e.timeInspection),t=Math.random()>.2,!t&&Math.random()>.4)return void e.cntRejected++;for(let t=!1;!t;)if(await this.enterQueue(e.m2),await this.delay(e.timeP2.sample()),this.leaveQueue(e.m2),await this.delay(e.timeInspection),t=Math.random()>.15,!t&&Math.random()>.4)return void e.cntRejected++;for(let t=!1;!t;)if(await this.enterQueue(e.m3),await this.delay(e.timeP3.sample()),this.leaveQueue(e.m3),await this.delay(e.timeInspection),t=Math.random()>.05,!t&&Math.random()>.4)return void e.cntRejected++;e.cntCompleted++,e.cntCompleted>=100&&(e.timeEnd=e.timeNow)}}class Ce extends S{async script(){const e=this.simulation;for(;;){let t=e.stock<=e.orderPoint?e.economicOrderQuantity:0;t?(await this.delay(e.leadTime),e.stock+=t):await this.delay(1)}}}class De extends S{async script(){const e=this.simulation;let t=Math.round(e.demand.sample());e.stock=Math.max(0,e.stock-t),e.dailyOrders.push(t),e.inventoryLevel.push(e.stock),e.stockTally.add(e.stock)}}class Pe extends S{async script(){const e=this.simulation,t=Math.round(e.orderSize.sample());if(t<=e.stock){this.enterQueueImmediately(e.qOrderTransit),e.stock-=t,this.enterQueueImmediately(e.qPacking),await this.enterQueue(e.qMachine),this.leaveQueue(e.qPacking);const s=2+10*t/60;await this.delay(s),this.leaveQueue(e.qMachine),this.leaveQueue(e.qOrderTransit),e.dispatched+=t}else e.stockOut+=t}}class ze extends S{constructor(){super(...arguments),this.makerDelay=new m(40,44)}async script(){const e=this.simulation;for(;;)await this.delay(this.makerDelay.sample()),e.stock+=60}}class Ae extends S{async script(){const e=this.simulation;await this.enterQueue(e.qReducers),await this.delay(e.timeReduce.sample()),this.leaveQueue(e.qReducers),e.reduced++,await this.enterQueue(e.qSpinners),await this.delay(e.timeSpin.sample()),this.leaveQueue(e.qSpinners),e.reduced--,e.spun++,await this.enterQueue(e.qWinders),await this.delay(e.timeWind.sample()),this.leaveQueue(e.qWinders),e.spun--,e.wound++}}class $e extends S{async script(){const e=this.simulation;for(;;)await this.delay(960),e.wound>=20&&(e.wound-=20)}}class Qe extends S{async script(){const e=this.simulation;for(;;)e.recReduced.push(e.reduced),e.recWound.push(e.wound),e.recSpun.push(e.spun),await this.delay(480)}}class Re extends S{async script(){const e=this.simulation,t=10*Math.round(e.orderSize.sample()),s=Math.floor(3*Math.random()),n=e.pumps[s],i=[6,5,7][s],a=2+.5*e.depot.pop+t/1e3*i;await this.enterQueue(e.depot),await this.enterQueue(n),await this.delay(a),this.leaveQueue(n),this.leaveQueue(e.depot),e.gallonsSold+=t}}class Le extends d{constructor(){super(...arguments),this._r1=new w(18),this._r2=new g([0,.45,1,1.5,2],[0,.2,.6,.85,1])}sample(){return this._r1.sample()/this._r2.sample()}}class Ie extends S{constructor(){super(...arguments),this.pumpReady=!1,this.baseplateReady=!1}async script(){const e=this.simulation;this.enterQueueImmediately(e.qOrders);const t=new Ne(this);e.activate(t);const s=new We(this);for(e.activate(s),await this.enterQueue(e.qBaseStation),await this.delay(e.obtainMotorDelay.sample()),this.leaveQueue(e.qBaseStation),await this.enterQueue(e.qPaintMotor),await this.delay(e.paintMotorDelay.sample()),this.leaveQueue(e.qPaintMotor);!this.pumpReady||!this.baseplateReady;)await this.waitSignal(this);await this.delay(e.testFittingDelay.sample()),await this.delay(e.trialAssemblyDelay),await this.delay(e.finalAssemblyDelay.sample()),this.leaveQueue(e.qOrders)}}class Ne extends S{constructor(e){super(),this.owner=e}async script(){const e=this.simulation;await this.enterQueue(e.qPumps),await this.delay(e.orderPumpDelay.sample()),this.leaveQueue(e.qPumps),await this.enterQueue(e.qPaintPump),await this.delay(e.paintPumpDelay.sample()),this.leaveQueue(e.qPaintPump),this.owner.pumpReady=!0,this.sendSignal(this.owner)}}class We extends S{constructor(e){super(),this.owner=e}async script(){const e=this.simulation;await this.enterQueue(e.qBaseplate),await this.delay(e.makeBaseplateDelay.sample()),this.leaveQueue(e.qBaseplate),await this.enterQueue(e.qGalvanize),await this.delay(e.galvanizeDelay.sample()),this.leaveQueue(e.qGalvanize),this.owner.baseplateReady=!0,this.sendSignal(this.owner)}}class Oe extends S{async script(){const e=this.simulation;this.enterQueueImmediately(e.qJobs),await this.enterQueue(e.qRobot),await this.delay(e.gripRelease.sample()),await this.delay(6),await this.delay(e.gripRelease.sample()),this.leaveQueue(e.qRobot),await this.enterQueue(e.qMachine1),await this.delay(e.machine1Process.sample()),this.leaveQueue(e.qMachine1),await this.enterQueue(e.qRobot),await this.delay(e.gripRelease.sample()),await this.delay(7),await this.delay(e.gripRelease.sample()),this.leaveQueue(e.qRobot),await this.enterQueue(e.qMachine2),await this.delay(e.machine2Process.sample()),this.leaveQueue(e.qMachine2),await this.enterQueue(e.qRobot),await this.delay(e.gripRelease.sample()),await this.delay(5),await this.delay(e.gripRelease.sample()),this.leaveQueue(e.qRobot),this.leaveQueue(e.qJobs)}}class Fe extends S{constructor(){super(...arguments),this.paperwork=!1,this.frame=!1,this.saddle=!1,this.handle=!1,this.wheel=!1,this.pedal=!1}async script(){const e=this.simulation;for(this.enterQueueImmediately(e.qTransit),e.activate(new Ge(this)),e.activate(new Xe(this)),e.activate(new Ve(this)),e.activate(new Be(this)),e.activate(new Ue(this)),e.activate(new je(this));!(this.frame&&this.saddle&&this.handle&&this.wheel&&this.pedal);)await this.waitSignal(this);for(await this.enterQueue(e.qAssemblers),await this.delay(e.assembleDelay.sample()),await this.delay(e.inspectAssemblyDelay.sample()),this.leaveQueue(e.qAssemblers);!this.paperwork;)await this.waitSignal(this);await this.enterQueue(e.qPackers),await this.delay(e.packDelay.sample()),this.leaveQueue(e.qPackers),this.leaveQueue(e.qTransit)}}class He extends S{constructor(e){super(),this.owner=e}}class Ge extends He{async script(){const e=this.simulation;await this.enterQueue(e.qFramers),await this.delay(e.makeFrameDelay.sample()),this.leaveQueue(e.qFramers),this.owner.frame=!0,this.sendSignal(this.owner)}}class Xe extends He{async script(){const e=this.simulation;await this.enterQueue(e.qSaddlers),await this.delay(e.getSaddleDelay.sample()),await this.delay(e.inspectPartDelay.sample()),this.leaveQueue(e.qSaddlers),this.owner.saddle=!0,this.sendSignal(this.owner)}}class Ve extends He{async script(){const e=this.simulation;await this.enterQueue(e.qHandlers),await this.delay(e.getHandleDelay.sample()),await this.delay(e.inspectPartDelay.sample()),this.leaveQueue(e.qHandlers),this.owner.handle=!0,this.sendSignal(this.owner)}}class Be extends He{async script(){const e=this.simulation;await this.enterQueue(e.qWheelers),await this.delay(e.getWheelsDelay.sample()),await this.delay(e.inspectPartDelay.sample()),this.leaveQueue(e.qWheelers),this.owner.wheel=!0,this.sendSignal(this.owner)}}class Ue extends He{async script(){const e=this.simulation;await this.enterQueue(e.qPedalers),await this.delay(e.getPedalsDelay.sample()),await this.delay(e.inspectPartDelay.sample()),this.leaveQueue(e.qPedalers),this.owner.pedal=!0,this.sendSignal(this.owner)}}class je extends He{async script(){const e=this.simulation;await this.enterQueue(e.qClerks),await this.delay(e.prepareInvoiceDelay.sample()),this.leaveQueue(e.qClerks),this.owner.paperwork=!0,this.sendSignal(this.owner)}}function Je(e,t,s,n=0){return`\n        <transform class='ss-queue ${e}' translation='${t} ${s} ${n}'>\n            <shape>\n                <appearance>\n                    <material diffuseColor='1 1 0' transparency='0.6'></material>\n                </appearance>\n                <sphere radius='4'></sphere>\n            </shape>\n        </transform>`}function Ye(e,t,s,n,i){return`<transform class='ss-car ${e}' translation='0 0 ${s/2}'>\n        <transform>\n            <shape> \x3c!-- body --\x3e\n                <appearance>\n                    <material diffuseColor='${i[0]} ${i[1]} ${i[2]}'></material>\n                </appearance>\n                <box size='${t} ${s} ${n}'></box>\n            </shape>\n            <shape render='false'> \x3c!-- 5 unit padding --\x3e\n                <box size='${1.1*t} ${1.1*s} ${1.1*n}'></box>\n            </shape>\n        </transform>\n        <transform translation='${.2*-t} 0 ${.5*+n}'>\n            <shape> \x3c!-- cabin --\x3e\n                <appearance>\n                    <material diffuseColor='${i[0]/3} ${i[1]/3} ${i[2]/3}'></material>\n                </appearance>\n                <box size='${.5*t} ${.75*s} ${n}'></box>\n            </shape>\n        </transform>\n        <transform translation='${-t/2+4} 0 -2'>\n            <shape> \x3c!-- front wheels --\x3e\n                <appearance>\n                    <material diffuseColor='0 0 0'></material>\n                </appearance>\n                <cylinder radius='3' height='${s+2}'></cylinder>\n            </shape>\n        </transform>\n        <transform translation='${+t/2-4} 0 -2'>\n            <shape> \x3c!-- rear wheels --\x3e\n                <appearance>\n                    <material diffuseColor='0 0 0'></material>\n                </appearance>\n                <cylinder radius='3' height='${s+2}'></cylinder>\n            </shape>\n        </transform>\n    </transform>`}Ke(new class extends T{constructor(){super(...arguments),this.lines=new D("Phone Lines",2),this.totalDuration=new D("Total Duration"),this.callArrival=new m(40,160),this.callDuration=new m(120,240)}onStarting(e){super.onStarting(e),this.totalDuration.grossDwell.setHistogramParameters(600,0,7200),this.generateEntities(ve,this.callArrival,200)}},"Telephone (GPSS)","<p>\n        A simple telephone system has two external lines.\n        Calls, which originate externally, arrive every 100±60 seconds.\n        When the line is occupied, the caller redials after 5±1 minutes have elapsed.\n        Call duration is 3±1 minutes.</p>\n    <p>\n        A tabulation of the distribution of the time each caller takes to make a\n        successful call is required.</p>\n    <ol>\n        <li>\n            How long will it take for 200 calls to be completed?\n            GPSS says <b>359.16</b> minutes,\n            SimScript says <b><span id='gpss-tel-total'>?</span></b> minutes.</li>\n        <li>\n            How long did it take callers to complete their calls?\n            GPSS says most calls were completed in less than <b>9.5</b> minutes,\n            but <i>many took much longer</i>.\n            SimScript says the average call took\n            <b><span id='gpss-tel-complete'>?</span></b> minutes.</li>\n        <li>\n            What is the utilization of the phone lines?\n            GPSS says the lines are utilized at <b>84%</b> of capacity,\n            SimScript says <b><span id='gpss-tel-utz'>?</span>%</b>.</li>\n    </ol>",((e,t)=>{Ze("#gpss-tel-total",a(e.timeNow/60)),Ze("#gpss-tel-complete",a(e.totalDuration.averageDwell/60)),Ze("#gpss-tel-utz",a(100*e.lines.utilization,0)),t.innerHTML=e.totalDuration.grossDwell.getHistogramChart("Call Duration (min)",1/60)})),Ke(new class extends T{constructor(){super(...arguments),this.stock=1e3,this.reorder=800,this.target=1e3,this.stockOuts=0,this.demand=new v(23)}onStarting(e){super.onStarting(e),this.stock=1e3,this.stockOuts=0,this.stockHistory=[];this.generateEntities(xe,1,200),this.generateEntities(Se,5,40)}getDemandQty(){return 40+this.demand.sample()}},"Inventory (GPSS)","<p>\n        A finished product inventory is controlled by means of a weekly\n        review system.\n        The initial stock is 1,000 units.\n        The daily demand varies between 40 and 63 units with equal probability.\n        The target inventory is 1,000 units, that is, the order is placed for the\n        difference between the current stock and 1,000 units.\n        If the current stock is 800 or more, no order is placed for that week.\n        The company operates a five-day week. The lead time for delivery of an\n        order is one week.</p>\n    <p>\n        Simulate the inventory system for 200 days and determine if any stockouts occur.\n        GPSS says there won't be any. SimScript says there will be\n        <b><span id='gpss-inv-stockout'>?</span></b>.</p>",((e,t)=>{Ze("#gpss-inv-stockout",a(e.stockOuts,0)),t.innerHTML=tt("Stock",{data:e.stockHistory,color:"green"})})),Ke(new class extends T{constructor(){super(...arguments),this.qRepairMan=new D("RepairMan",1),this.qAllJobs=new D("Wait All Jobs"),this.qOverhaulJobs=new D("Wait Overhaul Jobs"),this.qOnTheSpotJobs=new D("Wait On-The-Spot Jobs"),this.qCustomerJobs=new D("Wait Customer Jobs"),this.interArrOverhaul=new m(1920,2880),this.serviceOverhaul=new m(540,660),this.interArrOnTheSpot=new m(80,100),this.serviceOnTheSpot=new m(10,20),this.interArrCustomer=new m(240,360),this.serviceCustomer=new m(90,150)}onStarting(e){super.onStarting(e),this.timeEnd=24e3,this.generateEntities(ke,this.interArrOverhaul),this.generateEntities(Te,this.interArrOnTheSpot),this.generateEntities(Ee,this.interArrCustomer)}},"TV Repair Shop (GPSS)","<p>\n        A television shop employs a single repairman to overhaul its\n        rented television sets, service customers’ sets and do\n        on-the-spot repairs.</p>\n    <ul>\n        <li>\n            Overhaul of company owned television sets commences every 40±8\n            hours and takes 10±1 hours to complete.</li>\n        <li>\n            On-the-spot repairs, such as fuse replacement, tuning and\n            adjustments are done immediately. These arrive every 90±10 minutes\n            and take 15±5 minutes.</li>\n        <li>\n            Customers’ television sets requiring normal service arrive every\n            5±1 hours and take 120±30 minutes to complete.</li>\n    </ul>\n    <p>\n        Normal service of television sets has a higher priority than the \n        overhaul of company owned, rented sets; on-the-spot repairs have\n        the highest priority.</p>\n    <p>\n        After 50 days of operation, determine the following:</p>\n    <ol>\n        <li>\n            The repairman utilization. GPSS says <b>78%</b>,\n            SimScript says <b><span id='tv-utz'>?</span>%</b>.</li>\n        <li>\n            The average waiting times for each type of job.<br/>\n            GPSS says <b>12</b> min overall, <b>25</b> for overhaul jobs,\n            <b>51</b> for customer jobs, and <b>zero</b> for on-the-spot jobs;<br/>\n            SimScript says <b><span id='tv-wait'>?</span></b> min overall,\n            <b><span id='tv-wait-overhaul'>?</span></b> for overhaul jobs,\n            <b><span id='tv-wait-customer'>?</span></b> for customer jobs, and\n            <b><span id='tv-wait-ots'>?</span></b> for on-the-spot jobs.</li>\n    </ol>",((e,t)=>{t.innerHTML=e.getStatsTable(),Ze("#tv-utz",a(100*e.qRepairMan.utilization,0)),Ze("#tv-wait",a(e.qAllJobs.averageDwell,0)),Ze("#tv-wait-overhaul",a(e.qOverhaulJobs.averageDwell,0)),Ze("#tv-wait-customer",a(e.qCustomerJobs.averageDwell,0)),Ze("#tv-wait-ots",a(e.qOnTheSpotJobs.averageDwell,0))})),Ke(new class extends T{constructor(){super(...arguments),this.m1=new D("Machine 1",1),this.m2=new D("Machine 2",1),this.m3=new D("Machine 3",1),this.timeP1=new g([10,10,14,21,32,38,45],[0,.05,.18,.34,.56,.85,1]),this.timeP2=new m(9,21),this.timeP3=new q(24,4),this.timeInspection=2,this.cntCompleted=0,this.cntRejected=0}onStarting(e){super.onStarting(e),this.timeEnd=null,this.cntCompleted=0,this.cntRejected=0,this.generateEntities(Me,new w(30))}},"Quality Control (GPSS)","<p>\n        A component is manufactured by a sequence of three processes, \n        each followed by a short two minute inspection.</p>\n    <p>\n        The first process requires 20% of components to be reworked.\n        The second and third processes require 15% and 5% of components reworked.</p>\n    <p>\n        Sixty percent of components reworked are scrapped and the remaining forty\n        percent need reprocessing on the process from which they were rejected.</p>\n    <p>\n        Manufacturing of a new component commences on average, every 30 minutes,\n        exponentially distributed.</p>\n    <p>\n        Simulate the manufacturing processes for 100 completed components.\n        Determine the time taken\n        (GPSS says about <b>69</b> hours,\n        Simscript says <b><span id='qc-tm'>?</span></b> hours)\n        and the number of components rejected\n        (GPSS says <b>21</b>,\n        Simscript says <b><span id='qc-rejected'>?</span></b>).</p>",((e,t)=>{t.innerHTML=e.getStatsTable(),Ze("#qc-tm",a(e.timeNow/60,0)),Ze("#qc-rejected",a(e.cntRejected,0))})),Ke(new class extends T{constructor(){super(...arguments),this.stock=700,this.economicOrderQuantity=500,this.orderPoint=600,this.leadTime=5,this.demand=new m(40,63),this.stockTally=new C}onStarting(e){super.onStarting(e),this.stock=700,this.timeEnd=100,this.dailyOrders=[],this.inventoryLevel=[],this.stockTally.reset(),this.generateEntities(Ce),this.generateEntities(De,1)}},"Order Point (GPSS)","<p>\n        An inventory system is controlled by an order point, set at 600 units,\n        and an economic order quantity of 500 units.</p>\n    <p>\n        The initial stock quantity is 700. Daily demand is in the range 40 to 63\n        units, evenly distributed.\n        The lead-time from ordering to delivery of goods is one week (5 days).</p>\n    <p>\n        Simulate the inventory system for a period of 100 days.\n        Determine the distribution of inventory and the actual daily sales.</p>",((e,t)=>{t.innerHTML=tt("Demand and Inventory",{name:"Daily Orders",data:e.dailyOrders,color:"green"},{name:"Inventory",data:e.inventoryLevel,color:"blue"},{data:[e.stockTally.min,e.stockTally.min],color:"#d0d0d0"},{data:[e.stockTally.max,e.stockTally.max],color:"#d0d0d0"},{data:[e.stockTally.avg,e.stockTally.avg],color:"#d0d0d0"})+`\n            Minimum Inventory: <b>${a(e.stockTally.min,0)}</b> units.<br/>\n            Maximum Inventory: <b>${a(e.stockTally.max,0)}</b> units.<br/>\n            Average Inventory: <b>${a(e.stockTally.avg,0)}</b> units.<br/>\n        `})),Ke(new class extends T{constructor(){super(...arguments),this.interArrOrders=new w(15),this.orderSize=new g([6,6,12,18,24,30,36,48],[0,.1,.35,.65,.8,.92,.97,1]),this.qMachine=new D("Packing Machine",1),this.qPacking=new D("Packing Area"),this.qOrderTransit=new D("Order Transit"),this.capy=4e3,this.stock=1e3,this.stockOut=0,this.dispatched=0}onStarting(e){super.onStarting(e),this.stock=1e3,this.stockOut=0,this.dispatched=0,this.timeEnd=7200,this.qOrderTransit.grossDwell.setHistogramParameters(1,0,15),this.generateEntities(Pe,this.interArrOrders),this.activate(new ze)}},"Manufacturing (GPSS)","<p>\n        A manufacturing department of an electronics company makes digital\n        watches. In the dispatch department, the watches are packed by an\n        automatic packing machine, in display packets, in the quantities\n        ordered by retailers.</p>\n    <p>\n        The order size is given by an empirical function. The mean time\n        between order arrivals is 15 minutes, exponentially distributed.\n        The packing time per order is 120 seconds plus 10 seconds per watch\n        packed in the order.</p>\n    <p>\n        The manufacturing department produces the digital watches in lot\n        sizes of 60 units, in 40±5 minutes.</p>\n    <p>\n        Simulate 5 days of the company operation to provide the following\n        information:</p>\n    <ol>\n        <li>\n            The average number of orders waiting in the packing department.<br/>\n            GPSS says <b>0.12</b>,\n            SimScript says <b><span id='man-wait'>?</span></b> orders.</li>\n        <li>\n            The quantity of watches dispatched each day.<br/>\n            SimScript says <b><span id='man-dispatched'>?</span></b>\n            watches per day.</li>\n        <li>\n            The distribution of transit times of orders.\n            SimScript says orders take <b><span id='man-transit'>?</span></b>\n            minutes to process on average.</li>\n    </ol>",((e,t)=>{Ze("#man-wait",a(e.qPacking.averageLength,2)),Ze("#man-dispatched",a(e.dispatched/5,0)),Ze("#man-transit",a(e.qOrderTransit.averageDwell)),t.innerHTML=e.qOrderTransit.grossDwell.getHistogramChart("Order Transit Times (min)")})),Ke(new class extends T{constructor(){super(...arguments),this.qReducers=new D("Reducers",5),this.qSpinners=new D("Spinners",40),this.qWinders=new D("Winders",8),this.timeReduce=new m(36,40),this.timeSpin=new m(300,340),this.timeWind=new m(60,68),this.reduced=50,this.spun=25,this.wound=25}onStarting(e){super.onStarting(e),this.reduced=50,this.spun=25,this.wound=25,this.recReduced=[],this.recWound=[],this.recSpun=[],this.timeEnd=2400,this.generateEntities(Ae,20),this.activate(new $e),this.activate(new Qe)}},"Textile (GPSS)","<p>\n        A textile factory produces fine mohair yarn in three departments.\n        The first department draws and blends the raw material, in sliver form,\n        and reduces it to a suitable thickness for spinning, in 5 reducer frames.\n        The second department spins the yarn in one of 40 spinning frames.\n        The final process is in the winding department, where the yarn is wound\n        from spinning bobbins onto cones for dispatch.</p>\n    <p>\n        There are 8 winding frames to perform the winding operation.\n        The factory works 8 hours per day.\n        The unit of production is 10 kilograms of yarn.\n        Reducing frames produce one unit every 38±2 minutes, while the spinning \n        frames and winding frames produce one unit in 320±20 minutes and 64±4\n        minutes, respectively.</p>\n    <p>\n        The initial inventory of reduced material is 50 units, spun material\n        is 25 units and finished yarn is 25 units.\n        The finished material is dispatched, in a container of capacity 200\n        units, every two days.</p>\n    <ol>\n        <li>\n            Simulate the production process in the textile factory for 5 days.</li>\n        <li>\n            Find the distribution of the in-process inventories.</li>\n        <li>\n            Determine the utilization of each of the three types of machine.<br/>\n            GPSS says the utilization of reducers was about <b>39%</b>,\n            spinners <b>36%</b>, and winders <b>32%</b>.<br/>\n            SimScript says the utilization of\n            reducers was <b><span id='txt-utz-red'>?</span>%</b>,\n            spinners <b><span id='txt-utz-spin'>?</span>%</b>, and\n            winders <b><span id='txt-utz-wind'>?</span>%</b>.</li>\n    </ol>",((e,t)=>{Ze("#txt-utz-red",a(100*e.qReducers.utilization,0)),Ze("#txt-utz-spin",a(100*e.qSpinners.utilization,0)),Ze("#txt-utz-wind",a(100*e.qWinders.utilization,0)),t.innerHTML=tt("In-Process Inventories",{name:"Reduced",data:e.recReduced,color:"red"},{name:"Wound",data:e.recWound,color:"green"},{name:"Spun",data:e.recSpun,color:"blue"})+e.getStatsTable()})),Ke(new class extends T{constructor(){super(...arguments),this.depot=new D("depot",12),this.pumps=[new D("pumpA",1),new D("pumpB",1),new D("pumpC",1)],this.simulatedDays=5,this.orderSize=new m(300,500),this.interArrival=new Le,this.gallonsSold=0}onStarting(e){super.onStarting(e),this.timeEnd=24*this.simulatedDays*60,this.gallonsSold=0,this.generateEntities(Re,this.interArrival)}get gallonsSoldPerDay(){return this.gallonsSold/this.simulatedDays}},"Oil Depot (GPSS)",'<p>\n        An oil storage depot distributes three grades of fuel: a) home heating\n        oil, b) light industrial fuel oil, and c) diesel fuel for road vehicles.\n        There is one pump for each grade of fuel, and the demand for each is the same.\n        Orders for fuel oil vary between 3,000 and 5,000 gallons, in increments of 10\n        gallons, evenly distributed.</p>\n    <p>\n        The time required to fill fuel trucks is a function of the following:</p>\n    <ol>\n        <li>The order size.</li>\n        <li>The pumping rate (6, 5 and 7 minutes per 1,000 gallons).</li>\n        <li>The number of vehicles in the depot (30 seconds extra per vehicle).</li>\n        <li>A two-minute fixed setup time.</li>\n    </ol>\n    <p>\n        The depot can hold a maximum of twelve trucks.\n        The mean arrival rate of trucks is 18 minutes, modified by the following\n        function:</p>\n    <table>\n        <tr>\n            <td>Frequency</td>\n            <td>.20</td>\n            <td>.40</td>\n            <td>.25</td>\n            <td>.15</td>\n        </tr>\n        <tr>\n            <td>Ratio to mean</td>\n            <td>.45</td>\n            <td>.60</td>\n            <td>1.5</td>\n            <td>2.0</td>\n        </tr>\n    </table>\n    <p>\n        Simulate the operation of the oil storage depot for 5 days and find:</p>\n    <ul>\n        <li>\n            The distribution of transit times of trucks.<br/>\n            GPSS says the mean is about <b>35</b> min with\n            standard deviation <b>14</b> min.<br/>\n            SimScript says the mean is <b><span id="oil-mean">?</span></b> min and\n            standard deviation <b><span id="oil-std">?</span> min</b>.</li>\n        <li>\n            The total quantity of fuel sold each day.<br/>\n            GPSS says <b>109,490</b> gallons,\n            SimScript says <b><span id="oil-sales">?</span></b> gallons.</li>\n    </ul>',((e,t)=>{Ze("#oil-mean",a(e.depot.grossDwell.avg,0)),Ze("#oil-std",a(e.depot.grossDwell.stdev,0)),Ze("#oil-sales",a(e.gallonsSoldPerDay,0)),t.innerHTML=e.getStatsTable()})),Ke(new class extends T{constructor(){super(...arguments),this.qOrders=new D("Orders"),this.qBaseStation=new D("Base Station",1),this.qPumps=new D("Pumps",1),this.qBaseplate=new D("Baseplate",1),this.qPaintMotor=new D("Paint Motor",1),this.qPaintPump=new D("Paint Pump",1),this.qGalvanize=new D("Galvanize",1),this.orderArrivalInterval=new w(300),this.obtainMotorDelay=new m(100,300),this.orderPumpDelay=new m(60,300),this.makeBaseplateDelay=new m(60,100),this.testFittingDelay=new m(40,60),this.trialAssemblyDelay=60,this.finalAssemblyDelay=new m(120,180),this.paintMotorDelay=new m(80,120),this.paintPumpDelay=new m(90,150),this.galvanizeDelay=new m(90,150)}onStarting(e){super.onStarting(e),this.generateEntities(Ie,this.orderArrivalInterval,50)}},"Pump Assembly (GPSS)","<p>\n        A manufacturer makes centrifugal pump units which are assembled to\n        customer orders. The orders arrive on average, every 5 hours,\n        exponentially distributed.</p>\n    <p>\n        When the order arrives, two copies are made:</p>\n    <ol>\n        <li>\n            The original order is used to obtain a motor from stock and\n            prepare it for assembly (200±100 minutes).</li>\n        <li>\n            The first copy is used to order and adapt a pump\n            (180±120 minutes),</li>\n        <li>\n            The second copy is used to initiate the manufacture of the\n            baseplate (80±20 minutes).</li>\n    </ol>\n    <p>\n        When the pump and the baseplate are ready, a test fitting is\n        carried out (50±10 minutes).\n        All three components are assembled when they are available.\n        The unit is then dismantled, and the pump and motor are painted,\n        and the baseplate is galvanized.\n        Final assembly then takes place (150±30 minutes).</p>\n    <ol>\n        <li>\n            Investigate the utilization of the manufacturing facilities.</li>\n        <li>\n            Determine the transit times and delays, of customers’ orders.</li>\n        <li>\n            What Facility will be a bottleneck if orders increase significantly?</li>\n        <li>\n            Simulate the assembly of 50 motor-pump units.</li>\n    </ol>\n    <p>\n        GPSS says the facilities representing capital equipment have utilizations\n        from <b>31</b>% to <b>73%</b>.<br/>\n        SimScript says the utilizations range from\n        <b><span id='pump-utz-min'>?</span>%</b> to\n        <b><span id='pump-utz-max'>?</span>%</b>.</p>\n    <p>\n        GPSS says the mean order completion time was <b>878</b> min, with\n        a standard deviation of about <b>257</b> min.<br/>\n        SimScript says the mean value was\n        <b><span id='pump-tm-avg'>?</span></b> min, and the standard deviation was\n        <b><span id='pump-tm-std'>?</span></b> min.</p>\n    <p>\n        The pump station and the base station have the highest utilizations\n        (<b><span id='pump-utz-pump'>?</span>%</b> and <b><span id='pump-utz-base'>?</span>%</b>).\n        If all activity is increased proportionately, they will be the first to\n        saturate.</p>\n    ",((e,t)=>{const s=[];e.queues.forEach((e=>{1==e.capacity&&s.push(e.utilization)})),Ze("#pump-utz-min",a(100*Math.min(...s),0)),Ze("#pump-utz-max",a(100*Math.max(...s),0)),Ze("#pump-tm-avg",a(e.qOrders.grossDwell.avg,0)),Ze("#pump-tm-std",a(e.qOrders.grossDwell.stdev,0)),Ze("#pump-utz-pump",a(100*e.qPumps.utilization,0)),Ze("#pump-utz-base",a(100*e.qBaseStation.utilization,0)),t.innerHTML=e.getStatsTable()})),Ke(new class extends T{constructor(){super(...arguments),this.componentArrivalInterval=new w(150),this.gripRelease=new m(7,9),this.machine1Process=new q(60,10),this.machine2Process=new w(100),this.moveRobotDelay=6,this.qJobs=new D("Jobs"),this.qRobot=new D("Robot",1),this.qMachine1=new D("Machine 1",1),this.qMachine2=new D("Machine 2",1)}onStarting(e){super.onStarting(e),this.generateEntities(Oe,this.componentArrivalInterval,75)}},"Robot FMS (GPSS)","<p>\n        An experimental, robot operated, flexible manufacturing system has\n        two computer numerical control machine tools, an arrival area, and\n        a finished parts area.</p>\n    <p>\n        Components arrive every 150 seconds, exponentially distributed, and\n        are machined on both machines in sequence.</p>\n    <p>\n        The robot takes 8±1 seconds to grip or release components, and 6\n        seconds to move components from the arrival area to the first machine.\n        Processing time on the first machine is normally distributed, with a\n        mean of 60 seconds and a standard deviation of 10 seconds.</p>\n    <p>\n        The robot takes 7 seconds to move from the first machine to the second\n        machine. Machining time on the second machine is 100 seconds,\n        exponentially distributed.</p>\n    <p>\n        Finally, the robot takes 5 seconds to move components from the second\n        machine to the finished parts storage area.</p>\n    <p>\n        Simulate the manufacturing cell operation, for 75 completed parts,\n        and find:</p>\n    <ol>\n        <li>\n            The distribution of transit times of jobs.<br/>\n            GPSS says the mean time was <b>452</b> seconds, with a\n            standard deviation of around <b>251</b> seconds;<br/>\n            SimScript says <b><span id='fms-tm-mean'>?</span></b> and\n            <b><span id='fms-tm-std'>?</span></b> seconds.</li>\n        <li>\n            The utilization of the robot and the machine tools.<br/>\n            GPSS says the Robot, Machine 1, and Machine 2 had utilizations\n            of <b>36%</b>, <b>33%</b> and <b>64%</b>;<br/>\n            SimScript says\n            <b><span id='fms-utz-robot'>?</span>%</b>,\n            <b><span id='fms-utz-m1'>?</span>%</b>, and\n            <b><span id='fms-utz-m2'>?</span>%</b>.</li>\n        <li>\n            The maximum storage areas required in the cell.<br/>\n            GPSS says the maximum storage required totals <b>13</b>;<br/>\n            SimScript says <b><span id='fms-stg'>?</span></b>.</li>\n    </ol>",((e,t)=>{Ze("#fms-tm-mean",a(e.qJobs.grossDwell.avg,0)),Ze("#fms-tm-std",a(e.qJobs.grossDwell.stdev,0)),Ze("#fms-utz-robot",a(100*e.qRobot.utilization,0)),Ze("#fms-utz-m1",a(100*e.qMachine1.utilization,0)),Ze("#fms-utz-m2",a(100*e.qMachine2.utilization,0)),Ze("#fms-stg",a(e.qJobs.grossPop.max,0)),t.innerHTML=e.getStatsTable()})),Ke(new class extends T{constructor(){super(...arguments),this.qTransit=new D("Transit"),this.qClerks=new D("Clerks",2),this.qFramers=new D("Framers",3),this.qSaddlers=new D("Saddlers",1),this.qHandlers=new D("Handlers",1),this.qWheelers=new D("Wheelers",1),this.qPedalers=new D("Pedalers",1),this.qAssemblers=new D("Assemblers",4),this.qPackers=new D("Packers",3),this.prepareInvoiceDelay=new m(70,90),this.makeFrameDelay=new w(65),this.getSaddleDelay=new m(3,9),this.getHandleDelay=new m(2,6),this.getWheelsDelay=new m(2,4),this.getPedalsDelay=new m(4,6),this.inspectPartDelay=new m(2,4),this.inspectAssemblyDelay=new m(30,40),this.assembleDelay=new q(90,10),this.packDelay=new m(35,45)}onStarting(e){super.onStarting(e),this.timeEnd=2400,this.generateEntities(Fe,new m(40,60))}},"Bicycle Factory (GPSS)","<p>\n        A factory assembles bicycles employing the following staff: 2 clerks,\n        3 framers, 1 saddler, 1 handler, 1 wheeler, 1 pedaler, 4 assemblers,\n        and 3 packers.</p>\n    <p>\n        The company commences to assemble a bicycle every 50±10 minutes.\n        The clerical department prepares the delivery documents, instructions, \n        toolkit and invoice.</p>\n    <p>\n        Each department withdraws the component required for a particular order\n        from stock, inspects (3±1 minutes) and prepares it for assembly.\n        The frame is manufactured and takes 65 minutes, exponentially distributed.\n        When the components are available, they are assembled.\n        This takes on average 90 minutes, with a standard deviation of\n        10 minutes.</p>\n    <p>\n        When the delivery documents, toolkit, and the assembled bicycle are\n        ready, they are packed (40±5 minutes) in preparation for delivery.</p>\n    <p>\n        Simulate the bicycle factory assembly operation for 5 days and find:</p>\n    <ol>\n        <li>\n            The utilization of the staff in each department.<br/>\n            GPSS says the Clerks are busiest with a utilization of <b>78%</b>.<br/>\n            SimScript says their utilization is <b><span id='bike-clerk-utz'>?</span>%</b>.</li>\n        <li>\n            The transit times of customers’ orders.<br/>\n            GPSS says the average was <b>236</b> min with a standard deviation of <b>51</b> min.<br/>\n            SimScript says the average was <b><span id='bike-tm-mean'>?</span></b> min with a\n            <b><span id='bike-tm-std'>?</span></b> min standard deviation.</li>\n    </ol>",((e,t)=>{Ze("#bike-clerk-utz",a(100*e.qClerks.utilization,0)),Ze("#bike-tm-mean",a(e.qTransit.grossDwell.avg,0)),Ze("#bike-tm-std",a(e.qTransit.grossDwell.stdev,0)),t.innerHTML=e.getStatsTable()})),Ke(new class extends T{constructor(){super(...arguments),this.resource=new D("resource",1),this.q0=new D("Prty 0"),this.q1=new D("Prty 1"),this.q2=new D("Prty 2")}onStarting(){super.onStarting(),this.activate(new N({priority:0,start:0,duration:100})),this.activate(new W({priority:1,start:10,duration:10})),this.activate(new O({priority:2,start:12,duration:5}))}},"Preempt","<p>\n        Shows how to use interruptible delays to simulate pre-empting\n        resources.\n    </p>\n    <p>\n        The sample has three entity types, each with a different\n        priority, all competing for a single resource.\n    </p>"),Ke(new class extends T{constructor(e){super(e),this._tally=new C,this._sampleSize=1e3,this._seeded=!1,this._index=0,this.createRandomVars()}get seeded(){return this._seeded}set seeded(e){this._seeded=e,this.createRandomVars()}get sampleSize(){return this._sampleSize}set sampleSize(e){this._sampleSize=e}get randomVars(){return this._randomVars}get randomVar(){return this._randomVars[this._index]}get tally(){return this._tally}get randomVarIndex(){return this._index}set randomVarIndex(e){e!=this._index&&(this._index=e,this.start())}createRandomVars(){const e=this._seeded?1:null;this._randomVars=[{var:new d(e),name:"Uniform(0, 1)",binSize:.1},{var:new m(5,10,e),name:"Uniform(5, 10)",binSize:.5},{var:new p(5,6,10,e),name:"Triangular(5, 6, 10)",binSize:.5},{var:new g([5,8,10],[0,.8,1],e),name:"Empirical([5, 8, 10], [0, .8, 1])",binSize:.5},{var:new w(10,e),name:"Exponential(10)",binSize:20},{var:new q(10,2,!0,e),name:"Normal(10, 2)",binSize:2},{var:new b(10,2,e),name:"LogNormal(10, 2)",binSize:2},{var:new v(10,e),name:"RandomInt(10)",binSize:1},{var:new H(e),name:"EightEighty()",binSize:10},{var:new y(1,2,e),name:"Erlang(1, 2)",binSize:1},{var:new y(2,2,e),name:"Erlang(2, 2)",binSize:1},{var:new y(3,2,e),name:"Erlang(3, 2)",binSize:1},{var:new y(5,1,e),name:"Erlang(5, 1)",binSize:1},{var:new y(7,.5,e),name:"Erlang(7, 0.5)",binSize:1},{var:new y(9,1,e),name:"Erlang(9, 1)",binSize:1},{var:new y(1,1,e),name:"Erlang(1, 1)",binSize:1},{var:new f(1,2,e),name:"Gamma(1, 2)",binSize:1},{var:new f(2,2,e),name:"Gamma(2, 2)",binSize:1},{var:new f(3,2,e),name:"Gamma(3, 2)",binSize:1},{var:new f(5,1,e),name:"Gamma(5, 1)",binSize:1},{var:new f(9,.5,e),name:"Gamma(9, 0.5)",binSize:1},{var:new f(7.5,1,e),name:"Gamma(7.5, 1)",binSize:1},{var:new f(.5,1,e),name:"Gamma(0.5, 1)",binSize:1}]}onStarting(){super.onStarting(),this.createRandomVars(),this.activate(new F)}},"RandomVarTest Simulation","<p>\n        Shows how to create and use\n        <a href='https://en.wikipedia.org/wiki/Random_variable'>random variable</a>\n        objects.\n    </p>\n    <p>\n        Random variables are used to obtain values for inter-arrival times,\n        service times, and other non-deterministic values.\n    </p>\n    <p>\n        Random variables may specify seed values, which cause the variable to\n        produce repeatable streams of random values. If a seed value is not\n        specified, then each run produces a different stream of random values.\n    </p>",((e,t)=>{t.innerHTML=`\n            <label>\n                Type:\n                <select id='rand-type'>${function(){let t="";return e.randomVars.forEach(((s,n)=>{t+=`<option ${n==e.randomVarIndex?"selected":""}>\n                    ${s.name}\n                </option>`})),t}()}</select>\n            </label>\n            <label>\n                Sample size:\n                <input id='rand-size' type='range' data='size' min='10' max='100000'>\n            </label>\n            <label>\n                Seeded:\n                <input id='rand-seeded' type='checkbox'>\n            </label>\n            <ul>\n                <li>Count:\n                    <b>${a(e.tally.cnt,0)}</b>\n                </li>\n                <li>Average:\n                    <b>${a(e.tally.avg)}</b>\n                </li>\n                <li>Standard Deviation:\n                    <b>${a(e.tally.stdev)}</b>\n                </li>\n                <li>Variance:\n                    <b>${a(e.tally.var)}</b>\n                </li>\n                <li>Min:\n                    <b>${a(e.tally.min)}</b>\n                </li>\n                <li>Max:\n                    <b>${a(e.tally.max)}</b>\n                </li>\n            </ul>`+e.tally.getHistogramChart(e.randomVar.name),o("rand-type",e.randomVarIndex,(t=>e.randomVarIndex=t)),o("rand-size",e.sampleSize,(t=>e.sampleSize=t)," samples"),o("rand-seeded",e.seeded,(t=>e.seeded=t))})),Ke(new class extends T{constructor(e){super(e),this.qMulti=new D("MultiServer",10),this.qMultiWait=new D("MultiServerWait"),this.qSingle=[],this.qSingleWait=new D("SingleServerWait"),this.qSingleNC=[],this.qSingleWaitNC=new D("SingleServerWaitNC"),this.interArrival=new w(10),this.service=new w(80);for(let t=0;t<10;t++)this.qSingle.push(new D(`Single(${t})`,1)),this.qSingleNC.push(new D(`SingleNC(${t})`,1))}onStarting(){super.onStarting(),this.generateEntities(te,this.interArrival),this.generateEntities(se,this.interArrival),this.generateEntities(ne,this.interArrival)}}({timeEnd:1e5}),"MultiServer Simulation","<p>\n        Single resource with multiple servers versus\n        multiple resources with a single server.\n    </p>",((e,t)=>{let s=0;e.qSingle.forEach((e=>{s+=e.grossPop.avg/e.capacity})),s/=e.qSingle.length;let n=0;e.qSingleNC.forEach((e=>{n+=e.grossPop.avg/e.capacity})),n/=e.qSingleNC.length;const i=(e,t)=>`\n                <ul>\n                    <li>Utilization:\n                        <b>${a(100*e)}%</b>\n                    </li>\n                    <li>Count:\n                        <b>${a(t.totalCount,0)}</b> customers\n                    </li>\n                    <li>Average Wait:\n                        <b>${a(t.averageDwell)}</b> minutes\n                    </li>\n                    <li>Longest Wait:\n                        <b>${a(t.maxDwell)}</b> minutes\n                    </li>\n                    <li>Average Queue:\n                        <b>${a(t.averageLength)}</b> customers\n                    </li>\n                    <li>Longest Queue (95%):\n                        <b>${a(t.grossPop.avg+2*t.grossPop.stdev)}</b> customers\n                    </li>\n                    <li>Longest Queue:\n                        <b>${a(t.maxLength)}</b> customers\n                    </li>\n                </ul>\n            `;t.innerHTML=`\n            <h3>\n                Single Multi-Server Resource\n            </h3>\n            <p>\n                One queue (resource) with multiple servers.\n            </p>\n            ${i(e.qMulti.utilization,e.qMultiWait)}\n            <h3>\n                Multiple Single-Server Resources (Available Server, single-line)\n            </h3>\n            <p>\n                Multiple queues (resources) with a single server each.\n            </p>\n            <p>\n                Customers look for available servers as they arrive.\n                The results are the same as those for a single queue\n                with multiple servers.\n            </p>\n            ${i(s,e.qSingleWait)}\n            <h3>\n                Multiple Single-Server Resources (Random Server, multi-line)\n            </h3>\n            <p>\n                Multiple queues (resources) with a single server each.\n            </p>\n            <p>\n                Customers choose a server randomly when they arrive.\n                Even though the number of servers and service times\n                are the same, the load is not evenly distributed among\n                the servers, so queues and waits are longer.\n            </p>\n            ${i(n,e.qSingleWaitNC)}\n            <h3>\n                Stats\n            </h3>\n            ${e.getStatsTable(!0)}\n        `})),Ke(new class extends T{constructor(){super(...arguments),this.qJoe=new D("Joe",1),this.qWait=new D("Wait Area")}onStarting(){super.onStarting(),this.timeEnd=3360,this.qWait.grossDwell.setHistogramParameters(1),this.generateEntities(G,new m(12,24))}},"BarberShop Simulation","<p>\n        This is a classic\n        <a\n            href='https://try-mts.com/gpss-introduction-and-barber-shop-simulation/'\n        >GPSS simulation example</a>:\n        customers arrive at a barbershop,\n        wait until the barber is available, get serviced, and leave.\n    </p>",((e,t)=>{t.innerHTML=`<ul>\n            <li>Simulated time: <b>${a(e.timeNow/60,0)}</b> hours</li>\n            <li>Elapsed time: <b>${a(e.timeElapsed/1e3,2)}</b> seconds</li>\n            <li>Barber Utilization: <b>${a(100*e.qJoe.grossPop.avg)}%</b></li>\n            <li>Average Wait: <b>${a(e.qWait.grossDwell.avg)}</b> minutes</li>\n            <li>Longest Wait: <b>${a(e.qWait.grossDwell.max)}</b> minutes</li>\n            <li>Waiting chairs needed: <b>${a(e.qWait.grossPop.max,0)}</b></li>\n            <li>Customers Served: <b>${a(e.qJoe.grossDwell.cnt,0)}</b></li>\n        </ul>`+e.getStatsTable(!0)+e.qWait.grossDwell.getHistogramChart("Waiting Times (min)")})),Ke(new class extends T{constructor(){super(...arguments),this.qWait=new D("Wait"),this.qService=new D("Service",2),this.interArrival=new w(80),this.service=new w(100),this.tally=new C}onStarting(){super.onStarting(),this.interArrival=new w(this.interArrival.mean),this.service=new w(this.service.mean),this.qWait.grossPop.setHistogramParameters(1,0,10),this.qWait.grossDwell.setHistogramParameters(60,0,499.9),this.generateEntities(X,this.interArrival,1e5)}},"M/M/C Simulation","<p>\n        This is a classic\n        <a href='https://en.wikipedia.org/wiki/M/M/c_queue'>M/M/C queueing system</a>.\n        Entities arrive, are served by one of C servers, and leave.\n    </p>\n    <p>\n        This system is simple enough that there are formulas to calculate the\n        average queue length and waits (calculated values are shown in italics).\n    </p>",((e,t)=>{const s=1/e.interArrival.mean,n=1/e.service.mean,i=e.qService.capacity,r=s/n,l=r/i,h=1/(function(e,t){let s=0;for(let n=0;n<t;n++)s+=1/d(n)*Math.pow(e,n);return s}(r,i)+1/d(i)*Math.pow(r,i)*i*n/(i*n-s)),u=(Math.pow(r,i)*n*h/(d(i-1)*Math.pow(i*n-s,2))+1/n)*s-r,c=u/s;function d(e){let t=1;for(let s=2;s<=e;s++)t*=s;return t}t.innerHTML=`\n            <label>\n                Number of Servers:\n                <input id='mmc-capy' type='range' min='2' max='10'>\n            </label>\n            <label>\n                Mean inter-arrival time:\n                <input id='mmc-inter-arr' type='range' min='10' max='200'>\n            </label>\n            <label>\n                Mean service time:\n                <input id='mmc-service' type='range' min='10' max='200'>\n            </label>\n            <ul>\n                <li>Simulated time:\n                    <b>${a(e.timeNow/60,0)}</b> hours\n                </li>\n                <li>Elapsed time:\n                    <b>${a(e.timeElapsed/1e3,2)}</b> seconds\n                </li>\n                <li>Number of Servers:\n                    <b>${a(e.qService.capacity,0)}</b>\n                </li>\n                <li>Mean Inter-Arrival Time:\n                    <b>${a(e.interArrival.mean,0)}</b> minutes\n                </li>\n                <li>Mean Service Time:\n                    <b>${a(e.service.mean,0)}</b> minutes\n                </li>\n                <li>Server Utilization:\n                    <b>${a(e.qService.grossPop.avg/e.qService.capacity*100)}%</b>\n                    (<i>${a(100*l)}%</i>)\n                </li>\n                <li>Average Wait:\n                    <b>${a(e.qWait.grossDwell.avg)}</b>\n                    (<i>${a(c)})</i> minutes\n                </li>\n                <li>Average Queue:\n                    <b>${a(e.qWait.grossPop.avg)}</b>\n                    (<i>${a(u)}</i>) customers\n                </li>\n                <li>Longest Wait:\n                    <b>${a(e.qWait.grossDwell.max)}</b> minutes\n                </li>\n                <li>Longest Queue:\n                    <b>${a(e.qWait.grossPop.max,0)}</b> customers\n                </li>\n                <li>\n                    Customers Served: <b>${a(e.qService.grossDwell.cnt,0)}</b>\n                </li>\n            </ul>`,l>1&&(t.innerHTML+="<p class='error'>\n                ** The server utilization exceeds 100%; the system will not reach a steady-state **\n            </p>"),t.innerHTML+=`\n            ${e.qWait.grossPop.getHistogramChart("Queue lengths")}\n            ${e.qWait.grossDwell.getHistogramChart("Wait times (minutes)")}`,o("mmc-capy",e.qService.capacity,(t=>e.qService.capacity=t)," servers"),o("mmc-inter-arr",e.interArrival.mean,(t=>e.interArrival=new w(t))," seconds"),o("mmc-service",e.service.mean,(t=>e.service=new w(t))," seconds")})),Ke(new U,"Crosswalk Simulation","<p>\n        Simulates a crosswalk with a traffic light.\n    </p>\n    <p>\n        Shows how to use the <b>waitsignal</b> and <b>sendSignal</b> methods.\n    </p>",((e,t)=>{const s=e.cycle,n=(s.yellow+s.red)/(s.yellow+s.red+s.green)*(s.yellow+s.red)/2,i=(s.yellow+s.green)/(s.yellow+s.red+s.green)*(s.yellow+s.green)/2,r=s.yellow+s.red,l=s.yellow+s.green;t.innerHTML=`\n            <p>\n                Pedestrian light cycle times (seconds):\n            </p>\n            <label>\n                <span class='light red'></span>Red:\n                <input id='xwalk-red' type='range' min='0' max='120' >\n            </label>\n            <label>\n                <span class='light yellow'></span>Yellow:\n                <input id='xwalk-yellow' type='range' min='0' max='120' >\n            </label>\n            <label>\n                <span class='light green'></span>Green:\n                <input id='xwalk-green' type='range' min='0' max='120' >\n            </label>\n            <ul>\n                <li>Simulated time: <b>${a(e.timeNow/60/60)}</b> hours</li>\n                <li>Elapsed time: <b>${a(e.timeElapsed/1e3)}</b> seconds</li>\n                <li>\n                    Average Pedestrian Wait: <b>${a(e.qPedXing.grossDwell.avg)}</b>\n                    <i>(${a(n)})</i> seconds\n                </li>\n                <li>\n                    Longest Pedestrian Wait: <b>${a(e.qPedXing.grossDwell.max)}</b>\n                    <i>(${a(r)})</i> seconds\n                </li>\n                <li>\n                    Average Car Wait: <b>${a(e.qCarXing.grossDwell.avg)}</b>\n                    <i>(${a(i)})</i> seconds\n                </li>\n                <li>\n                    Longest Car Wait: <b>${a(e.qCarXing.grossDwell.max)}</b>\n                    <i>(${a(l)})</i> seconds\n                </li>\n                <li>Pedestrian Count: <b>${a(e.qPedXing.grossDwell.cnt,0)}</b></li>\n                <li>Car Count: <b>${a(e.qCarXing.grossDwell.cnt,0)}</b></li>\n            </ul>`+e.qPedXing.grossPop.getHistogramChart("Pedestrians waiting to cross")+e.qCarXing.grossPop.getHistogramChart("Cars waiting to cross"),o("xwalk-red",e.cycle.red,(t=>e.cycle.red=t)," seconds"),o("xwalk-yellow",e.cycle.yellow,(t=>e.cycle.yellow=t)," seconds"),o("xwalk-green",e.cycle.green,(t=>e.cycle.green=t)," seconds")})),Ke(new U({frameDelay:20}),"Animated Crosswalk Simulation","   <p>\n            This sample uses the same Crosswalk <b>Simulation</b> class\n            as shown earlier, with an added <b>Animation</b> object that\n            adds an animated pane to show the flow of entities through\n            the simulation.\n        </p>\n        <p>\n            The animation pane is a regular <code>&lt;div&gt;</code> element.\n            Queue positions are defined by elements in the animation element.\n            Entities in each queue and in transit between queues are shown\n            using <code>&lt;img&gt;</code> elements.\n        </p>\n        <p>\n            Animations are great for presenting simulations and can be useful\n            for debugging purposes.\n            Keeping them decoupled from the simulations keeps <b>SimScript</b>\n            simple and flexible.\n        </p>\n        <div class='ss-anim'>\n            <div class='time-now'>\n                Time: <span>0.00</span> hours\n            </div>\n            <div class='light'>\n                <div class='red'></div>\n                <div class='yellow'></div>\n                <div class='green'></div>\n            </div>\n\n            <div class='street'></div>\n            <div class='crosswalk'></div>\n\n            <div class='ss-queue car-arr'></div>\n            <div class='ss-queue car-xing'></div>\n            <div class='ss-queue car-xed'></div>\n\n            <div class='ss-queue ped-arr'></div>\n            <div class='ss-queue ped-xing'></div>\n            <div class='ss-queue ped-xed'></div>\n            <div class='ss-queue ped-leave'></div>\n        </div>\n    ",((e,t)=>{new z(e,t,{getEntityHtml:e=>e instanceof j?"<img class='ped' src='resources/blueped.png' width='15' height='19'>":"<img class='car' src='resources/redcar.png' width='55' height='19'>",queues:[{queue:e.qPedArr,element:".ss-queue.ped-arr"},{queue:e.qPedXing,element:".ss-queue.ped-xing",angle:-45,max:8},{queue:e.qPedXed,element:".ss-queue.ped-xed"},{queue:e.qPedLeave,element:".ss-queue.ped-leave"},{queue:e.qCarArr,element:".ss-queue.car-arr"},{queue:e.qCarXing,element:".ss-queue.car-xing",angle:0,max:16},{queue:e.qCarXed,element:".ss-queue.car-xed"}]});const s=t.querySelectorAll(".light div"),n=t.querySelector(".time-now span"),i=()=>{n.textContent=a(e.timeNow/3600);for(let t=0;t<s.length;t++)s[t].style.opacity=t==e.light?"1":""};e.timeNowChanged.addEventListener(i),e.stateChanged.addEventListener(i)})),Ke(new U({frameDelay:20}),"Animated Crosswalk Simulation (SVG)","   <p>\n            This sample uses the same Crosswalk <b>Simulation</b> class\n            as shown earlier, this time using an SVG-based animation.\n        </p>\n        <div class='svg ss-time-now'>\n            Time: <b><span>0.00</span></b> hours\n        </div>\n        <svg class='ss-anim' viewBox='0 0 1000 500'>\n            <g class='light'>\n                <rect class='light' x='47.5%' y='0%' width='5%' height='25%' rx='2%' />\n                <circle class='red' cx='50%' cy='5%' r='2%' />\n                <circle class='yellow' cx='50%' cy='12.5%' r='2%' />\n                <circle class='green' cx='50%' cy='20%' r='2%' />\n            </g>\n\n            <rect class='street' x='10%' y='50%' width='80%' height='20%' />\n            <rect class='crosswalk' x='45%' y='50%' width='10%' height='20%' />\n\n            <circle class='ss-queue car-arr' cx='10%' cy='60%' r='10' />\n            <circle class='ss-queue car-xing' cx='40%' cy='60%' r='10' />\n            <circle class='ss-queue car-xed' cx='90%' cy='60%' r='10' />\n\n            <circle class='ss-queue ped-arr' cx='10%' cy='85%' r='10' />\n            <circle class='ss-queue ped-xing' cx='50%' cy='75%' r='10' />\n            <circle class='ss-queue ped-xed' cx='50%' cy='45%' r='10' />\n            <circle class='ss-queue ped-leave' cx='90%' cy='35%' r='10' />\n        </svg>\n    ",((e,t)=>{new z(e,t,{getEntityHtml:e=>e instanceof j?"<g class='ped' fill='black' stroke='black' opacity='0.8' transform='scale(1,0.8)'>\n                        <circle cx='1%' cy='1%' r='0.5%' fill='orange' />\n                        <rect x='.4%' y='2%' width='1.3%' height='4%' fill='green' rx='0.7%' />\n                        <rect x='.66%' y='4%' width='.8%' height='3%' fill='blue' />\n                        <rect x='.4%' y='7%' width='1.3%' height='.75%' rx='0.5%' />\n                    </g>":"<g class='car' fill='black' stroke='black'>\n                        <rect x='1%' y='0' width='5%' height='4%' rx='1%' />\n                        <rect x='0' y='1.5%' width='9%' height='3%' fill='red' rx='0.5%' />\n                        <circle cx='1.5%' cy='4%' r='.9%' opacity='0.8' />\n                        <circle cx='7.5%' cy='4%' r='.9%' opacity='0.8' />\n                        <rect x='0' y='0' width='10%' height='1%' opacity='0' />\n                    </g>",queues:[{queue:e.qPedArr,element:"svg .ss-queue.ped-arr"},{queue:e.qPedXing,element:"svg .ss-queue.ped-xing",angle:-45,max:8},{queue:e.qPedXed,element:"svg .ss-queue.ped-xed"},{queue:e.qPedLeave,element:"svg .ss-queue.ped-leave"},{queue:e.qCarArr,element:"svg .ss-queue.car-arr"},{queue:e.qCarXing,element:"svg .ss-queue.car-xing",angle:0,max:16},{queue:e.qCarXed,element:"svg .ss-queue.car-xed"}]});const s=t.querySelectorAll(".light circle"),n=document.querySelector(".svg.ss-time-now span"),i=()=>{n.textContent=a(e.timeNow/3600);for(let t=0;t<s.length;t++)s[t].style.opacity=t==e.light?"1":""};e.timeNowChanged.addEventListener(i),e.stateChanged.addEventListener(i)})),Ke(new U({frameDelay:20}),"Animated Crosswalk Simulation (X3DOM)",`   <p>\n            This sample uses the same Crosswalk <b>Simulation</b> class\n            as shown earlier, this time using an X3DOM-based animation.\n        </p>\n        <div class='x3d ss-time-now'>\n            Time: <b><span>0.00</span></b> hours\n        </div>\n        <x3d class='ss-anim anim-host'> \n            <scene>\n\n                \x3c!-- default viewpoint --\x3e\n                <viewpoint\n                    position='0 -320 320'\n                    orientation='1 0 0 .8'\n                    centerOfRotation='0 0 -20'>\n                </viewpoint>\n\n                \x3c!-- ground --\x3e\n                <transform scale='300 150 .1' translation='0 0 -0.5'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='0.1 0.3 0.1' transparency='0.2'></material>\n                        </appearance>\n                        <box></box>\n                    </shape>\n                </transform>\n\n                \x3c!-- street --\x3e\n                <transform scale='250 50 .1'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='.95 .95 .95'></material>\n                        </appearance>\n                        <box></box>\n                    </shape>\n                </transform>\n\n                \x3c!-- crosswalk --\x3e\n                <transform scale='50 50 .1' translation='0 0 .1'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='.6 .6 .6'></material>\n                        </appearance>\n                        <box></box>\n                    </shape>\n                </transform>\n\n                \x3c!-- light --\x3e\n                <transform class='light'>\n                    <transform translation='0 120 25' rotation='1 0 0 1.57'>\n                        <shape> \x3c!-- post --\x3e\n                            <appearance> \n                                <material diffuseColor='.5 .5 .0'></material>\n                            </appearance>\n                            <cylinder height='50' radius='3'></cylinder>\n                        </shape>\n                        <transform translation='0 -21 0'>\n                            <shape> \x3c!-- bottom rim --\x3e\n                                <appearance> \n                                    <material diffuseColor='.5 .5 .0'></material>\n                                </appearance>\n                                <cylinder height='5' radius='15'></cylinder>\n                            </shape>\n                        </transform>\n                        <transform translation='0 55 0'>\n                            <shape> \x3c!-- box --\x3e\n                                <appearance> \n                                    <material diffuseColor='.5 .5 .0'></material>\n                                </appearance>\n                                <box size='22 65 20'></box>\n                            </shape>\n                        </transform>\n                        <transform translation='0 75 5'>\n                            <shape>\n                                <appearance> \n                                    <material class='light red' diffuseColor='1 0 0'></material>\n                                </appearance>\n                                <sphere radius='10'></sphere>\n                            </shape>\n                        </transform>\n                        <transform translation='0 55 5'>\n                            <shape>\n                                <appearance> \n                                    <material class='light yellow' diffuseColor='1 1 0'></material>\n                                </appearance>\n                                <sphere radius='10'></sphere>\n                            </shape>\n                        </transform>\n                        <transform translation='0 35 5'>\n                            <shape>\n                                <appearance> \n                                    <material class='light green' diffuseColor='0 1 0'></material>\n                                </appearance>\n                                <sphere radius='10'></sphere>\n                            </shape>\n                        </transform>\n                    </transform>\n                </transform>\n\n                \x3c!-- queues --\x3e\n                ${Je("car-arr",-250,0)}\n                ${Je("car-xing",-50,0)}\n                ${Je("car-xed",250,0)}\n                ${Je("ped-arr",-125,-100)}\n                ${Je("ped-xing",0,-75,5)}\n                ${Je("ped-xed",0,75,5)}\n                ${Je("ped-leave",250,100)}\n            </scene>\n        </x3d>\n    `,((e,t)=>{new z(e,t,{getEntityHtml:e=>e instanceof j?`<transform class='${"pedestrian"}'>\n        <transform>\n            <shape>\n                <appearance> \n                    <material diffuseColor='0 0 .5'></material>\n                </appearance>\n                <box size='5 5 8'></box>\n            </shape>\n            <shape render='false'> \x3c!-- padding --\x3e\n                <box size='7 10 8'></box>\n            </shape>\n        </transform>\n        <transform translation='0 0 8'>\n            <shape>\n                <appearance> \n                    <material diffuseColor='0 1 0'></material>\n                </appearance>\n                <box size='5 8 8'></box>\n            </shape>\n        </transform>\n        <transform translation='0 0 16'>\n            <shape>\n                <appearance> \n                    <material diffuseColor='.5 .5 0'></material>\n                </appearance>\n                <sphere radius='3'></sphere>\n            </shape>\n        </transform>\n    </transform>`:e.serial%2?Ye("car red",30,14,8,[1,0,0]):Ye("car green",25,12,8,[1,1,0]),queues:[{queue:e.qPedArr,element:"x3d .ss-queue.ped-arr"},{queue:e.qPedXing,element:"x3d .ss-queue.ped-xing",angle:-45,max:8},{queue:e.qPedXed,element:"x3d .ss-queue.ped-xed"},{queue:e.qPedLeave,element:"x3d .ss-queue.ped-leave"},{queue:e.qCarArr,element:"x3d .ss-queue.car-arr"},{queue:e.qCarXing,element:"x3d .ss-queue.car-xing",angle:0,max:16},{queue:e.qCarXed,element:"x3d .ss-queue.car-xed"}]});const s=t.querySelectorAll("material.light"),n=document.querySelector(".x3d.ss-time-now span"),i=()=>{n.textContent=a(e.timeNow/3600);for(let t=0;t<s.length;t++){const n=s[t];n.setAttribute("transparency",t==e.light?"0":"0.7"),n.closest("transform").setAttribute("scale",t==e.light?"1.1 1.1 1.1":".9 .9 .9")}};e.timeNowChanged.addEventListener(i),e.stateChanged.addEventListener(i)})),Ke(new K({maxTimeStep:.1}),"Animation Options (SVG)","   <p>\n            Change the animation parameters to see their effect:\n        </p>\n        <label>\n            Queue Angle\n            <input id='q-angle' type='range' min='0' max='360' step='15'>\n        </label>\n        <label>\n            Rotate Entities\n            <input id='rotate-ents' type='checkbox'>\n        </label>\n        <label>\n            Spline Tension\n            <input id='tension' type='range' min='0' max='1' step='.1'>\n        </label>\n        <label>\n            Max Time Step\n            <input id='max-step' type='range' min='0' max='1' step='.1'>\n        </label>\n        <label>\n            Frame Delay\n            <input id='frame-delay' type='range' min='0' max='250' step='10'>\n        </label>\n        <svg class='ss-anim' viewBox='0 0 1000 500'>\n\n            \x3c!-- one rotating queue --\x3e\n            <rect class='ss-queue rotate' x='98%' y='23%' width='4%' height='4%' />\n            <line x1='100%' y1='15%' x2='100%' y2='35%' stroke='black' />\n            <line x1='90%' y1='25%' x2='110%' y2='25%' stroke='black' />\n\n            \x3c!-- one queue at the center --\x3e\n            <rect class='ss-queue center' x='38%' y='48%' width='4%' height='4%' />\n\n            \x3c!-- twelve queues around it --\x3e\n            <rect class='ss-queue q1' x='58%' y='83%' width='4%' height='4%' />\n            <rect class='ss-queue q2' x='73%' y='68%' width='4%' height='4%' />\n            <rect class='ss-queue q3' x='78%' y='48%' width='4%' height='4%' />\n            <rect class='ss-queue q4' x='73%' y='28%' width='4%' height='4%' />\n            <rect class='ss-queue q5' x='58%' y='13%' width='4%' height='4%' />\n            <rect class='ss-queue q6' x='38%' y='8%' width='4%' height='4%' />\n            <rect class='ss-queue q7' x='18%' y='13%' width='4%' height='4%' />\n            <rect class='ss-queue q8' x='3%' y='28%' width='4%' height='4%' />\n            <rect class='ss-queue q9' x='-2%' y='48%' width='4%' height='4%' />\n            <rect class='ss-queue q10' x='3%' y='68%' width='4%' height='4%' />\n            <rect class='ss-queue q11' x='18%' y='83%' width='4%' height='4%' />\n            <rect class='ss-queue q12' x='38%' y='88%' width='4%' height='4%' />\n        </svg>\n    ",((e,t)=>{const s=new z(e,t,{rotateEntities:!0,getEntityHtml:e=>e instanceof ee?e.fast?"<polygon points='0 0, 40 0, 50 10, 40 20, 0 20' stroke='black' fill='yellow' opacity='0.5' />":"<polygon points='0 0, 20 0, 30 20, 20 40, 0 40' stroke='black' fill='red' opacity='0.5'/>":e.serial%2?"<polygon points='0 0, 40 0, 50 10, 40 20, 0 20' stroke='black' fill='blue' />":"<polygon points='0 0, 20 0, 30 20, 20 40, 0 40' stroke='black' fill='green' />",queues:[{queue:e.qRotate,element:"svg .ss-queue.rotate",angle:e.qAngle},{queue:e.qCenter,element:"svg .ss-queue.center"},{queue:e.q1,element:"svg .ss-queue.q1"},{queue:e.q2,element:"svg .ss-queue.q2"},{queue:e.q3,element:"svg .ss-queue.q3"},{queue:e.q4,element:"svg .ss-queue.q4"},{queue:e.q5,element:"svg .ss-queue.q5"},{queue:e.q6,element:"svg .ss-queue.q6"},{queue:e.q7,element:"svg .ss-queue.q7"},{queue:e.q8,element:"svg .ss-queue.q8"},{queue:e.q9,element:"svg .ss-queue.q9"},{queue:e.q10,element:"svg .ss-queue.q10"},{queue:e.q11,element:"svg .ss-queue.q11"},{queue:e.q12,element:"svg .ss-queue.q12"}]});o("q-angle",e.qAngle,(t=>{e.qAngle=t;let n=s.queues;n[0].angle=t,s.queues=n})),o("rotate-ents",s.rotateEntities,(e=>s.rotateEntities=e)),o("tension",e.splineTension,(t=>e.splineTension=t)),o("max-step",e.maxTimeStep,(t=>e.maxTimeStep=t)," sim time units"),o("frame-delay",e.frameDelay,(t=>e.frameDelay=t)," ms")})),Ke(new K({maxTimeStep:.1}),"Animation Options (A-Frame)","\n        <p>\n            This sample uses the same Crosswalk Simulation class as shown earlier,\n            this time using an <a href=\"https://aframe.io\">A-Frame-based</a> animation.\n        </p>\n        <p>\n            Change the animation parameters to see their effect:\n        </p>\n        <label>\n            Queue Angle\n            <input id='af-q-angle' type='range' min='0' max='360' step='15'>\n        </label>\n        <label>\n            Rotate Entities\n            <input id='af-rotate-ents' type='checkbox'>\n        </label>\n        <label>\n            Spline Tension\n            <input id='af-tension' type='range' min='0' max='1' step='.1'>\n        </label>\n        <label>\n            Max Time Step\n            <input id='af-max-step' type='range' min='0' max='1' step='.1'>\n        </label>\n        <label>\n            Frame Delay\n            <input id='af-frame-delay' type='range' min='0' max='250' step='10'>\n        </label>\n        <div class=\"anim-host\">\n            <a-scene embedded class='ss-anim'>\n\n                \x3c!-- mix-ins --\x3e\n                <a-assets>\n                    <a-mixin id='queue' geometry='radius:4' material='color:orange;opacity:0.3'></a-mixin>\n                    <a-mixin id='transparent' opacity='0.6' transparent='true'></a-mixin>\n                </a-assets>\n                \n                \x3c!-- camera --\x3e\n                <a-entity id='rig' position='0 -150 150' rotation='40 0 0'>\n                    <a-camera id='camera' far='50000' fov='80'></a-camera>\n                </a-entity>            \n\n                \x3c!-- camera\n                <a-entity id='rig' position='0 -200 50' rotation='70 0 0'>\n                    <a-camera id='camera' far='50000' fov='60' look-controls></a-camera>\n                </a-entity>            \n                --\x3e\n                \n                \x3c!-- add a light --\x3e\n                <a-entity light='type:directional; castShadow:true;' position='5 5 15'></a-entity>\n\n                \x3c!-- background --\x3e\n                <a-box position='0 0 -1' width='800' height='800' depth='1' color='#009FFF'></a-box>\n                <a-sky color='lightblue'></a-sky>\n\n                \x3c!-- one rotating queue --\x3e\n                <a-sphere class='ss-queue rotate' mixin='queue' position='100 100 20'></a-sphere>\n                \n                \x3c!-- one queue at the center --\x3e\n                <a-sphere class='ss-queue center' mixin='queue' position='0 0 20'></a-sphere>\n    \n                \x3c!-- twelve queues around it --\x3e\n                <a-sphere class='ss-queue q1' mixin='queue' position='50 87 0'></a-sphere>\n                <a-sphere class='ss-queue q2' mixin='queue' position='87 50  0'></a-sphere>\n                <a-sphere class='ss-queue q3' mixin='queue' position='100 0 0'></a-sphere>\n                <a-sphere class='ss-queue q4' mixin='queue' position='87 -50 0'></a-sphere>\n                <a-sphere class='ss-queue q5' mixin='queue' position='50 -87 0'></a-sphere>\n                <a-sphere class='ss-queue q6' mixin='queue' position='0 -100 0'></a-sphere>\n                <a-sphere class='ss-queue q7' mixin='queue' position='-50 -87 0'></a-sphere>\n                <a-sphere class='ss-queue q8' mixin='queue' position='-87 -50 0'></a-sphere>\n                <a-sphere class='ss-queue q9' mixin='queue' position='-100 0 0'></a-sphere>\n                <a-sphere class='ss-queue q10' mixin='queue' position='-87 50 0'></a-sphere>\n                <a-sphere class='ss-queue q11' mixin='queue' position='-50 87 0'></a-sphere>\n                <a-sphere class='ss-queue q12' mixin='queue' position='0 100 0'></a-sphere>\n            </a-scene>\n        </div>\n    ",((e,t)=>{const s=new z(e,t,{rotateEntities:!0,getEntityHtml:e=>e instanceof ee?e.fast?"<a-box width='16' height='8' depth='8' color='yellow' mixin='transparent'></a-box>":"<a-box width='8' height='16' depth='10' color='red' mixin='transparent'></a-box>":e.serial%2?"<a-box width='16' height='8' depth='8' color='green' mixin='transparent'></a-box>":"<a-box width='8' height='16' depth='10' color='blue' mixin='transparent'></a-box>",queues:[{queue:e.qRotate,element:"a-scene .ss-queue.rotate",angle:e.qAngle},{queue:e.qCenter,element:"a-scene .ss-queue.center"},{queue:e.q1,element:"a-scene .ss-queue.q1"},{queue:e.q2,element:"a-scene .ss-queue.q2"},{queue:e.q3,element:"a-scene .ss-queue.q3"},{queue:e.q4,element:"a-scene .ss-queue.q4"},{queue:e.q5,element:"a-scene .ss-queue.q5"},{queue:e.q6,element:"a-scene .ss-queue.q6"},{queue:e.q7,element:"a-scene .ss-queue.q7"},{queue:e.q8,element:"a-scene .ss-queue.q8"},{queue:e.q9,element:"a-scene .ss-queue.q9"},{queue:e.q10,element:"a-scene .ss-queue.q10"},{queue:e.q11,element:"a-scene .ss-queue.q11"},{queue:e.q12,element:"a-scene .ss-queue.q12"}]});o("af-q-angle",e.qAngle,(t=>{e.qAngle=t;let n=s.queues;n[0].angle=t,s.queues=n})," degrees"),o("af-rotate-ents",s.rotateEntities,(e=>s.rotateEntities=e)),o("af-tension",e.splineTension,(t=>e.splineTension=t)),o("af-max-step",e.maxTimeStep,(t=>e.maxTimeStep=t)," sim time units"),o("af-frame-delay",e.frameDelay,(t=>e.frameDelay=t)," ms")})),Ke(new K({maxTimeStep:.1}),"Animation Options (X3DOM)",`\n        <p>\n            This sample uses the same Crosswalk Simulation class as shown earlier,\n            this time using an <a href="https://www.x3dom.org/">X3DOM-based</a> animation.\n        </p>\n        <p>\n            Press 'A' to view <b>all</b> elements or 'R' to <b>reset</b> the viewpoint.\n        </p>\n        <p>\n            Change the animation parameters to see their effect:\n        </p>\n        <label>\n            Queue Angle\n            <input id='x3-q-angle' type='range' min='0' max='360' step='15'>\n        </label>\n        <label>\n            Rotate Entities\n            <input id='x3-rotate-ents' type='checkbox'>\n        </label>\n        <label>\n            Spline Tension\n            <input id='x3-tension' type='range' min='0' max='1' step='.1'>\n        </label>\n        <label>\n            Max Time Step\n            <input id='x3-max-step' type='range' min='0' max='1' step='.1'>\n        </label>\n        <label>\n            Frame Delay\n            <input id='x3-frame-delay' type='range' min='0' max='250' step='10'>\n        </label>\n\n        <x3d class='ss-anim anim-host'> \n            <scene>\n\n                \x3c!-- default viewpoint --\x3e\n                <viewpoint\n                    position='0 -200 180'\n                    orientation='1 0 0 .75'\n                    centerOfRotation='0 0 -20'>\n                </viewpoint>\n\n                \x3c!-- background --\x3e\n                <transform scale='150 150 0.1'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='0 .9 1'></material>\n                        </appearance>\n                        <box></box>\n                    </shape>\n                </transform>\n\n                \x3c!-- one rotating queue --\x3e\n                ${Je("rotate",100,100,20)}\n                \n                \x3c!-- one queue at the center --\x3e\n                ${Je("center",0,0,20)}\n    \n                \x3c!-- twelve queues around it --\x3e\n                ${Je("q1",50,87)}\n                ${Je("q2",87,50)}\n                ${Je("q3",100,0)}\n                ${Je("q4",87,-50)}\n                ${Je("q5",50,-87)}\n\n                ${Je("q6",0,-100)}\n                ${Je("q7",-50,-87)}\n                ${Je("q8",-87,-50)}\n                ${Je("q9",-100,0)}\n                ${Je("q10",-87,50)}\n                ${Je("q11",-50,87)}\n                ${Je("q12",0,100)}\n            </scene>\n        </x3d>\n    `,((e,t)=>{const s=new z(e,t,{rotateEntities:!0,getEntityHtml:e=>e instanceof ee?e.fast?Ye("yellow",30,10,4,[1,1,0]):Ye("red",20,8,4,[1,0,0]):e.serial%2?Ye("green",30,10,4,[0,1,0]):Ye("blue",20,8,4,[0,0,1]),queues:[{queue:e.qRotate,element:"x3d .ss-queue.rotate",angle:e.qAngle},{queue:e.qCenter,element:"x3d .ss-queue.center"},{queue:e.q1,element:"x3d .ss-queue.q1"},{queue:e.q2,element:"x3d .ss-queue.q2"},{queue:e.q3,element:"x3d .ss-queue.q3"},{queue:e.q4,element:"x3d .ss-queue.q4"},{queue:e.q5,element:"x3d .ss-queue.q5"},{queue:e.q6,element:"x3d .ss-queue.q6"},{queue:e.q7,element:"x3d .ss-queue.q7"},{queue:e.q8,element:"x3d .ss-queue.q8"},{queue:e.q9,element:"x3d .ss-queue.q9"},{queue:e.q10,element:"x3d .ss-queue.q10"},{queue:e.q11,element:"x3d .ss-queue.q11"},{queue:e.q12,element:"x3d .ss-queue.q12"}]});o("x3-q-angle",e.qAngle,(t=>{e.qAngle=t;let n=s.queues;n[0].angle=t,s.queues=n})," degrees"),o("x3-rotate-ents",s.rotateEntities,(e=>s.rotateEntities=e)),o("x3-tension",e.splineTension,(t=>e.splineTension=t)),o("x3-max-step",e.maxTimeStep,(t=>e.maxTimeStep=t)," sim time units"),o("x3-frame-delay",e.frameDelay,(t=>e.frameDelay=t)," ms")})),Ke(new oe({maxTimeStep:.01}),"Network Intro (SVG)","   <p>\n            This sample uses a network to simulate an area with random service\n            requests and a fixed number of service vehicles.\n        </p>\n        <ul>\n            <li>\n                Red circles show service requests that happen at random locations\n                on the network.\n            </li>        \n            <li>\n                Green circles show service vehicles that looking for or traveling\n                to requests.\n            </li>        \n            <li>\n                Yellow circles show service vehicles servicing a request.\n            </li>\n        </ul>\n        <label>\n            Slow Mode\n            <input id='network-svg-slow' type='checkbox'>\n        </label>\n        <label>\n            Number of Service Vehicles: <b><span id='network-svg-nsvc'>0</span></b>\n        </label>\n        <label>\n            Server Utilization: <b><span id='network-svg-utz'>0</span>%</b>\n        </label>\n        <label>\n            Average Response Time: <b><span id='network-svg-wait'>0</span></b> seconds\n        </label>\n        <label>\n            Requests Served:\n            <b><span id='network-svg-served'>0</span></b>\n            /\n            <span id='network-svg-nreq'>0</span>\n        </label>\n        <label>\n            Requests Missed: <b><span id='network-svg-missed'>0</span></b>\n        </label>\n        <p></p>\n        <svg class='ss-anim anim-host'\n            viewbox='0 0 800 400'\n            fill='orange'\n            stroke='black'\n            stroke-width='1'\n            font-size='10'\n            text-anchor='middle'\n            dominant-baseline='middle'>\n        </svg>\n    ",((e,t)=>{!function(e,t,s=!0,n=!0,i=!1){const a="http://www.w3.org/2000/svg",r=(e,t)=>{for(let s in t)e.setAttribute(s,t[s].toString())};n&&e.links.forEach(((e,s)=>{if(s%2==0){const s=document.createElementNS(a,"line"),n=e.from.position,o=e.to.position;if(r(s,{class:"ss-link "+(e.id?"id"+e.id:""),x1:n.x,y1:n.y,x2:o.x,y2:o.y}),t.appendChild(s),i){const s=document.createElementNS(a,"circle"),i=(n.x+o.x)/2,l=(n.y+o.y)/2;r(s,{cx:i,cy:l,r:1,"stroke-width":0,fill:"white"}),t.appendChild(s);const h=document.createElementNS(a,"text");r(h,{x:i,y:l}),h.innerHTML=this.getLinkDistance(e).toFixed(0),t.appendChild(h)}}})),s&&e.nodes.forEach((e=>{const s=document.createElementNS(a,"circle"),n=e.position;r(s,{class:"ss-node "+(e.id?"id"+e.id:""),cx:n.x,cy:n.y,r:"2%"}),t.appendChild(s);const i=document.createElementNS(a,"text");r(i,{x:n.x,y:n.y,fill:"black",strokeWidth:0}),i.innerHTML=e.id,t.appendChild(i)}))}(e.network,t,!0,!0);const s=[];e.network.nodes.forEach((e=>{s.push({queue:e.queue,element:"svg .ss-node.id"+e.id,stackEntities:!0})})),new z(e,t,{animateToQueueEnd:!1,rotateEntities:!0,queues:s,getEntityHtml:e=>e instanceof he?`<g opacity='0.5'>\n                        <circle r='20' stroke='black' fill=${e.busy?"yellow":"green"} />\n                        <polygon\n                            stroke='none'\n                            fill=${e.busy?"none":"black"}\n                            points='20 0, -13 -18, -13 18' />\n                    </g>`:"<g opacity='0.5'>\n                        <circle r='30' fill='red'/>\n                    </g>"}),o("network-svg-slow",e.maxTimeStep>0,(t=>e.maxTimeStep=t?.01:0)),Ze("#network-svg-nsvc",a(e.serviceVehicles,0)),Ze("#network-svg-nreq",a(e.requests,0));const n=()=>{Ze("#network-svg-utz",a(100*e.qBusy.utilization,0)),Ze("#network-svg-wait",a(e.qWait.averageDwell,0)),Ze("#network-svg-served",a(e.requestsServed,0)),Ze("#network-svg-missed",a(e.requestsMissed,0))};e.requestFinished.addEventListener(n),e.stateChanged.addEventListener(n)})),Ke(new oe({maxTimeStep:.1}),"Network Intro (X3DOM)","   <p>\n            This sample uses a network to simulate an area with random service\n            requests and a fixed number of service vehicles.\n        </p>\n        <ul>\n            <li>\n                Red spheres show service requests that happen at random locations\n                on the network.\n            </li>        \n            <li>\n                Green service vehicles are looking for or traveling to requests.\n            </li>        \n            <li>\n                Yellow service vehicles are servicing a request.\n            </li>\n        </ul>\n        <label>\n            Slow Mode\n            <input id='network-x3d-slow' type='checkbox'>\n        </label>\n        <label>\n            Number of Service Vehicles: <b><span id='network-x3d-nsvc'>0</span></b>\n        </label>\n        <label>\n            Server Utilization: <b><span id='network-x3d-utz'>0</span>%</b>\n        </label>\n        <label>\n            Average Response Time: <b><span id='network-x3d-wait'>0</span></b> seconds\n        </label>\n        <label>\n            Requests Served:\n            <b><span id='network-x3d-served'>0</span></b>\n            /\n            <span id='network-x3d-nreq'>0</span>\n        </label>\n        <label>\n            Requests Missed: <b><span id='network-x3d-missed'>0</span></b>\n        </label>\n        <p></p>\n        <x3d class='ss-anim anim-host network'> \n            <scene>\n\n                \x3c!-- default viewpoint --\x3e\n                <viewpoint\n                    position='400 -80 700'\n                    orientation='1 0 0 0.36771'\n                    centerOfRotation='450 250 0'>\n                </viewpoint>\n\n                \x3c!-- background --\x3e\n                <transform translation='400 200 0'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='0 .5 .5'></material>\n                        </appearance>\n                        <box size='1200 800 .1'></box>\n                    </shape>\n                </transform>\n            </transform>                \n            </scene>\n        </x3d>\n    ",((e,t)=>{ue(e.network,t);const s=[];e.network.nodes.forEach((e=>{s.push({queue:e.queue,element:"x3d.network .ss-queue.q"+e.id,stackEntities:!0})})),new z(e,t,{queues:s,rotateEntities:!0,getEntityHtml:e=>e instanceof he?Ye("service",40,15,10,[e.busy?1:0,.5,0]):"<shape>\n                        <appearance>\n                            <material transparency='0.5' diffuseColor='1 0 0'/>\n                        </appearance>\n                        <sphere radius='40'></sphere>\n                    </shape>"}),o("network-x3d-slow",e.maxTimeStep>0,(t=>e.maxTimeStep=t?1:0)),Ze("#network-x3d-nsvc",a(e.serviceVehicles,0)),Ze("#network-x3d-nreq",a(e.requests,0));const n=()=>{Ze("#network-x3d-utz",a(100*e.qBusy.utilization,0)),Ze("#network-x3d-wait",a(e.qWait.averageDwell,0)),Ze("#network-x3d-served",a(e.requestsServed,0)),Ze("#network-x3d-missed",a(e.requestsMissed,0))};e.requestFinished.addEventListener(n),e.stateChanged.addEventListener(n)})),Ke(new class extends T{constructor(){super(...arguments),this.timeIncrement=2,this.totalCars=1e3,this.stripLength=1e3,this.carSpeeds=new m(40/3.6,100/3.6),this.interArrival=new w(20),this.qStrip=new D("strip"),this.carFinished=new n}onStarting(e){super.onStarting(e),this.maxTimeStep=this.timeIncrement,this.generateEntities(ce,this.interArrival,this.totalCars)}onCarFinished(e){this.carFinished.raise(this,e)}}({maxTimeStep:1e-4,frameDelay:50}),"Car Following","<p>\n        Simple car-following demo.\n    </p>\n    <p>\n        Cars are randomly generated and follow the car ahead, adjusting\n        their speed as needed to keep a safe headway (so they could\n        stop before hitting the car ahead).\n    </p>\n    <p>\n        The animation is not to scale, so the cars may appear to move\n        together too closely (the road strip is 1km long).\n    </p>\n    <p>\n        The simulation uses a simplified version of\n        <a href='https://en.wikipedia.org/wiki/Gipps%27_model'>Gipp's model</a>\n        to update the vehicle speeds at fixed time intervals.\n    </p>\n    <p>\n        This sample shows how to use the <b>getAnimationPosition</b>\n        method in the <b>Entity</b> class to customize queue\n        animations.\n    </p>\n    <label>\n        Vehicle Count:\n        <b><span id='carfollow-cnt'>0</span></b> / <span id='carfollow-tot'>0</span>\n    </label>\n    <label>\n        Max Speed:\n        <b><span id='carfollow-speed-max'>0</span></b> km/h\n    </label>\n    <label>\n        Min Speed:\n        <b><span id='carfollow-speed-min'>0</span></b> km/h\n    </label>\n    <label>\n        Average Speed:\n        <b><span id='carfollow-speed'>0</span></b> km/h\n    </label>\n    <svg class='anim-host ss-anim car-follow' viewBox='0 0 1000 500'>\n        <line class='strip'\n            x1='0%' y1='90%'\n            x2='100%' y2='10%'\n            stroke='lightgrey'\n            stroke-width='5%' />\n        <circle class='strip-start' cx='0%' cy='90%' r='1%' fill='orange' opacity='0.5' />\n        <circle class='strip-end' cx='100%' cy='10%' r='1%' fill='orange' opacity='0.5' />\n    </svg>",((e,t)=>{const s=["red","green","blue","white"];new z(e,t,{rotateEntities:!0,queues:[{queue:e.qStrip,element:".strip-start",endElement:".strip-end"}],getEntityHtml:e=>`<g>\n                    <polygon\n                        stroke-width='1'\n                        stroke='black'\n                        fill='${s[e.serial%s.length]}'\n                        points='0 0, 40 0, 42 3, 42 17, 40 20, 0 20' />\n                    <polygon\n                        fill='black'\n                        points='20 2, 30 2, 30 18, 20 18' />\n                </g>`}),Ze("#carfollow-tot",a(e.totalCars,0)),Ze("#carfollow-speed-max",a(3.6*e.carSpeeds.max,0)),Ze("#carfollow-speed-min",a(3.6*e.carSpeeds.min,0));const n=()=>{const t=e.qStrip.averageDwell,s=e.stripLength;Ze("#carfollow-cnt",a(e.qStrip.totalCount,0)),Ze("#carfollow-speed",a(t?s/t*3.6:0,0))};e.carFinished.addEventListener(n),e.stateChanged.addEventListener(n)})),Ke(new class extends T{constructor(){super(...arguments),this.timeIncrement=1,this.totalCars=1e3,this.carSpeeds=new m(40/3.6,100/3.6),this.interArrival=new w(15),this.network=function(e,t,s){const n=[];for(let a=0;a<e;a++)for(let e=0;e<t;e++)n.push({id:n.length.toString(),position:{x:e*s,y:a*s},queue:new D});const i=[];for(let a=0;a<n.length;a++){const s=Math.floor(a/t),r=a%t;r<t-1&&(i.push({from:n[a],to:n[a+1],queue:new D}),i.push({from:n[a+1],to:n[a],queue:new D})),s<e-1&&a%2!=0&&(i.push({from:n[a],to:n[a+t],queue:new D}),i.push({from:n[a+t],to:n[a],queue:new D})),0==s&&0==r&&(i.push({from:n[a+1],to:n[a+t],queue:new D}),i.push({from:n[a+t],to:n[a+1],queue:new D})),0==s&&r==t-1&&(i.push({from:n[a-1],to:n[a+t],queue:new D}),i.push({from:n[a+t],to:n[a-1],queue:new D})),s==e-1&&0==r&&(i.push({from:n[a+1],to:n[a-t],queue:new D}),i.push({from:n[a-t],to:n[a+1],queue:new D})),s==e-1&&r==t-1&&(i.push({from:n[a-1],to:n[a-t],queue:new D}),i.push({from:n[a-t],to:n[a-1],queue:new D}))}return new me({nodes:n,links:i})}(5,9,100),this.rndNode=new v(this.network.nodes.length-1),this.stats={totalDistance:0,totalTime:0,carsDone:0},this.carFinished=new n}onStarting(e){this.stats.totalDistance=0,this.stats.totalTime=0,this.stats.carsDone=0,super.onStarting(e),this.generateEntities(de,this.interArrival,this.totalCars)}onCarFinished(e){this.carFinished.raise(this,e)}}({maxTimeStep:.001}),"Network Car Following (X3DOM)","<p>\n        Network-based car-following demo.\n    </p>\n    <p>\n        Cars are randomly generated travel from the first to the\n        last network nodes using a simple car-following model.\n    </p>\n    <p>\n        The animation is not to scale, so the cars may appear to move\n        together too closely (the network nodes are 100m apart).\n        But they may not overtake each other.\n    </p>\n    <p>\n        The simulation uses a simplified version of\n        <a href='https://en.wikipedia.org/wiki/Gipps%27_model'>Gipp's model</a>\n        to update the vehicle speeds at fixed time intervals.\n        It also accounts for congestion when calculating shortest paths.\n    </p>\n    <p>\n        This sample shows how to use the <b>getAnimationPosition</b>\n        method in the <b>Entity</b> class to customize queue\n        animations.\n    </p>\n    <label>\n        Slow Mode\n        <input id='carfollowing-slow' type='checkbox'>\n    </label>\n    <label>\n        Vehicle Count:\n        <b><span id='carfollowing-cnt'>0</span></b> / <span id='carfollowing-tot'>0</span>\n    </label>\n    <label>\n        Max Speed:\n        <b><span id='carfollowing-speed-max'>0</span></b> km/h\n    </label>\n    <label>\n        Min Speed:\n        <b><span id='carfollowing-speed-min'>0</span></b> km/h\n    </label>\n    <label>\n        Average Speed:\n        <b><span id='carfollowing-speed'>0</span></b> km/h\n    </label>\n        <p></p>\n        <x3d class='ss-anim anim-host car-following'> \n            <scene>\n\n                \x3c!-- default viewpoint --\x3e\n                <viewpoint\n                    position='400 -50 600'\n                    orientation='1 0 0 0.34'\n                    centerOfRotation='450 250 0'>\n                </viewpoint>\n\n                \x3c!-- background --\x3e\n                <transform translation='400 200 0'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='0 .5 .5'></material>\n                        </appearance>\n                        <box size='1200 800 .1'></box>\n                    </shape>\n                </transform>\n            </transform>                \n            </scene>\n        </x3d>\n    ",((e,t)=>{ue(e.network,t);const s=[];e.network.nodes.forEach((e=>{s.push({queue:e.queue,element:"x3d.car-following .ss-queue.q"+e.id})})),e.network.links.forEach((e=>{s.push({queue:e.queue,element:"x3d.car-following .ss-queue.q"+e.from.id,endElement:"x3d.car-following .ss-queue.q"+e.to.id})}));const n=[[1,0,0],[0,1,0],[0,0,1],[1,1,1]];new z(e,t,{queues:s,rotateEntities:!0,getEntityHtml:e=>Ye("car",25,10,6,n[e.serial%n.length])}),o("carfollowing-slow",e.maxTimeStep>0,(t=>e.maxTimeStep=t?.001:0)),Ze("#carfollowing-tot",a(e.totalCars,0)),Ze("#carfollowing-speed-max",a(3.6*e.carSpeeds.max,0)),Ze("#carfollowing-speed-min",a(3.6*e.carSpeeds.min,0));const i=()=>{const t=e.stats.totalTime,s=e.stats.totalDistance;Ze("#carfollowing-cnt",a(e.stats.carsDone,0)),Ze("#carfollowing-speed",a(t?s/t*3.6:0,0))};e.carFinished.addEventListener(i),e.stateChanged.addEventListener(i)}));function Ke(e,t,s,n){const i="&#9654; Run";let a=et(`\n        <div class='sim'>\n            <h2>\n                <button class='collapse'>+</button> ${t}\n            </h2>\n            <div class='body' style='display:none'>\n                <div class='intro'>\n                    ${s}\n                </div>\n                <button class='run'></button>\n                <div class='log'></div>\n            </div>\n        </div>`,document.body),r=a.querySelector("button.run"),o=a.querySelector("button.collapse"),l=a.querySelector(".body"),h=a.querySelector(".ss-anim"),u=a.querySelector("div.log");h&&n&&n(e,h),n||(n=()=>{u.innerHTML="",et(e.getStatsTable(),u)}),o.addEventListener("click",(e=>{if(l.offsetHeight)o.innerHTML="+",l.style.display="none";else{o.innerHTML="-",l.style.display="";l.querySelector("a-scene")&&window.dispatchEvent(new Event("resize"))}})),r.innerHTML=i,r.addEventListener("click",(t=>{c=0,e.state==k.Running?e.stop():(e.start(!!t.ctrlKey||null),u.style.display="")})),e.stateChanged.addEventListener((()=>{r.innerHTML=e.state==k.Running?"&#9632; Stop":i,d()}));let c=0;e.timeNowChanged.addEventListener((()=>{let e=Date.now();e-c>500&&(c=e,d())}));const d=()=>{u&&n&&!h&&n(e,u)}}function Ze(e,t,s){const n=document.querySelector(e);i(null!=n,(()=>`element '${e}' not found`)),s?n.innerHTML=t:n.textContent=t}function et(e,t){let s=document.createElement("div");return s.innerHTML=e,1==s.children.length&&(s=s.children[0]),t&&t.appendChild(s),s}function tt(e,...t){let s=null,n=null;t.forEach((e=>{n=Math.min(n,Math.min.apply(null,e.data)),s=Math.max(s,Math.max.apply(null,e.data))}));const i=s-n||1;let a="<svg xmlns='http://www.w3.org/2000/svg' class='ss-chart' fill='none'>";a+="<rect width='100%' height='100%' stroke='black' />";const r=10,o=10,l=10,h=10;t.forEach((e=>{if(e.data.length>1){a+=`<g stroke='${e.color||"black"}' stroke-width='${e.width||"2"}'>`,e.name&&(a+=`<title>${e.name}</title>`);for(let t=0;t<e.data.length-1;t++){const s=r+t/(e.data.length-1)*(100-r-o),u=100-h-(e.data[t]-n)/i*(100-l-h),c=r+(t+1)/(e.data.length-1)*(100-r-o),d=100-h-(e.data[t+1]-n)/i*(100-l-h);a+=`<line x1=${s.toFixed(1)}% y1=${u.toFixed(1)}% x2=${c.toFixed(1)}% y2=${d.toFixed(1)}% />`}a+="</g>"}})),e&&(a+=`<text x='50%' y='1em' text-anchor='middle' fill='black'>${e}</text>`);let u=10;return t.forEach((e=>{e.name&&(a+=`\n                <rect x='${r}%' y='${u}%' width='2.5%' height='1em' fill='${e.color||"black"}' />\n                <text x='${r+3}%' y='${u+1}%' fill='black' font-size='80%' dominant-baseline='hanging'>${e.name}</text>`,u+=10)})),a+="</svg>",a}Ke(new class extends T{constructor(){super(...arguments),this.timeIncrement=1,this.asteroidCount=8,this.asteroidInterval=new m(0,20),this.asteroidSpeed=new m(7.5,15),this.q=new D,this.sound=!0,this.won=!1,this.keydown=this._keydown.bind(this),this.touchstart=this._touchstart.bind(this),this.touchend=this._touchend.bind(this),this.missilesFiredChanged=new n,this.asteroidsDestroyedChanged=new n}onMissilesFiredChanged(e){this.missilesFiredChanged.raise(this,e)}onAsteroidsDestroyedChanged(e){this.asteroidsDestroyedChanged.raise(this,e)}onStarting(){super.onStarting(),Object.keys(ge).forEach((e=>{const t=ge[e];if(!pe[t]){const e=`https://bernardo-castilho.github.io/simscript/dist/resources/${t}`;pe[t]=new Audio(e)}})),this.ship=new fe,this.activate(this.ship),this.missilesFired=0,this.onMissilesFiredChanged(),this.asteroidsDestroyed=0,this.onAsteroidsDestroyedChanged(),this.generateEntities(be,this.asteroidInterval,this.asteroidCount),document.addEventListener("keydown",this.keydown),document.addEventListener("touchstart",this.touchstart,{passive:!1}),document.addEventListener("touchend",this.touchend)}onFinishing(){document.removeEventListener("keydown",this.keydown),document.removeEventListener("touchstart",this.touchstart),document.removeEventListener("touchend",this.touchend)}gameOver(e){this.won=e,this.q.entities.forEach((e=>e.done=!0)),setTimeout((()=>{this.play(e?ge.won:ge.lost)}),800)}play(e){if(this.sound){const t=pe[e];t.currentTime=0,t.play()}}_keydown(e){this.ship.keydown(e)}_touchstart(e){const t=e.target.closest("svg.asteroids");this._touch=t?e.touches[0]:null,this._touch&&e.preventDefault()}_touchend(e){if(e.target.closest("svg.asteroids")&&this._touch){const t=this._touch,s=e.changedTouches[0],n=30,i=s.clientX-t.clientX>n?"ArrowRight":t.clientX-s.clientX>n?"ArrowLeft":t.clientY-s.clientY>n?"ArrowUp":" ";this.ship.keydown(new KeyboardEvent("keydown",{key:i,shiftKey:!0}))}this._touch=null}}({frameDelay:50}),"Asteroids (SVG)","<p>\n        SimScript is not a game engine, but it can be used to create\n        simple games such as the classic Asteroids.\n    </p>\n    <p>\n        This sample shows how simulations can handle keyboard and\n        touch events, and perform collision tests.\n    </p>\n    <p>\n        To play, press the run button and use these keys:\n    </p>\n    <ul>\n        <li>\n            <code>LEFT/RIGHT</code> arrows to turn the ship\n            (or swipe left/right on touch devices).\n        </li>\n        <li>\n            <code>UP</code> arrow to accelerate\n            (or swipe up on touch devices).\n        </li>\n        <li>\n            <code>SPACE</code> bar to fire a missile\n            (or tap on touch devices).\n        </li>\n        <li>\n            <code>S</code> to toggle sound effects.\n        </li>\n    </ul>\n    <label>\n        Professional Mode:\n        <input id='pro-mode' type='checkbox'>\n    </label>\n    <label>\n        Missiles Fired:\n        <b><span id='missiles-fired'>0</span></b>\n    </label>\n    <label>\n        Asteroids Destroyed:\n            <b><span id='asteroids-destroyed'>0</span></b>\n            /\n            <span id='asteroids-cnt'>0</span>\n    </label>\n    <svg class='ss-anim anim-host asteroids' viewBox='0 0 1000 500'>\n        <radialGradient id='jetGradient' fx='1'>\n            <stop offset='0%' stop-color='yellow'/>\n            <stop offset='100%' stop-color='transparent'/>\n        </radialGradient>    \n        <circle class='ss-queue center' cx='50%' cy='50%' r='0'/>\n        <text class='game-over' x='50%' y='50%' fill='white' text-anchor='middle' font-size='36pt'>\n        </text>\n    </svg>",((e,t)=>{new z(e,t,{rotateEntities:!0,getEntityHtml:e=>{if(e instanceof fe)return`<g>\n                        <polygon\n                            fill='none'\n                            stroke='white'\n                            stroke-width='2'\n                            points='0 0, -20 30, 40 0, -20 -30' />\n                        <circle\n                            r='25'\n                            cx='-30'\n                            fill='url(#jetGradient)'\n                            opacity=${e.engineOn?"1":"0"} />\n                    </g>`;if(e instanceof qe)return"<g>\n                        <line\n                            x1='-10' y1='0' x2='10' y2='0'\n                            stroke='red'\n                            stroke-width='6' />\n                    </g>";if(e instanceof be){return`<g ${e.small?"transform='scale(0.5, 0.5)'":""}'>\n                        <polygon\n                            fill='none'\n                            stroke='white'\n                            stroke-width='2'\n                            points='0 49, 17 29, 41 24, 46 0, 29 -17, 21 -36, 0 -50, -20 -35, -26 -15, -53 0, -29 17, -27 46' />\n                    </g>`}throw"unknown entity type"},queues:[{queue:e.q,element:"svg.asteroids .ss-queue.center"}]}),o("pro-mode",!1,(t=>e.maxTimeStep=t?10:50)),Ze("#asteroids-cnt",a(e.asteroidCount,0));const s=()=>{Ze("#missiles-fired",a(e.missilesFired,0)),Ze("#asteroids-destroyed",a(e.asteroidsDestroyed,0))};e.asteroidsDestroyedChanged.addEventListener(s),e.missilesFiredChanged.addEventListener(s),e.stateChanged.addEventListener((()=>{s();t.querySelector(".game-over").innerHTML=e.state==k.Finished?"Game Over! You "+(e.won?"Won!!!":"Lost..."):""}))}));
