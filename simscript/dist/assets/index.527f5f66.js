var e=Object.defineProperty,t=Object.prototype.hasOwnProperty,s=Object.getOwnPropertySymbols,n=Object.prototype.propertyIsEnumerable,i=(t,s,n)=>s in t?e(t,s,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[s]=n,a=(e,a)=>{for(var r in a||(a={}))t.call(a,r)&&i(e,r,a[r]);if(s)for(var r of s(a))n.call(a,r)&&i(e,r,a[r]);return e};!function(e=".",t="__import__"){try{self[t]=new Function("u","return import(u)")}catch(s){const n=new URL(e,location),i=e=>{URL.revokeObjectURL(e.src),e.remove()};self[t]=e=>new Promise(((s,a)=>{const r=new URL(e,n);if(self[t].moduleMap[r])return s(self[t].moduleMap[r]);const o=new Blob([`import * as m from '${r}';`,`${t}.moduleMap['${r}']=m;`],{type:"text/javascript"}),l=Object.assign(document.createElement("script"),{type:"module",src:URL.createObjectURL(o),onerror(){a(new Error(`Failed to import: ${e}`)),i(l)},onload(){s(self[t].moduleMap[r]),i(l)}});document.head.appendChild(l)})),self[t].moduleMap={}}}("/assets/");class r{constructor(e,t){this.listener=e,this.self=t}}const o=class{};let l=o;l.empty=new o;class h{constructor(){this._listeners=[]}addEventListener(e,t){this._listeners.push(new r(e,t))}removeEventListener(e,t){const s=this._listeners;for(let n=0;n<s.length;n++){const i=s[n];if((i.listener==e||null==e)&&(i.self==t||null==t)&&(s.splice(n,1),t))break}}raise(e,t){this._listeners.forEach((s=>{s.listener.call(s.self,e,t)}))}}function c(e,t){if(!e)throw"function"==typeof t&&(t=t()),console.error(t),t}function u(e,t=2){return function(e){let t=d[e];t||(t=d[e]=new Intl.NumberFormat(navigator.language,{useGrouping:!0,minimumFractionDigits:e,maximumFractionDigits:e}));return t}(t).format(e)}const d={};function p(e,t,s,n="",i){const a=document.getElementById(e),r="checkbox"==a.type,o="range"==a.type||"number"==a.type,l=a instanceof HTMLSelectElement,h=e=>` ${u(e,null!=i?i:e==Math.round(e)?0:2)}${n}`;r?a.checked=t:l?a.selectedIndex=t:o?a.valueAsNumber=t:a.value=t;const c="range"==a.type?a.insertAdjacentElement("afterend",document.createElement("span")):null;c&&(c.textContent=h(a.valueAsNumber)),a.addEventListener("input",(e=>{c&&(c.textContent=h(a.valueAsNumber));const t=r?a.checked:l?a.selectedIndex:o?a.valueAsNumber:a.value;s(t)}))}function m(e,t){if(t)for(let s in t)c(s in e,`Property ${s} is not defined`),e[s]instanceof h?e[s].addEventListener(t[s]):e[s]=t[s]}function g(e){let t="string"==typeof e?document.querySelector(e):e;return c(t instanceof Element,"Element not found:"+e),t}function w(e,t,s){return null!=t&&e<t?t:null!=s&&e>s?s:e}class y{constructor(e=0,t=0,s=0){this.x=e,this.y=t,this.z=s}static clone(e){return{x:e.x,y:e.y,z:e.z}}static copy(e,t){return e.x=t.x,e.y=t.y,e.z=t.z,e}static distance(e,t){const s=e.x-t.x,n=e.y-t.y,i=e.z||0-t.z||0;return Math.sqrt(s*s+n*n+i*i)}static interpolate(e,t,s){return{x:e.x+(t.x-e.x)*s,y:e.y+(t.y-e.y)*s,z:(e.z||0)+(t.z||0-e.z||0)*s}}static angle(e,t,s=!1){const n=Math.atan2(t.y-e.y,t.x-e.x);return s?n:Math.round(180*n/Math.PI)}}class b{constructor(e){this._cnt=0,this._min=0,this._max=0,this._sum=0,this._sum2=0,this._histo=null,this._histoParms=null,m(this,e)}get min(){return this._min}get max(){return this._max}get cnt(){return this._cnt}get avg(){return this._cnt>0?this._sum/this._cnt:0}get var(){return this._cnt>0&&this._max>this._min?Math.max(0,(this._sum2-this._sum*this._sum/this._cnt)/this._cnt):0}get stdev(){return Math.sqrt(this.var)}add(e,t=1){if(c(t>=0,"tally weights must be >= 0"),(!this._cnt||e>this._max)&&(this._max=e),(!this._cnt||e<this._min)&&(this._min=e),this._cnt+=t,this._sum+=e*t,this._sum2+=e*e*t,this._histo){e=w(e,this._histoParms.min,this._histoParms.max);let s=Math.floor(e/this._histoParms.size),n=this._histo.get(s)||0;this._histo.set(s,n+t)}}getHistogram(){if(this._histo){const e=this._histo,t=Array.from(e.keys());t.sort(((e,t)=>e-t));for(let i=1;i<t.length;i++)t[i]>t[i-1]+1&&t.splice(i,0,t[i-1]+1);const s=this._histoParms.size;let n=t.map((t=>({from:t*s,to:(t+1)*s,count:e.get(t)||0})));if(n.length){const e=this._histoParms,t=e.min,s=e.max;null!=t&&n[0].from>this.min&&(n[0].from=this.min),null!=s&&n[n.length-1].to<this.max&&(n[n.length-1].to=this.max)}return n}return null}getHistogramChart(e="",t=1){const s=this.getHistogram();if(!s||!s.length)return"";let n=0;s.forEach((e=>n=Math.max(n,e.count)));const i=Math.round(1/s.length*100),a=this._histoParms.size<1?1:0;let r="";return s.forEach(((e,s)=>{const o=this.avg>=e.from&&this.avg<=e.to?' class="avg"':"",l=Math.round(e.count/n*100),h=s*i;r+=`<g${o}>\n                <title>${e.count} (${Math.round(e.count/this.cnt*100)}%)</title>\n                <rect\n                    ${o}\n                    x="calc(${h}% + 5px)"\n                    y="calc(${100-l}% - 1.2em)"\n                    width="calc(${i}% - 10px)"\n                    height="${l}%" />\n                <text\n                    ${o}\n                    x="${h+i/2}%"\n                    y="100%"\n                    text-anchor="middle"\n                    dominant-baseline="text-top">\n                    ${u(e.from*t,a)}-${u(e.to*t,a)}\n                </text>\n            </g>`})),`\n            <figure class="ss-histogram">\n                <figcaption>${e}</figcaption>\n                <svg width="100%" height="100%">\n                    ${r}\n                </svg>\n            </figure>`}setHistogramParameters(e,t=null,s=null){e?(c(e>0,"bin size must be positive"),c(null==t||null==s||t<=s,"histogram min must be <= max"),this._histoParms={size:e,min:t,max:s},this._histo=new Map):(this._histoParms=null,this._histo=null)}reset(){this._cnt=this._max=this._min=this._sum=this._sum2=0,this._histo&&this._histo.clear()}}class f{constructor(e="",t=null,s){this._sim=null,this._name="",this._capy=null,this._items=new Map,this._tmLastChange=0,this._inUse=0,this._totalIn=0,this._grossPop=new b,this._grossDwell=new b,this._netPop=new b,this._netDwell=new b,this._name=e,this._capy=t,m(this,s)}get name(){return this._name}set name(e){this._name=e}get capacity(){return this._capy}set capacity(e){this._capy=e}get unitsInUse(){return this._inUse}get pop(){return this._items.size}get totalIn(){return this._totalIn}get entities(){return this._entities||(this._entities=Array.from(this._items.keys())),this._entities}get items(){return this._items}get lastChange(){return this._tmLastChange}get grossPop(){return this._grossPop}get grossDwell(){return this._grossDwell}get netPop(){return this._netPop}get netDwell(){return this._netDwell}get utilization(){return this.capacity?this.grossPop.avg/this.capacity:0}get totalCount(){return this.grossDwell.cnt}get averageLength(){return this.grossPop.avg}get maxLength(){return this.grossPop.max}get averageDwell(){return this.grossDwell.avg}get maxDwell(){return this.grossDwell.max}canEnter(e=1){return null==this.capacity||this.unitsInUse+e<=this.capacity}add(e,t=1){let s=this._sim;null==s?(s=this._sim=e.simulation,s.queues.push(this),s.queues.sort(((e,t)=>e.name<t.name?-1:e.name>t.name?1:0)),this._tmLastChange=0):s!=e.simulation&&c(!1,"Queue already in use by another simulation"),c(null==this._items.get(e),(()=>e.toString()+" is already in queue"+this.name)),c(this.canEnter(t),"Queue does not have enough capacity"),this._updatePopTallies(),e._queues.set(this,!0),this._items.set(e,new v(e,t,s.timeNow)),this._inUse+=t,this._totalIn++;const n=this._entities;n&&n.push(e)}remove(e){const t=this._items.get(e);c(null!=t,(()=>"Entity "+e.toString()+" is not in queue "+this.toString())),this._updatePopTallies(),this._updateDwellTallies(t.timeIn),this._items.delete(e),e._queues.delete(this),this._inUse-=t.units;const s=this._entities;s&&s.splice(s.indexOf(e),1)}reset(){this._sim=null,this._inUse=0,this._totalIn=0,this._tmLastChange=0,this._entities=null,this._items.clear(),this._grossPop.reset(),this._grossDwell.reset(),this._netPop.reset(),this._netDwell.reset()}_updateTallies(){this._updatePopTallies();for(let e of this.items.values())this._updateDwellTallies(e.timeIn)}_updatePopTallies(){const e=this._inUse,t=this._sim.timeNow,s=t-this._tmLastChange;c(s>=0,"Time delta cannot be negative"),this._grossPop.add(e,s),e&&this._netPop.add(e,s),this._tmLastChange=t}_updateDwellTallies(e){const t=this._sim.timeNow-e;c(t>=0,"Dwell time cannot be negative"),this._grossDwell.add(t,1),t>0&&this._netDwell.add(t,1)}}class v{constructor(e,t,s){this._e=e,this._units=t,this._timeIn=s}get entity(){return this._e}get units(){return this._units}get timeIn(){return this._timeIn}}class q{constructor(e=null){this._seed=null,this._seed=e}sample(){if(null==this._seed)return Math.random();let e=this._seed+=1831565813;return e=Math.imul(e^e>>>15,1|e),e^=e+Math.imul(e^e>>>7,61|e),((e^e>>>14)>>>0)/4294967296}}class x extends q{constructor(e,t,s){super(s),c(t>=e,"max >= min"),this._min=e,this._max=t}get min(){return this._min}get max(){return this._max}sample(){return this._min+super.sample()*(this._max-this._min)}}class S extends q{constructor(e,t,s,n){super(n),c(e<=t&&t<=s,"min, mode, max should be in order"),this._min=e,this._peak=t,this._max=s}get min(){return this._min}get mode(){return this._peak}get max(){return this._max}sample(){const e=this._max-this._min,t=e>0?(this._peak-this._min)/e:0,s=super.sample();return s<=t?this._min+e*Math.sqrt(t*s):this._min+e*(1-Math.sqrt((1-t)*(1-s)))}}class _ extends q{constructor(e,t,s){super(s),c(t.length==e.length,"x and y arrays should have the same length");for(let n=1;n<t.length;n++)c(e[n]>=e[n-1]&&t[n]>=t[n-1],"x and y arrays should be in ascending order");c(0==t[0]&&1==t[t.length-1],"y values should range from zero to one"),this._xVals=e,this._yVals=t}get xVals(){return this._xVals}get yVals(){return this._yVals}sample(){const e=super.sample(),t=this._xVals,s=this._yVals;let n=0;for(;e>s[n]&&n<s.length;)n++;return 0==n?t[0]:t[n-1]+(e-s[n-1])*(t[n]-t[n-1])/(s[n]-s[n-1])}}class k extends q{constructor(e,t){super(t),c(e>0,"mean >= 0"),this._mean=e}get mean(){return this._mean}sample(){return-this._mean*Math.log(super.sample())}}class E extends k{constructor(e,t,s){c(Number.isInteger(e)&&e>0,"shape parameter must be an integer > 0."),super(t,s),this._shape=e}get shape(){return this._shape}get scale(){return this._mean}sample(){let e=0;for(let t=0;t<this._shape;t++)e+=super.sample();return e}}class T extends q{constructor(e,t,s){super(s),c(e>0,"shape parameter must be > 0."),this._shape=e,this._scale=t}get shape(){return this._shape}get scale(){return this._scale}sample(){const e=this._shape,t=this._scale;if(e>0&&e<1){const s=(Math.E+e)/Math.E;for(let n=0;n<1e3;n++){const n=s*super.sample();if(n<=1){const s=Math.pow(n,1/e);if(super.sample()<=Math.exp(-s))return t*s}else{const i=-Math.log((s-n)/e);if(super.sample()<=Math.pow(i,e-1))return t*i}}c(!1,"Possible infinite loop generating Gamma variable")}else{if(1==e)return-t*Math.log(super.sample());if(e>1)for(let s=0;;s++){const s=1/Math.sqrt(2*e-1),n=e-Math.log(4),i=e+1/s,a=4.5,r=1+Math.log(a),o=super.sample(),l=super.sample(),h=s*Math.log(o/(1-o)),c=e*Math.exp(h),u=o*o*l,d=n+i*h-c;if(d+r-a*u>=0||d>=Math.log(u))return t*c}}}}class M extends q{constructor(e,t,s=!0,n){super(n),this._positive=!0,c(t>=0,"std >= 0"),this._mean=e,this._std=t,this._positive=s}get mean(){return this._mean}get std(){return this._std}sample(){let e=this._n1;if(null!=e)this._n1=null;else{let t,s,n,i;do{t=2*super.sample()-1,s=2*super.sample()-1,n=t*t+s*s}while(n>1);i=Math.sqrt(-2*Math.log(n)/n),this._n1=t*i,e=s*i}let t=this._mean+this._std*e;return this._positive?Math.max(0,t):t}}class C extends M{constructor(e,t,s){const n=e*e,i=t*t;super(Math.log(n/Math.sqrt(n+i)),Math.sqrt(Math.log((n+i)/n)),!1,s),this._lnMean=e,this._lnStd=t}get mean(){return this._lnMean}get std(){return this._lnStd}sample(){return 0==this._lnMean?0:Math.pow(Math.E,super.sample())}}class P extends q{constructor(e,t){super(t),this._max=e}get max(){return this._max}sample(){return Math.floor(super.sample()*(this._max+1))}}const D=class{constructor(e){this._sim=null,this._queues=new Map,this._serial=0,this._prty=0,this._serial=D._serial++,m(this,e)}get simulation(){return this._sim}get serial(){return this._serial}get priority(){return this._prty}set priority(e){this._prty=e}async delay(e,t,s){return c(e>=0,"delays must be >= 0"),c(null==t||t.queues.length>1,"delay path should have at least two queues"),new R(this,{delay:e,path:t,signal:s}).promise}async enterQueue(e,t=1){return new R(this,{queue:e,units:t}).promise}enterQueueImmediately(e,t=1){e.add(this,t)}canEnterQueue(e,t=1){return e.canEnter(t)}async seize(e,t,s=null,n=null,i=1){for(s instanceof f&&(s=[s]);t>=.001;)null!=n&&this.sendSignal(n),null!=s&&s.forEach((e=>this.enterQueueImmediately(e,i))),await this.enterQueue(e,i),null!=s&&s.forEach((e=>this.leaveQueue(e))),t-=await this.delay(t,null,n),this.leaveQueue(e)}leaveQueue(e){e.remove(this)}async waitSignal(e){return new R(this,{signal:e}).promise}sendSignal(e,t){let s=this.simulation._fec,n=0;for(let i=0;i<s.length&&!(null!=t&&n>=t);i++){let t=s[i];t.options.signal==e&&(t.ready=!0,n++)}return n}getAnimationPosition(e,t,s){return null}dispose(){if(this._queues.size){let e=[];Array.from(this._queues.keys()).forEach((t=>e.push(t.name))),c(!1,(()=>`Entity finished script without leaving all queues: ${e.join(", ")}.`))}}toString(){return this._str||(this._str=this.constructor.name+"#"+this.serial.toString()),this._str}async script(){}};let A=D;A._serial=0;class z extends A{constructor(e,t,s,n,i){super(),this._type=e,this._interval=t,this._max=s,this._tmStart=n,this._tmEnd=i}async script(){const e=this.simulation,t=e.timeNow,s=this._interval;if(null!=this._tmStart&&t<this._tmStart&&await this.delay(this._tmStart-t),null!=s&&null==this._tmStart){const e=s instanceof q?s.sample():s;await this.delay(e/2)}for(let n=0;!(null!=this._max&&n>=this._max)&&!(null!=this._tmEnd&&e.timeNow>this._tmEnd);n++){const e=new this._type;if(c(e instanceof A,"Entity expected"),this.simulation.activate(e),null==s)break;{const e=s instanceof q?s.sample():s;await this.delay(e)}}}}var $,Q;(Q=$||($={}))[Q.Paused=0]="Paused",Q[Q.Finished=1]="Finished",Q[Q.Running=2]="Running";class L{constructor(e){this._fec=[],this._name="",this._timeUnit="Sim Time",this._tmNow=0,this._tmEnd=null,this._tmMaxStep=0,this._frameDelay=0,this._tmStart=0,this._tmElapsed=0,this._state=0,this._queues=[],this._lastYield=0,this._lastFrame=0,this._yieldInterval=250,this.starting=new h,this.started=new h,this.finishing=new h,this.finished=new h,this.stateChanging=new h,this.stateChanged=new h,this.timeNowChanging=new h,this.timeNowChanged=new h,m(this,e)}get name(){return this._name}set name(e){this._name=e}get timeUnit(){return this._timeUnit}set timeUnit(e){this._timeUnit=e}get state(){return this._state}get timeEnd(){return this._tmEnd}set timeEnd(e){this._tmEnd=e}get maxTimeStep(){return this._tmMaxStep}set maxTimeStep(e){this._tmMaxStep=e}get frameDelay(){return this._frameDelay}set frameDelay(e){this._frameDelay=e}get timeElapsed(){return 2==this._state?Date.now()-this._tmStart:this._tmElapsed}get timeNow(){return this._tmNow}get yieldInterval(){return this._yieldInterval}set yieldInterval(e){this._yieldInterval=e}async start(e=!1){e=e||0==this._fec.length,(2!=this.state||e)&&(e&&(this._queues.forEach((e=>e.reset())),this._fec=[],this._queues=[],this._setTimeNow(0),this.onStarting()),this._tmStart=Date.now(),this._setState(2),e&&this.onStarted(),this._step())}stop(){2==this.state&&(this._tmElapsed=Date.now()-this._tmStart,this._setState(0))}async activate(e){c(null==e.simulation,(()=>"Entity "+e.toString()+" is already active"));const t=this.timeNow;return e._sim=this,await e.script(),e.dispose(),e._sim=null,this.timeNow-t}generateEntities(e,t,s,n,i){const a=new z(e,t,s,n,i);this.activate(a)}get queues(){return this._queues}getStatsTable(e=!1){return'<table class="ss-stats">'+this._createSimulationReport()+this._createQueueReport("Populations","grossPop")+(e?this._createQueueReport("Net Populations","netPop"):"")+this._createQueueReport("Dwell Times","grossDwell")+(e?this._createQueueReport("Net Dwell Times","netDwell"):"")+"</table>"}onStarting(e=l.empty){this.starting.raise(this,e)}onStarted(e=l.empty){this.started.raise(this,e)}onFinishing(e=l.empty){this.finishing.raise(this,e)}onFinished(e=l.empty){this.finished.raise(this,e)}onStateChanging(e=l.empty){this.stateChanging.raise(this,e)}onStateChanged(e=l.empty){this.stateChanged.raise(this,e)}onTimeNowChanging(e=l.empty){this.timeNowChanging.raise(this,e)}onTimeNowChanged(e=l.empty){this.timeNowChanged.raise(this,e)}_setState(e){e!=this._state&&(this.onStateChanging(),this._state=e,this.onStateChanged())}_setTimeNow(e){e!=this._tmNow&&(this.onTimeNowChanging(),this._tmNow=e,this.onTimeNowChanged())}async _step(){if(2!=this._state)return;let e=await this._scanFec();if(null!=this._tmEnd&&this._tmNow>=this._tmEnd||e<0)return this._fec=[],this._tmElapsed=Date.now()-this._tmStart,this.queues.forEach((e=>e._updateTallies())),this.onFinishing(),this._setState(1),void this.onFinished();if(this.maxTimeStep&&this.maxTimeStep>0&&e>0&&(e=Math.min(e,this._tmNow+this.maxTimeStep)),e>0&&(this._setTimeNow(e),this.frameDelay)){const e=Date.now()-this._lastFrame;this.frameDelay>e&&await new Promise((t=>setTimeout(t,this.frameDelay-e))),this._lastFrame=Date.now()}const t=Date.now();t-this._lastYield>this._yieldInterval?(this._lastYield=t,requestAnimationFrame((()=>this._step()))):this._step()}async _scanFec(){let e=this._fec,t=0,s=null;for(let n=0;n<e.length;n++){let i=e[n];if(i.ready){e.splice(n,1),t++,await i.dispatch(),n=-1;continue}const a=i.timeDue;null!=a&&(null==s||s>a)&&(s=a)}return t>0?0:null==s?-1:s}_createSimulationReport(){return`\n            <tr>\n                <th colspan="2">${this.name||this.constructor.name}</th>\n            </tr>\n            <tr>\n                <th>Finish Time (${this.timeUnit})</th>\n                <td>${u(this.timeNow,0)}</td>\n            </tr>\n            <tr>\n                <th>Elapsed Time (s)</th>\n                <td>${u(this.timeElapsed/1e3)}</td>\n            <tr>`}_createQueueReport(e,t){const s=t.indexOf("Pop")>-1;let n=`<tr>\n                <th colspan="6">\n                    ${s?e:e+" ("+this.timeUnit+")"}\n                </th>\n            </tr>\n            <tr>\n                <th>Queue</th>\n                <th>Min</th>\n                <th>Avg</th>\n                <th>Max</th>\n                <th>StDev</th>\n                <th>${s?"Capy":"Cnt"}</th>\n                <th>${s?"Utz":""}</th>\n            </tr>`;return this.queues.forEach((e=>{if(e.name&&e.grossDwell.cnt){const i=e.capacity,a=e[t];n+=`<tr>\n                    <th>${e.name}</th>\n                    <td>${u(a.min)}</td>\n                    <td>${u(a.avg)}</td>\n                    <td>${u(a.max)}</td>\n                    <td>${u(a.stdev)}</td>\n                    <td>${s?null!=i?u(i,0):"*":u(a.cnt,0)}</td>\n                    <td>${s&&null!=i?u(100*e.utilization,0)+"%":""}</td>\n                </tr>`}})),n}}class R{constructor(e,t){this._e=e,this._ready=!1,this._options=t;let s=e.simulation,n=s._fec,i=n.length;for(;i>0&&n[i-1].e.priority<e.priority;)i--;n.splice(i,0,this),this._tmStart=s.timeNow,null!=t.delay&&(this._tmDue=s.timeNow+t.delay),null!=t.ready&&(this._ready=t.ready),this._promise=new Promise((e=>{this._resolve=e}))}get e(){return this._e}get options(){return this._options}get ready(){if(this._ready)return!0;const e=this.options;return!(!e.queue||!e.queue.canEnter(e.units))||null!=this._tmDue&&this._tmDue<=this._e.simulation.timeNow}set ready(e){this._ready=e}get timeStart(){return this._tmStart}get timeDue(){return this._tmDue}async dispatch(){const e=this._e,t=e.simulation,s=this._options,n=s.queue;if(n){const t=s.units;n.add(e,null!=t?t:1)}return await this._resolve(t.timeNow-this._tmStart)}get promise(){return this._promise}}let I=document.body;function N(e,t){let s=H(`\n        <div class='sample-group''>\n            <h1>\n                <button class='collapse'>-</button> ${e}\n            </h1>\n            <div class='body'>\n                <div class='intro'>\n                    ${t}\n                </div>\n                <div class='host'>\n                </div>\n            </div>\n        </div>`,document.body);I=s.querySelector(".host");const n=s.querySelector("button.collapse"),i=s.querySelector(".body");n.addEventListener("click",(e=>{i.offsetHeight?(n.innerHTML="+",i.style.display="none"):(n.innerHTML="-",i.style.display="")}))}function O(){I=document.body}function B(e,t,s,n){const i="&#9654; Run";e.name=t;let a=H(`\n        <div class='sim'>\n            <h2>\n                <button class='collapse'>+</button> ${t}\n            </h2>\n            <div class='body' style='display:none'>\n                <div class='intro'>\n                    ${s}\n                </div>\n                <button class='run'></button>\n                <div class='log'></div>\n            </div>\n        </div>`,I);const r=a.querySelector("button.collapse"),o=a.querySelector("button.run"),l=a.querySelector(".body"),h=a.querySelector(".ss-anim"),c=a.querySelector("div.log");h&&n&&n(e,h),n||(n=()=>{c.innerHTML="",H(e.getStatsTable(),c)}),r.addEventListener("click",(e=>{if(l.offsetHeight)r.innerHTML="+",l.style.display="none";else{r.innerHTML="-",l.style.display="";l.querySelector("a-scene")&&window.dispatchEvent(new Event("resize"))}})),o.innerHTML=i,o.addEventListener("click",(t=>{u=0,e.state==$.Running?e.stop():(e.start(!!t.ctrlKey||null),c.style.display="")})),e.stateChanged.addEventListener((()=>{o.innerHTML=e.state==$.Running?"&#9632; Stop":i,d()}));let u=0;e.timeNowChanged.addEventListener((()=>{let e=Date.now();e-u>500&&(u=e,d())}));const d=()=>{c&&n&&!h&&n(e,c)}}function W(e,t,s){const n=document.querySelector(e);c(null!=n,(()=>`element '${e}' not found`)),s?n.innerHTML=t:n.textContent=t}function H(e,t){let s=document.createElement("div");return s.innerHTML=e,1==s.children.length&&(s=s.children[0]),t&&t.appendChild(s),s}function F(e,...t){let s=null,n=null;t.forEach((e=>{n=Math.min(n,Math.min.apply(null,e.data)),s=Math.max(s,Math.max.apply(null,e.data))}));const i=s-n||1;let a="<svg xmlns='http://www.w3.org/2000/svg' class='ss-chart' fill='none'>";a+="<rect width='100%' height='100%' stroke='black' />";const r=10,o=10,l=10,h=10;t.forEach((e=>{if(e.data.length>1){if(a+=`<g stroke='${e.color||"black"}' stroke-width='${e.width||"3"}'>`,e.name){const t=Math.min.apply(null,e.data),s=Math.max.apply(null,e.data),n=t<s?` (min: ${u(t,0)}, max: ${u(s,0)})`:"";a+=`<title>\n                    ${e.name}${n}\n                </title>`}for(let t=0;t<e.data.length-1;t++){const s=r+t/(e.data.length-1)*(100-r-o),c=100-h-(e.data[t]-n)/i*(100-l-h),u=r+(t+1)/(e.data.length-1)*(100-r-o),d=100-h-(e.data[t+1]-n)/i*(100-l-h);a+=`<line x1=${s.toFixed(1)}% y1=${c.toFixed(1)}% x2=${u.toFixed(1)}% y2=${d.toFixed(1)}% />`}if(a+="</g>",e.showPoints){a+=`<g fill='${e.color||"black"}' stroke='none' opacity='0.4'>`;for(let t=0;t<e.data.length-1;t++){const s=r+t/(e.data.length-1)*(100-r-o),c=100-h-(e.data[t]-n)/i*(100-l-h),d=r+(t+1)/(e.data.length-1)*(100-r-o),p=100-h-(e.data[t+1]-n)/i*(100-l-h),m="r='5px'";(0==t||t==e.data.length-1||d-s>10||(e.data[t]-e.data[t-1])*(e.data[t]-e.data[t+1])>0)&&(a+=`<circle cx=${s.toFixed(1)}% cy=${c.toFixed(1)}% ${m}>\n                            <title>${u(e.data[t],0)}</title>\n                        </circle>`),t==e.data.length-2&&(a+=`<circle cx=${d.toFixed(1)}% cy=${p.toFixed(1)}% ${m}>\n                            <title>${u(e.data[t+1],0)}</title>\n                        </circle>`)}a+="</g>"}}})),e&&(a+=`<text x='50%' y='1em' text-anchor='middle' fill='black'>${e}</text>`);let c=10,d="";return t.forEach((e=>{e.name&&(d+=`\n                <rect x='${r}%' y='${c}%' width='2.5%' height='1em' fill='${e.color||"black"}' />\n                <text x='${r+3}%' y='${c+1}%' fill='black'>${e.name}</text>`,c+=10)})),d&&(a+=`<g font-size='80%' font-weight='bold' dominant-baseline='hanging'>\n            ${d}\n        </g>`),a+="</svg>",a}function G(e,t,s,n=0){return`<transform class='ss-queue ${e}' translation='${t} ${s} ${n}'>\n        <shape>\n            <appearance>\n                <material diffuseColor='1 1 0' transparency='0.6'></material>\n            </appearance>\n            <sphere radius='4'></sphere>\n        </shape>\n    </transform>`}function X(e,t,s,n,i){return`<transform class='ss-car ${e}' translation='0 0 ${s/2}'>\n        <transform>\n            <shape> \x3c!-- body --\x3e\n                <appearance>\n                    <material diffuseColor='${i[0]} ${i[1]} ${i[2]}'></material>\n                </appearance>\n                <box size='${t} ${s} ${n}'></box>\n            </shape>\n            <shape render='false'> \x3c!-- 5 unit padding --\x3e\n                <box size='${1.1*t} ${1.1*s} ${1.1*n}'></box>\n            </shape>\n        </transform>\n        <transform translation='${.2*-t} 0 ${.5*+n}'>\n            <shape> \x3c!-- cabin --\x3e\n                <appearance>\n                    <material diffuseColor='${i[0]/3} ${i[1]/3} ${i[2]/3}'></material>\n                </appearance>\n                <box size='${.5*t} ${.75*s} ${n}'></box>\n            </shape>\n        </transform>\n        <transform translation='${-t/2+4} 0 -2'>\n            <shape> \x3c!-- front wheels --\x3e\n                <appearance>\n                    <material diffuseColor='0 0 0'></material>\n                </appearance>\n                <cylinder radius='3' height='${s+2}'></cylinder>\n            </shape>\n        </transform>\n        <transform translation='${+t/2-4} 0 -2'>\n            <shape> \x3c!-- rear wheels --\x3e\n                <appearance>\n                    <material diffuseColor='0 0 0'></material>\n                </appearance>\n                <cylinder radius='3' height='${s+2}'></cylinder>\n            </shape>\n        </transform>\n    </transform>`}class U{constructor(e,t,s){this._queues=new Map,this._disabled=!1,this._rotateEntities=!1,this._toQueueEnd=!0,this._entities=new Map,this._host=g(t),this._scene=this._host,"X3D"==this.hostTag&&(this._scene=this._host.querySelector("scene")),this._sim=e,e.timeNowChanged.addEventListener(this.updateDisplay,this),e.stateChanged.addEventListener(this.updateDisplay,this),e.yieldInterval=30,this._lastUpdate=0,this._entities=new Map,s&&m(this,s)}get hostElement(){return this._host}get hostTag(){return this._host.tagName.toUpperCase()}get isThreeD(){const e=this.hostTag;return"X3D"==e||"A-SCENE"==e}get sceneElement(){return this._scene}get getEntityHtml(){return this._getEntityHtml}set getEntityHtml(e){this._getEntityHtml=e}get rotateEntities(){return this._rotateEntities}set rotateEntities(e){this._rotateEntities=e}get animateToQueueEnd(){return this._toQueueEnd}set animateToQueueEnd(e){this._toQueueEnd=e}get disabled(){return this._disabled}set disabled(e){e!=this.disabled&&(this._disabled=e,e||this.updateDisplay())}get queues(){return this._queueArray}set queues(e){this._queueArray=e,e.forEach((e=>{let t=new V(this,e);this._queues.set(t._q,t)})),this._lastUpdate&&(this._lastUpdate=-1,this.updateDisplay())}updateDisplay(){if(this._disabled)return;const e=this._host,t=this._sim,s=e.getBoundingClientRect();if(s.height!=this._height||s.width!=this._width){this._height=s.height,this._width=s.width;for(let e of this._queues.values())e._ptStart=null}this._entities.forEach((e=>{e._inUse=!1}));for(let n of this._queues.values())n._draw();t._fec.forEach((e=>{if(e.options.path&&null!=e.timeDue){const t=this._getAnimatedEntity(e.e),s=e.options.path,n=null!=s.tension?s.tension:1,i=s.radius,a=[];s.queues.forEach(((e,t)=>{const n=this._queues.get(e);c(null!=n,"Queue missing animation info"),a.push(this._toQueueEnd&&2==s.queues.length&&t>0&&n._ptEnd||n._getStart())})),i&&function(e,t){if(t>0&&e.length>2)for(let s=e.length-2;s>=0;s--){const n=e[s],i=e[s+1],a=y.distance(n,i);if(a>2*t){let r=s+1;if(s>0){const s=y.interpolate(n,i,t/a);e.splice(r++,0,s)}if(s<e.length-2){const s=y.interpolate(n,i,1-(a-t)/a);e.splice(r,0,s)}}}}(a,i),t.updateIcon();const r=e.timeStart,o=e.timeDue,l=1-(o-this._sim.timeNow)/(o-r),[h,u]=function(e,t,s){const n=y.distance,i=y.angle,a=y.interpolate,r=(e,t)=>e[w(t,0,e.length-1)];if(s=w(s,0,1),t=w(t,0,1),e.length<3)return 2==e.length?[a(e[0],e[1],s),y.angle(e[0],e[1])]:[e[0],0];let o=0;for(let w=0;w<e.length-1;w++)o+=n(e[w],e[w+1]);const l=s*o;let h=-1,c=-1;o=0;for(let w=0;w<e.length-1;w++){const t=n(e[w],e[w+1]);if(o+t>=l){h=w,c=(l-o)/t;break}o+=t}let u=e[h],d=r(e,h+1);const p=a(u,d,c),m=i(u,d);if(0==t)return[p,m];let g;c>=.5?(d=r(e,h+1),u=a(e[h],d,.5),g=a(d,r(e,h+2),.5)):(d=e[h],u=a(r(e,h-1),d,.5),g=a(e[h],r(e,h+1),.5));if(0==h&&!n(u,d)||h==e.length-2&&!n(d,g))return[p,m];const b=n(u,d),f=n(d,g),v=(l-o+b*(c>=.5?-1:1))/(b+f),[q,x]=function(e,t,s,n){const i=(1-n)*(1-n),a=2*(1-n)*n,r=n*n,o={x:i*e.x+a*t.x+r*s.x,y:i*e.y+a*t.y+r*s.y,z:i*e.z+a*t.z+r*s.z},l=2*(n-1),h=2*(1-2*n),c=2*n,u=l*e.x+h*t.x+c*s.x,d=l*e.y+h*t.y+c*s.y,p=180*Math.atan2(d,u)/Math.PI;return[o,p]}(u,d,g,v);return[a(p,q,t),t>.1?x:m]}(a,n,l);t._drawAt(h,this.rotateEntities?u:0)}})),this._entities.forEach(((e,t)=>{if(!e._inUse){this._entities.delete(t);let s=e._element;s&&s.parentElement&&s.remove()}})),this._lastUpdate=t.timeNow}_getAnimatedEntity(e){let t=this._entities.get(e);return t||(t=new j(this,e),this._entities.set(e,t)),t}}class V{constructor(e,t){this._angle=0,this._pt1=new y,this._pt2=new y,this._anim=e,this._q=t.queue,this._max=t.max,this._element=g(t.element),this._elementEnd=t.endElement?g(t.endElement):null,this._angle=t.angle||0,this._stackEntities=t.stackEntities,c(this._q instanceof f,"q parameter should be a Queue")}_getStart(){return this._ptStart||(this._ptStart=this._getElementPosition(this._element)),this._ptStart}_getEnd(){return this._ptEnd||(this._ptEnd=this._getElementPosition(this._elementEnd||this._element)),this._ptEnd}_getElementPosition(e){const t=this._anim;switch(t.hostTag){case"X3D":return new J(e).center;case"A-SCENE":return y.clone(e.object3D.position);case"SVG":const s=e.getBBox();return new y(s.x+s.width/2,s.y+s.height/2,0);default:const n=t.hostElement.getBoundingClientRect(),i=e.getBoundingClientRect();return new y(i.left-n.left+i.width/2,i.top-n.top+i.height/2,0)}}_draw(){const e=this._anim,t=this._q;if(!t.pop)return void(this._ptEnd=null);if(!this._customPositions&&t.lastChange<e._lastUpdate&&"A-SCENE"!=e.hostTag){for(let t of this._q.items.values()){const s=e._entities.get(t.entity);s&&(s._inUse=!0)}return}let s=y.clone(this._getStart());this._ptEnd=null;let n=0;for(let i of t.items.values()){if(null!=this._max&&n>=this._max)break;const a=i.entity,r=e._getAnimatedEntity(a);r.updateIcon();const o=a.getAnimationPosition;if(o!=A.prototype.getAnimationPosition){const e=y.copy(this._pt1,this._getStart()),s=y.copy(this._pt2,this._getEnd()),n=o.call(a,t,e,s);if(null!=n){this._customPositions=!0,r._drawAt(n.position,n.angle);continue}}const l=this._angle*(e.isThreeD?-1:1),h=-l/180*Math.PI,c=Math.sin(h),u=-Math.cos(h),d=this._stackEntities,p=d?0:r._sz.x*u/2,m=d?0:(e.rotateEntities?r._sz.x:r._sz.y)*c/2;s.x+=p,s.y+=m,r._drawAt(s,l),s.x+=p,s.y+=m,n++}this._ptEnd=s}}class j{constructor(e,t){let s;switch(this._anim=e,this._entity=t,this._inUse=!1,e.hostTag){case"X3D":s=document.createElement("transform");break;case"A-SCENE":s=document.createElement("a-entity");break;case"SVG":s=document.createElementNS("http://www.w3.org/2000/svg","g"),s.style.opacity="0";break;default:s=document.createElement("div"),s.style.opacity="0"}switch(s.classList.add("ss-entity"),this._element=s,this.updateIcon(),e.sceneElement.appendChild(s),e.hostTag){case"X3D":const e=new J(s).size;this._sz={x:e.x,y:e.y,z:e.z};break;case"A-SCENE":this._sz=new y,requestAnimationFrame((()=>{const e=s.object3D,t=(new THREE.Box3).setFromObject(e);this._sz={x:t.max.x-t.min.x,y:t.max.y-t.min.y,z:t.max.z-t.min.z}}));break;case"SVG":{const e=s.getBBox();this._sz={x:e.width,y:e.height},this._offset={x:e.x+e.width/2,y:e.y+e.height/2}}break;default:{const e=s.getBoundingClientRect();this._sz={x:e.width,y:e.height},this._offset={x:e.width/2,y:e.height/2}}}}_getEntityHtml(){const e=this._anim.getEntityHtml;return e?e(this._entity):"&#9899;"}updateIcon(){const e=this._getEntityHtml();e!=this._html&&(this._element.innerHTML=this._html=e)}_drawAt(e,t){const s=this._anim,n=this._element,i=n.style;switch(s.hostTag){case"X3D":n.setAttribute("translation",`${e.x} ${e.y} ${e.z}`),n.setAttribute("rotation","0 0 1 "+(s.rotateEntities?t/180*Math.PI:0));break;case"A-SCENE":const a=n.object3D;a.position.set(e.x,e.y,e.z),a.rotation.set(0,0,t&&s.rotateEntities?t/180*Math.PI:0);break;case"SVG":default:const r=new y(e.x-this._offset.x,e.y-this._offset.y);let o=`translate(${Math.round(r.x)}px, ${Math.round(r.y)}px)`;t&&s.rotateEntities&&(o+=`rotate(${t}deg) `),i.transform=o,i.opacity=""}this._inUse=!0}}class J{constructor(e){this.center=new y,this.size=new y;const t=e.querySelectorAll("shape>:not(appearance)");if(0==t.length)this.applyGeometry(e),this.applyTransforms(e);else{this.applyGeometry(t[0]),this.applyTransforms(t[0]);for(let e=1;e<t.length;e++)this.merge(new J(t[e]))}}applyGeometry(e){const t=this.size;switch(e.tagName){case"BOX":t.x=t.y=t.z=2;let s=Y(e,"size");s&&s.length>=3&&(t.x=s[0],t.y=s[1],t.z=s[2]);break;case"CONE":t.x=t.z=2*Math.max(K(e,"topRadius",0),K(e,"BottomRadius",0)),t.y=K(e,"height",0);break;case"CYLINDER":t.x=t.y=2*K(e,"radius",0),t.z=K(e,"height",0);break;case"SPHERE":t.x=t.y=t.z=2*K(e,"radius",1);break;default:console.error("skipping unknown geometry",e.tagName)}}applyTransforms(e){for(let t=e.closest("transform");null!=t;t=t.parentElement.closest("transform")){const e=Y(t,"translation");if(e&&e.length>=3){const t=this.center;t.x+=e[0],t.y+=e[1],t.z+=e[2]}const s=Y(t,"scale");if(s&&s.length>=3){const e=this.size;e.x*=s[0],e.y*=s[1],e.z*=s[2]}}}merge(e){const t=this.center,s=this.size,n=e.center,i=e.size,a=new y(Math.min(t.x-s.x/2,n.x-i.x/2),Math.min(t.y-s.y/2,n.y-i.y/2),Math.min(t.z-s.z/2,n.z-i.z/2)),r=new y(Math.max(t.x+s.x/2,n.x+i.x/2),Math.max(t.y+s.y/2,n.y+i.y/2),Math.max(t.z+s.z/2,n.z+i.z/2));t.x=(a.x+r.x)/2,t.y=(a.y+r.y)/2,t.z=(a.z+r.z)/2,s.x=r.x-a.x,s.y=r.y-a.y,s.z=r.y-a.y}}function Y(e,t){const s=e.getAttribute(t),n=s?s.split(/\s*,\s*|\s+/):null;return n?n.map((e=>parseFloat(e))):null}function K(e,t,s){const n=e.getAttribute(t);return n?parseFloat(n):s}class Z extends L{constructor(){super(...arguments),this.resource=new f("resource",1),this.q0=new f("Prty 0"),this.q1=new f("Prty 1"),this.q2=new f("Prty 2")}onStarting(){super.onStarting(),this.activate(new te({priority:0,start:0,duration:100})),this.activate(new se({priority:1,start:10,duration:10})),this.activate(new ne({priority:2,start:12,duration:5}))}}class ee extends A{constructor(e){super(null),this.start=0,this.duration=0,m(this,e)}log(e){console.log(`${this.constructor.name} ${e} at ${this.simulation.timeNow}`)}}class te extends ee{async script(){const e=this.simulation;this.log("arrived"),await this.delay(this.start),await this.seize(e.resource,this.duration,e.q0,e.resource),c(115==e.timeNow,"should finish at 115"),this.log("done (@115)")}}class se extends ee{async script(){const e=this.simulation;this.log("arrived"),await this.delay(this.start),await this.seize(e.resource,this.duration,e.q1,e.resource),c(25==e.timeNow,"should finish at 25"),this.log("done (@25)")}}class ne extends ee{async script(){const e=this.simulation;this.log("arrived"),await this.delay(this.start),await this.seize(e.resource,this.duration,e.q2,e.resource),c(17==e.timeNow,"should finish at 17"),this.log("done (@17)")}}class ie extends L{constructor(){super(...arguments),this.q=new f("server",1),this.system=new f("system")}onStarting(){super.onStarting(),this.timeUnit="s",this.serviceTime=new k(10,1),this.interArrival=new k(15,2),this.generateEntities(ae,this.interArrival,1e6)}}class ae extends A{async script(){const e=this.simulation;this.enterQueueImmediately(e.system),await this.enterQueue(e.q),await this.delay(e.serviceTime.sample()),this.leaveQueue(e.q),this.leaveQueue(e.system)}}class re extends L{constructor(){super(...arguments),this.delay=new k(100),this.qWork=new f("work",1),this.qWait=new f("wait")}onStarting(){super.onStarting(),this.activate(new oe)}}class oe extends A{async script(){console.log("creating 5 child-tasks at",this.simulation.timeNow),await Promise.all([this.simulation.activate(new le),this.simulation.activate(new le),this.simulation.activate(new le),this.simulation.activate(new le),this.simulation.activate(new le)]),console.log("all child-tasks done at",this.simulation.timeNow)}}class le extends A{async script(){const e=this.simulation;console.log(this.serial,"child starting at",this.simulation.timeNow),await this.seize(e.qWork,e.delay.sample(),e.qWait),console.log(this.serial,"child done at",this.simulation.timeNow)}}class he extends L{constructor(e){super(e),this._tally=new b,this._sampleSize=1e3,this._seeded=!1,this._index=0,this.createRandomVars()}get seeded(){return this._seeded}set seeded(e){this._seeded=e,this.createRandomVars()}get sampleSize(){return this._sampleSize}set sampleSize(e){this._sampleSize=e}get randomVars(){return this._randomVars}get randomVar(){return this._randomVars[this._index]}get tally(){return this._tally}get randomVarIndex(){return this._index}set randomVarIndex(e){e!=this._index&&(this._index=e,this.start())}createRandomVars(){const e=this._seeded?1:null;this._randomVars=[{var:new q(e),name:"Uniform(0, 1)",binSize:.1},{var:new x(5,10,e),name:"Uniform(5, 10)",binSize:.5},{var:new S(5,6,10,e),name:"Triangular(5, 6, 10)",binSize:.5},{var:new _([5,8,10],[0,.8,1],e),name:"Empirical([5, 8, 10], [0, .8, 1])",binSize:.5},{var:new k(10,e),name:"Exponential(10)",binSize:20},{var:new M(10,2,!0,e),name:"Normal(10, 2)",binSize:2},{var:new C(10,2,e),name:"LogNormal(10, 2)",binSize:2},{var:new P(10,e),name:"RandomInt(10)",binSize:1},{var:new ue(e),name:"EightEighty()",binSize:10},{var:new E(1,2,e),name:"Erlang(1, 2)",binSize:1},{var:new E(2,2,e),name:"Erlang(2, 2)",binSize:1},{var:new E(3,2,e),name:"Erlang(3, 2)",binSize:1},{var:new E(5,1,e),name:"Erlang(5, 1)",binSize:1},{var:new E(7,.5,e),name:"Erlang(7, 0.5)",binSize:1},{var:new E(9,1,e),name:"Erlang(9, 1)",binSize:1},{var:new E(1,1,e),name:"Erlang(1, 1)",binSize:1},{var:new T(1,2,e),name:"Gamma(1, 2)",binSize:1},{var:new T(2,2,e),name:"Gamma(2, 2)",binSize:1},{var:new T(3,2,e),name:"Gamma(3, 2)",binSize:1},{var:new T(5,1,e),name:"Gamma(5, 1)",binSize:1},{var:new T(9,.5,e),name:"Gamma(9, 0.5)",binSize:1},{var:new T(7.5,1,e),name:"Gamma(7.5, 1)",binSize:1},{var:new T(.5,1,e),name:"Gamma(0.5, 1)",binSize:1}]}onStarting(){super.onStarting(),this.createRandomVars(),this.activate(new ce)}}class ce extends A{async script(){const e=this.simulation,t=e.randomVar,s=e.tally;s.reset(),s.setHistogramParameters(t.binSize);for(let n=0;n<e.sampleSize;n++)s.add(t.var.sample())}}class ue extends q{sample(){return super.sample()<.5?8:80}}class de extends L{constructor(){super(...arguments),this.qJoe=new f("Joe",1),this.qWait=new f("Wait Area")}onStarting(){super.onStarting(),this.timeUnit="min",this.timeEnd=3360,this.qWait.grossDwell.setHistogramParameters(1),this.generateEntities(pe,new x(12,24))}}class pe extends A{constructor(){super(...arguments),this.service=new x(12,18)}async script(){const e=this.simulation;await this.seize(e.qJoe,this.service.sample(),e.qWait)}}class me extends L{constructor(){super(...arguments),this.qWait=new f("Wait"),this.qService=new f("Service",2),this.interArrival=new k(80),this.service=new k(100),this.tally=new b}onStarting(){super.onStarting(),this.timeUnit="min",this.interArrival=new k(this.interArrival.mean,1),this.service=new k(this.service.mean,2),this.qWait.grossPop.setHistogramParameters(1,0,10),this.qWait.grossDwell.setHistogramParameters(60,0,499.9),this.generateEntities(ge,this.interArrival,1e5)}}class ge extends A{async script(){let e=this.simulation;e.qWait.canEnter()?this.enterQueueImmediately(e.qWait):await this.enterQueue(e.qWait),e.qService.canEnter()?this.enterQueueImmediately(e.qService):await this.enterQueue(e.qService),this.leaveQueue(e.qWait),await this.delay(e.service.sample()),this.leaveQueue(e.qService)}}var we,ye;(ye=we||(we={}))[ye.RED=0]="RED",ye[ye.YELLOW=1]="YELLOW",ye[ye.GREEN=2]="GREEN";class be extends L{constructor(e){super(e),this.qPedArr=new f("Pedestrian Arrival"),this.qPedXing=new f("Pedestrian Crossing"),this.qPedXed=new f("Pedestrian Crossed"),this.qPedLeave=new f("Pedestrian Leaving"),this.qCarArr=new f("Car Arrival"),this.qCarXing=new f("Car Crossing"),this.qCarXed=new f("Car Crossed"),this.walkToXing=new x(60,120),this.walkAcross=new x(10,20),this.walkAway=new x(120,180),this.driveToXing=new x(5,6),this.driveAway=new x(10,12),this.pedestrianArrivalInterval=new k(6),this.carArrivalInterval=new k(10),this.cycle={red:20,yellow:10,green:30},this.light=0,this.timeUnit="s",this.qPedXing.grossPop.setHistogramParameters(3),this.qCarXing.grossPop.setHistogramParameters(2),null==this.timeEnd&&(this.timeEnd=86400)}onStarting(){super.onStarting(),this.activate(new qe),this.generateEntities(fe,this.pedestrianArrivalInterval),this.generateEntities(ve,this.carArrivalInterval)}}class fe extends A{async script(){let e=this.simulation;for(await this.delay(e.walkToXing.sample(),{queues:[e.qPedArr,e.qPedXing]}),await this.enterQueue(e.qPedXing);2!=e.light;)await this.waitSignal(2);this.leaveQueue(e.qPedXing),await this.delay(e.walkAcross.sample(),{queues:[e.qPedXing,e.qPedXed]}),await this.delay(e.walkAway.sample(),{queues:[e.qPedXed,e.qPedLeave]})}}class ve extends A{async script(){let e=this.simulation;for(await this.delay(e.driveToXing.sample(),{queues:[e.qCarArr,e.qCarXing]}),await this.enterQueue(e.qCarXing);0!=e.light;)await this.waitSignal(0);this.leaveQueue(e.qCarXing),await this.delay(e.driveAway.sample(),{queues:[e.qCarXing,e.qCarXed]})}}class qe extends A{async script(){let e=this.simulation;for(;;)this.setLight(2),await this.delay(e.cycle.green),this.setLight(1),await this.delay(e.cycle.yellow),this.setLight(0),await this.delay(e.cycle.red)}setLight(e){this.simulation.light=e,this.sendSignal(e)}}class xe extends L{constructor(){super(...arguments),this.qAngle=270,this.qRotate=new f("Rotate"),this.qCenter=new f("qcenter"),this.q1=new f("q1"),this.q2=new f("q2"),this.q3=new f("q3"),this.q4=new f("q4"),this.q5=new f("q5"),this.q6=new f("q6"),this.q7=new f("q7"),this.q8=new f("q8"),this.q9=new f("q9"),this.q10=new f("q10"),this.q11=new f("q11"),this.q12=new f("q12"),this.splineTension=.5,this.interArrival=new x(5,10),this.moveDelayLong=new x(50,200),this.moveDelayShort=new x(30,60)}onStarting(){super.onStarting();for(let e=0;e<6;e++)this.activate(new Se);this.generateEntities(_e,this.interArrival,20)}}class Se extends A{async script(){this.enterQueueImmediately(this.simulation.qRotate),await this.waitSignal(null)}}class _e extends A{constructor(e){super(null),this.fast=!1,this.fast=this.serial%2==0,m(this,e)}async script(){let e=this.simulation;for(;;){const t=this.fast?e.moveDelayShort:e.moveDelayLong;await this.delay(t.sample(),{queues:[e.qCenter,e.q1,e.q2,e.q3,e.q4,e.q5,e.q11,e.q10,e.q9,e.q8,e.q7,e.qCenter],tension:e.splineTension})}}}class ke extends L{constructor(e){super(e),this.qMulti=new f("MultiServer",10),this.qMultiWait=new f("MultiServerWait"),this.qSingle=[],this.qSingleWait=new f("SingleServerWait"),this.qSingleNC=[],this.qSingleWaitNC=new f("SingleServerWaitNC"),this.interArrival=new k(10),this.service=new k(80);for(let t=0;t<10;t++)this.qSingle.push(new f(`Single(${t})`,1)),this.qSingleNC.push(new f(`SingleNC(${t})`,1))}onStarting(){super.onStarting(),this.generateEntities(Ee,this.interArrival),this.generateEntities(Te,this.interArrival),this.generateEntities(Me,this.interArrival)}}class Ee extends A{async script(){const e=this.simulation;await this.enterQueue(e.qMultiWait),await this.enterQueue(e.qMulti),await this.delay(e.service.sample()),this.leaveQueue(e.qMulti),this.leaveQueue(e.qMultiWait)}}class Te extends A{async script(){const e=this.simulation;let t;for(await this.enterQueue(e.qSingleWait);null==t;){for(let s=0;s<e.qSingle.length;s++){let n=e.qSingle[s];if(n.canEnter()){t=n;break}}null==t&&await this.waitSignal(Te)}this.enterQueueImmediately(t),await this.delay(e.service.sample()),this.leaveQueue(t),this.leaveQueue(e.qSingleWait),this.sendSignal(Te)}}class Me extends A{async script(){const e=this.simulation;await this.enterQueue(e.qSingleWaitNC);let t=Math.floor(10*Math.random()),s=e.qSingleNC[t];await this.enterQueue(s),await this.delay(e.service.sample()),this.leaveQueue(s),this.leaveQueue(e.qSingleWaitNC)}}class Ce{constructor(e){m(this,e)}set nodes(e){this._nodes=e}get nodes(){return this._nodes}set links(e){this._links=e}get links(){return this._links}getNode(e){return e=e.toString(),this._nodes.find((t=>t.id==e))}shortestPath(e,t){const s=[],n=[];for(this._nodes.forEach((t=>{s.push({id:t.id,node:t,distance:t==e?0:1/0,link:null})}));s.length;){let e=null;s.forEach((t=>{(null==e||t.distance<e.distance)&&(e=t)})),s.splice(s.indexOf(e),1),n.push(e),s.length&&this._links.forEach((t=>{t.from!=e.node||t.disabled||s.forEach((s=>{if(s.node==t.to){const n=e.distance+this.getLinkDistance(t,e.link);n<s.distance&&(s.distance=n,s.link=t)}}))}))}const i=[];for(let a=t;null!=a;){const e=this._getPathPart(n,a).link;if(!e)break;a=e.from,i.unshift(e)}return i}getLinkDistance(e,t){let s=null;return null!=e.distance?s=e.distance:(c(null!=e.from.position&&null!=e.to.position,"link must have a distance or connect points with positions"),s=y.distance(e.from.position,e.to.position)),s}mergePath(e){const t=[];let s=0;return e.forEach(((n,i)=>{s+=this.getLinkDistance(n,i>0?e[i-1]:null),0==i&&t.push(n.from.queue),t.push(n.to.queue)})),[t,s]}_getLinkAngle(e){return y.angle(e.from.position,e.to.position,!0)}_getPathPart(e,t){for(let s=0;s<e.length;s++){let n=e[s];if(n.node==t)return n}return null}}var Pe;function De(e,t){return`${e}.${t.serial}`}!function(e){e[e.RequestArrived=0]="RequestArrived",e[e.RequestAssigned=1]="RequestAssigned",e[e.ServiceArrived=2]="ServiceArrived",e[e.ServiceFinished=3]="ServiceFinished"}(Pe||(Pe={}));class Ae extends L{constructor(){super(...arguments),this.serviceVehicles=5,this.requests=1e3,this.requestsServed=0,this.requestsMissed=0,this.qBusy=new f("busy",this.serviceVehicles),this.qWait=new f("wait"),this.qService=new f("service"),this.interArrivalTime=new k(60),this.serviceTime=new k(120),this.serviceVehicleSpeed=new x(3,6),this.network=function(e,t,s){const n=[];for(let a=0;a<e;a++)for(let e=0;e<t;e++)n.push({id:n.length.toString(),position:{x:e*s,y:a*s},queue:new f});const i=[];for(let a=0;a<n.length;a++){const s=Math.floor(a/t),r=a%t;r<t-1&&(i.push({from:n[a],to:n[a+1]}),i.push({from:n[a+1],to:n[a]})),s<e-1&&a%2!=0&&(i.push({from:n[a],to:n[a+t]}),i.push({from:n[a+t],to:n[a]})),0==s&&0==r&&(i.push({from:n[a+1],to:n[a+t]}),i.push({from:n[a+t],to:n[a+1]})),0==s&&r==t-1&&(i.push({from:n[a-1],to:n[a+t]}),i.push({from:n[a+t],to:n[a-1]})),s==e-1&&0==r&&(i.push({from:n[a+1],to:n[a-t]}),i.push({from:n[a-t],to:n[a+1]})),s==e-1&&r==t-1&&(i.push({from:n[a-1],to:n[a-t]}),i.push({from:n[a-t],to:n[a-1]}))}return new Ce({nodes:n,links:i})}(5,9,100),this.rndNode=new P(this.network.nodes.length-1),this.requestFinished=new h}onStarting(){super.onStarting(),this.servers=[],this.requestsServed=0,this.requestsMissed=0,this.generateEntities(ze,this.interArrivalTime,this.requests),this.generateEntities($e,new P(0),this.serviceVehicles)}getRandomFreeNode(){const e=this.network.nodes;let t=this.rndNode.sample();for(let s=0;s<e.length;s++){let n=e[(t+s)%e.length];if(!n.queue.pop)return n}return null}onRequestFinished(e){this.requestFinished.raise(this,e)}}class ze extends A{async script(){const e=this.simulation;if(this.node=e.getRandomFreeNode(),!this.node)return e.requestsMissed++,void console.log(`out of free nodes (${e.requestsMissed} times)`);this.enterQueueImmediately(e.qWait),this.enterQueueImmediately(this.node.queue),this.sendSignal(0),await this.waitSignal(De(1,this)),await this.waitSignal(De(2,this)),this.leaveQueue(e.qWait),this.leaveQueue(this.node.queue),await this.waitSignal(De(3,this)),e.onRequestFinished()}}class $e extends A{constructor(){super(...arguments),this.busy=!1}async script(){const e=this.simulation;for(e.servers.push(this),this.node=e.getRandomFreeNode(),this.enterQueueImmediately(this.node.queue);;){for(this.request=null;!this.request;)this.request=this.getClosestRequest(),this.request||await this.waitSignal(0);c(null==this.request.assigned,"request should not be assigned"),this.request.assigned=this.serial,this.sendSignal(De(1,this.request)),this.enterQueueImmediately(e.qBusy),this.leaveQueue(this.node.queue);const t=e.network.shortestPath(this.node,this.request.node);c(t.length>0,"cannot reach destination");{const[s,n]=e.network.mergePath(t);await this.delay(n/e.serviceVehicleSpeed.sample(),{queues:s,tension:.8})}this.busy=!0,this.node=this.request.node,this.sendSignal(De(2,this.request)),this.enterQueueImmediately(this.node.queue),this.enterQueueImmediately(e.qService),await this.delay(e.serviceTime.sample()),this.leaveQueue(e.qService),this.sendSignal(De(3,this.request)),this.leaveQueue(this.node.queue),this.busy=!1,e.requestsServed++,this.enterQueueImmediately(this.node.queue),this.leaveQueue(e.qBusy)}}getClosestRequestQuick(){const e=this.simulation;c(!this.busy,"should not be looking for service while busy");let t,s=null;return e.qWait.entities.forEach((e=>{if(null==e.assigned){const n=y.distance(this.node.position,e.node.position);(null==t||n<t)&&(s=e,t=n)}})),s}getClosestRequest(){const e=this.simulation;c(!this.busy,"should not be looking for service while busy");const t=e.servers.filter((e=>0==e.busy)),s=e.qWait.entities.filter((e=>null==e.assigned));if(0==s.length)return null;const n=[];t.forEach((e=>{let t=[];n.push(t),s.forEach((s=>{const n=y.distance(e.node.position,s.node.position);t.push(n)}))}));const i=new Map,a=new Map;for(;i.size<t.length&&a.size<s.length;){const e={distance:null,vehicle:null,destination:null};for(let r=0;r<n.length;r++)if(!i.has(t[r]))for(let i=0;i<n[r].length;i++)if(!a.has(s[i])){let a=n[r][i];(null==e.distance||a<e.distance)&&(e.vehicle=t[r],e.destination=s[i],e.distance=a)}i.set(e.vehicle,e.destination),a.set(e.destination,e.vehicle)}return i.get(this)}}function Qe(e,t){const s=t.querySelector("scene");let n="";e.nodes.forEach((e=>{const t=e.position;n+=`\n            <transform class='ss-queue q${e.id}' translation='${t.x} ${t.y} 0'>\n                <shape>\n                    <appearance>\n                        <material transparency='0.5' diffuseColor='1 1 0'/>\n                    </appearance>\n                    <box size='5 5 2'></box>\n                </shape>\n            </transform>`})),e.links.forEach(((e,t)=>{if(t%2==0){const t=e.from.position,s=e.to.position,i=y.distance(t,s);n+=`\n            <transform translation='${t.x} ${t.y} 0' rotation='0 0 1 ${y.angle(t,s,!0)}'>\n                <transform translation='${i/2} 0 0'>\n                    <shape>\n                        <appearance>\n                            <material transparency='0' diffuseColor='.1 .1 .1'/>\n                        </appearance>\n                        <box size='${i+30} 40 1'></box>\n                    </shape>\n                </transform>\n            </transform>`}})),s.innerHTML+=n}class Le extends L{constructor(){super(...arguments),this.timeIncrement=2,this.totalCars=1e3,this.stripLength=1e3,this.carSpeeds=new x(40/3.6,100/3.6),this.interArrival=new k(20),this.qStrip=new f("strip"),this.carFinished=new h}onStarting(e){super.onStarting(e),this.maxTimeStep=this.timeIncrement,this.generateEntities(Re,this.interArrival,this.totalCars)}onCarFinished(e){this.carFinished.raise(this,e)}}class Re extends A{constructor(){super(...arguments),this.speed=0,this.accel=10,this.position=0,this.maxSpeed=0}async script(){const e=this.simulation,t=e.timeIncrement;for(this.maxSpeed=e.carSpeeds.sample(),this.enterQueueImmediately(e.qStrip);this.position<e.stripLength;)this.speed=this.getSpeed(t),await this.delay(t),this.position+=this.speed*t;this.leaveQueue(e.qStrip),e.onCarFinished()}getAnimationPosition(e,t,s){const n=this.simulation;return{position:y.interpolate(t,s,this.position/n.stripLength),angle:y.angle(t,s,!1)}}getSpeed(e){const t=Math.min(this.getSafeSpeed(e),this.maxSpeed);return t>this.speed?Math.min(t,this.speed+this.accel*e):t<this.speed?Math.max(t,this.speed-this.accel*e):this.speed}getSafeSpeed(e){let t=this.maxSpeed;const s=this.getCarAhead();if(null!=s){let n=s.position-this.position;s.speed&&s.accel&&(n+=s.speed*s.speed/(2*s.accel));const i=e*e/4-(this.speed*e-2*n)/this.accel;t=i>0?+this.accel*(Math.sqrt(i)-e/2):-this.accel*e/2}return Math.max(0,t)}getCarAhead(){const e=this.simulation,t=e.qStrip.entities;let s=t.indexOf(this);return s>0?t[s-1]:{speed:0,maxSpeed:0,accel:0,position:e.stripLength}}}class Ie extends L{constructor(){super(...arguments),this.timeIncrement=1,this.totalCars=1e3,this.carSpeeds=new x(40/3.6,100/3.6),this.interArrival=new k(15),this.network=function(e,t,s){const n=[];for(let a=0;a<e;a++)for(let e=0;e<t;e++)n.push({id:n.length.toString(),position:{x:e*s,y:a*s},queue:new f});const i=[];for(let a=0;a<n.length;a++){const s=Math.floor(a/t),r=a%t;r<t-1&&(i.push({from:n[a],to:n[a+1],queue:new f}),i.push({from:n[a+1],to:n[a],queue:new f})),s<e-1&&a%2!=0&&(i.push({from:n[a],to:n[a+t],queue:new f}),i.push({from:n[a+t],to:n[a],queue:new f})),0==s&&0==r&&(i.push({from:n[a+1],to:n[a+t],queue:new f}),i.push({from:n[a+t],to:n[a+1],queue:new f})),0==s&&r==t-1&&(i.push({from:n[a-1],to:n[a+t],queue:new f}),i.push({from:n[a+t],to:n[a-1],queue:new f})),s==e-1&&0==r&&(i.push({from:n[a+1],to:n[a-t],queue:new f}),i.push({from:n[a-t],to:n[a+1],queue:new f})),s==e-1&&r==t-1&&(i.push({from:n[a-1],to:n[a-t],queue:new f}),i.push({from:n[a-t],to:n[a-1],queue:new f}))}return new Oe({nodes:n,links:i})}(5,9,100),this.rndNode=new P(this.network.nodes.length-1),this.stats={totalDistance:0,totalTime:0,carsDone:0},this.carFinished=new h}onStarting(e){this.stats.totalDistance=0,this.stats.totalTime=0,this.stats.carsDone=0,super.onStarting(e),this.generateEntities(Ne,this.interArrival,this.totalCars)}onCarFinished(e){this.carFinished.raise(this,e)}}class Ne extends A{constructor(){super(...arguments),this.speed=0,this.accel=10,this.position=0,this.length=25,this.maxSpeed=0,this.delayStart=0}async script(){const e=this.simulation,t=e.network,s=t.nodes,n=e.timeIncrement;this.maxSpeed=e.carSpeeds.sample();let i=s[0],a=s[s.length-1],r=0;for(;i!=a;){const s=e.timeNow;this.path=t.shortestPath(i,a);const o=this.path[0],l=e.network.getLinkDistance(o);for(this.position=r,this.enterQueueImmediately(o.queue);this.position<l;)this.speed=this.getSpeed(n),this.delayStart=e.timeNow,await this.delay(n),this.position+=this.speed*n;this.leaveQueue(o.queue),i=o.to,r=Math.max(0,this.position-l),e.stats.totalDistance+=y.distance(o.from.position,o.to.position),e.stats.totalTime+=e.timeNow-s}e.stats.carsDone++,e.onCarFinished()}getAnimationPosition(e,t,s){const n=this.simulation,i=n.network.getLinkDistance(this.path[0]),a=this.position+(n.timeNow-this.delayStart)*this.speed;return{position:y.interpolate(t,s,a/i),angle:y.angle(t,s,!1)}}getSpeed(e){const t=Math.min(this.getSafeSpeed(e),this.maxSpeed);return t>this.speed?Math.min(t,this.speed+this.accel*e):t<this.speed?Math.max(t,this.speed-this.accel*e):this.speed}getSafeSpeed(e){let t=this.maxSpeed;const s=this.getCarAhead();if(null!=s){let n=Math.max(0,s.position-this.position-s.length);s.speed&&s.accel&&(n+=s.speed*s.speed/(2*s.accel));const i=e*e/4-(this.speed*e-2*n)/this.accel;t=i>0?+this.accel*(Math.sqrt(i)-e/2):-this.accel*e/2}return Math.max(0,t)}getCarAhead(){const e=this.simulation,t=this.path[0],s=t.queue,n=s.entities.indexOf(this);if(n>0)return s.entities[n-1];if(this.path.length>1){const e=this.path[1].queue;if(e.pop){const t=e.entities[0];return{speed:t.speed,maxSpeed:t.maxSpeed,accel:t.maxSpeed,position:this.position+t.position,length:t.length}}return null}return{speed:0,maxSpeed:0,accel:0,position:e.network.getLinkDistance(t),length:0}}}class Oe extends Ce{getLinkDistance(e,t){let s=super.getLinkDistance(e,t);return s+=s*e.queue.pop*.5,s}}const Be={};var We,He;(He=We||(We={})).thrust="thrust.mp3",He.missile="missile.mp3",He.explosion="explosion.mp3",He.won="won.mp3",He.lost="lost.mp3";class Fe extends L{constructor(){super(...arguments),this.timeIncrement=1,this.asteroidCount=8,this.asteroidInterval=new x(0,20),this.asteroidSpeed=new x(7.5,15),this.q=new f,this.sound=!0,this.won=!1,this.keydown=this._keydown.bind(this),this.touchstart=this._touchstart.bind(this),this.touchend=this._touchend.bind(this),this.missilesFiredChanged=new h,this.asteroidsDestroyedChanged=new h}onMissilesFiredChanged(e){this.missilesFiredChanged.raise(this,e)}onAsteroidsDestroyedChanged(e){this.asteroidsDestroyedChanged.raise(this,e)}onStarting(){super.onStarting(),Object.keys(We).forEach((e=>{const t=We[e];if(!Be[t]){const e=`https://bernardo-castilho.github.io/simscript/dist/resources/${t}`;Be[t]=new Audio(e)}})),this.ship=new Xe,this.activate(this.ship),this.missilesFired=0,this.onMissilesFiredChanged(),this.asteroidsDestroyed=0,this.onAsteroidsDestroyedChanged(),this.generateEntities(Ve,this.asteroidInterval,this.asteroidCount),document.addEventListener("keydown",this.keydown),document.addEventListener("touchstart",this.touchstart,{passive:!1}),document.addEventListener("touchend",this.touchend)}onFinishing(){document.removeEventListener("keydown",this.keydown),document.removeEventListener("touchstart",this.touchstart),document.removeEventListener("touchend",this.touchend)}gameOver(e){this.won=e,this.q.entities.forEach((e=>e.done=!0)),setTimeout((()=>{this.play(e?We.won:We.lost)}),800)}play(e){if(this.sound){const t=Be[e];t.currentTime=0,t.play()}}_keydown(e){this.ship.keydown(e)}_touchstart(e){const t=e.target.closest("svg.asteroids");this._touch=t?e.touches[0]:null,this._touch&&e.preventDefault()}_touchend(e){if(e.target.closest("svg.asteroids")&&this._touch){const t=this._touch,s=e.changedTouches[0],n=30,i=s.clientX-t.clientX>n?"ArrowRight":t.clientX-s.clientX>n?"ArrowLeft":t.clientY-s.clientY>n?"ArrowUp":" ";this.ship.keydown(new KeyboardEvent("keydown",{key:i,shiftKey:!0}))}this._touch=null}}class Ge extends A{constructor(e){super(e),this.radius=0,this.spd=new y,this.done=!1,e&&null!=e.angle||(this.angle=-90),e&&e.pos||(this.pos={x:500,y:250})}get angle(){return this._angle}set angle(e){this._angle=e,this._cos=Math.cos(e*Math.PI/180),this._sin=Math.sin(e*Math.PI/180)}get sin(){return this._sin}get cos(){return this._cos}incrementSpeed(e,t){const s=this.spd;if(s.x+=e*this.cos,s.y+=e*this.sin,null!=t){const e=Math.sqrt(s.x*s.x+s.y*s.y),n=t/e;0!=e&&n<1&&(s.x*=n,s.y*=n)}}updatePosition(e,t){const s=this.pos,n=this.spd;return s.x+=n?n.x*e:0,s.y+=n?n.y*e:0,t&&(s.x=this.wrap(s.x,1e3),s.y=this.wrap(s.y,500)),s.x>=0&&s.x<=1e3&&s.y>=0&&s.y<=500}wrap(e,t){return e<0?t:e>t?0:e}collidedWidth(e){return!this.done&&!e.done&&y.distance(this.pos,e.pos)<this.radius+e.radius}getAnimationPosition(e,t,s){return null==this.pos&&(this.pos=t),{position:this.pos,angle:this.angle}}}class Xe extends Ge{constructor(){super(...arguments),this.engineOn=0}async script(){const e=this.simulation,t=e.timeIncrement;for(this.radius=45,this.enterQueueImmediately(e.q);!this.done;)await this.delay(t),this.updatePosition(t,!0),e.timeNow-this.engineOn>3&&(this.engineOn=0);this.leaveQueue(e.q)}keydown(e){if(!this.done){const t=this.simulation;switch(e.key){case"ArrowLeft":case"ArrowRight":{let t="ArrowLeft"==e.key?-10:10;e.shiftKey&&(t*=3),this.angle=(this.angle+t)%360}e.preventDefault();break;case"ArrowUp":this.incrementSpeed(2,20),this.engineOn=t.timeNow,t.play(We.thrust),e.preventDefault();break;case" ":const s=new Ue(this);t.activate(s),t.missilesFired++,t.onMissilesFiredChanged(),e.preventDefault();break;case"S":case"s":t.sound=!t.sound,e.preventDefault()}}}}class Ue extends Ge{constructor(e){super(),this.radius=10;const t=e.pos;this.pos={x:t.x+80*e.cos,y:t.y+80*e.sin},this.angle=e.angle,this.spd=y.clone(e.spd),this.incrementSpeed(30)}async script(){const e=this.simulation,t=e.timeIncrement;for(e.play(We.missile),this.enterQueueImmediately(e.q);!this.done&&(await this.delay(t),this.updatePosition(t,!1)););this.leaveQueue(e.q)}}class Ve extends Ge{constructor(){super(...arguments),this.small=Math.random()<.4}async script(){const e=this.simulation,t=e.ship,s=e.q.entities,n=e.timeIncrement,i=e.asteroidSpeed.sample(),a=(Math.floor(20*Math.random())-10)*(this.small?2:1);for(this.radius=this.small?40:80,this.pos=new y(t.pos.x+500,t.pos.y+250),this.angle=Math.floor(360*Math.random()),this.incrementSpeed(i),this.enterQueueImmediately(e.q);!this.done&&!t.done;){if(this.collidedWidth(t)){e.play(We.explosion),e.gameOver(!1);break}for(let t=0;t<s.length;t++){const n=s[t];if(n instanceof Ue&&this.collidedWidth(n)){e.play(We.explosion),n.done=!0,this.done=!0,e.asteroidsDestroyed++,e.onAsteroidsDestroyedChanged(),8==e.asteroidsDestroyed&&e.gameOver(!0);break}}await this.delay(n),this.updatePosition(n,!0),this.angle=(this.angle+a)%360}this.leaveQueue(e.q)}}class je extends L{constructor(e){super(),this.q=new f,this.step=.02,this.bounds=[new y,new y(1e3,500)],this._eCnt=8,this.slowMode=!1,m(this,e)}get slowMode(){return 20==this.frameDelay}set slowMode(e){this.frameDelay=e?20:1}get entityCount(){return this._eCnt}set entityCount(e){e!=this._eCnt&&(this._eCnt=e,this.start(!0))}getRandomPosition(){return new y(Math.round(Math.random()*this.bounds[1].x),Math.round(Math.random()*this.bounds[1].y))}}class Je extends A{constructor(e){super(),this._speed=0,this._speedMin=0,this._speedMax=null,this._accel=0,this._angle=0,this._sin=0,this._cos=1,this._pos=new y,this._steerAngle=0,this._steerAngleMax=90,this._lastUpdate=0,this.color="black",this.radius=25,this.behaviors=[],m(this,e)}get position(){return this._pos}set position(e){this._pos=e}get angle(){return this._angle}set angle(e){for(;e>180;)e-=360;for(;e<-180;)e+=360;this._angle=e,this._sin=Math.sin(e*Math.PI/180),this._cos=Math.cos(e*Math.PI/180)}get steerAngle(){return this._steerAngle}set steerAngle(e){this._steerAngle=w(e,-this.steerAngleMax,this.steerAngleMax)}get steerAngleMax(){return this._steerAngleMax}set steerAngleMax(e){this._steerAngleMax=e,this.steerAngle=this._steerAngle}get speed(){return this._speed}set speed(e){this._speed=w(e,this.speedMin,this.speedMax)}get speedMin(){return this._speedMin}set speedMin(e){this._speedMin=e,this.speed=this._speed}get speedMax(){return this._speedMax}set speedMax(e){this._speedMax=e,this.speed=this._speed}get acceleration(){return this._accel}set acceleration(e){this._accel=e}updatePosition(e){if(this.behaviors)for(let s=0;s<this.behaviors.length;s++){if(this.behaviors[s].applyBehavior(this,e))break}this.angle+=this.steerAngle*e,this.speed+=this.acceleration*e;const t=this.position;t.x+=this.speed*this._cos*e,t.y+=this.speed*this._sin*e}getTurnAngle(e,t,s=2){const n=Math.max(s,s*t);let i=e-this.angle;return i<-180?i+=360:i>180&&(i-=360),Math.abs(i)<n?e:this.angle+n*Math.sign(i)}getAnimationPosition(e,t,s){const n=this.simulation.timeNow;return this.updatePosition(n-this._lastUpdate),this._lastUpdate=n,this}async script(){const e=this.simulation;for(this.enterQueueImmediately(e.q);;)await this.delay(e.step)}}class Ye{constructor(e){m(this,e)}applyBehavior(e,t){return this.entity=e,!1}}class Ke extends Ye{applyBehavior(e,t){super.applyBehavior(e,t);const s=e.simulation.bounds;if(s){const t=e.position;t.x<s[0].x?t.x=s[1].x:t.x>s[1].x&&(t.x=s[0].x),t.y<s[0].y?t.y=s[1].y:t.y>s[1].y&&(t.y=s[0].y)}return!1}}class Ze extends Ye{applyBehavior(e,t){super.applyBehavior(e,t);const s=e.simulation.bounds;if(s){const t=e.position;t.x<s[0].x||t.x>s[1].x?e.angle=180-e.angle:(t.y<s[0].y||t.y>s[1].y)&&(e.angle=-e.angle)}return!1}}class et extends Ye{constructor(e){super(),this.changeInterval=10,this.steerChange=null,this.speedChange=null,this._timeLastChange=0,m(this,e)}applyBehavior(e,t){super.applyBehavior(e,t);const s=e.simulation.timeNow;return s-this._timeLastChange>=this.changeInterval&&(null!=this.steerChange&&(e.steerAngle+=this.steerChange.sample()),null!=this.speedChange&&(e.speed+=this.speedChange.sample()),this._timeLastChange=s),!1}}class tt extends Ye{constructor(e){super(),this.target=null,this.maxTurnAngle=2,this.arrive=new h,m(this,e)}applyBehavior(e,t){if(super.applyBehavior(e,t),this.target){const s=e.simulation,n=y.distance(e.position,this.target),i=n/(s.bounds[1].x/2);e.speed=e.speedMax*i;let a=y.angle(e.position,this.target);e.angle=e.getTurnAngle(a,t,this.maxTurnAngle),n<e.radius&&this.onArrive()}return!1}onArrive(e){this.arrive.raise(this,e)}}class st extends Ye{constructor(e){super(),this.obstacles=[],this.avoidColor="",this.slowDown=.75,this.turnAngle=.5,this._currentObstacle=null,this._saveColor="",this._saveSpeed=0,m(this,e)}applyBehavior(e,t){super.applyBehavior(e,t);const s=this._getNearestObstacle(t);if(s!=this._currentObstacle&&(null==this._currentObstacle&&null!=s?(this.avoidColor&&(this._saveColor=e.color,e.color=this.avoidColor),this._saveSpeed=e.speed,e.speed*=this.slowDown):null!=this._currentObstacle&&null==s&&(this._saveColor&&(e.color=this._saveColor),e.speed=this._saveSpeed),this._currentObstacle=s),null!=s){const n=this._getAvoidDirection(s);e.angle=e.getTurnAngle(e.angle+this.turnAngle*n,t),e.steerAngle=0}return null!=s}_getNearestObstacle(e){const t=this.entity,s=t.position,n={x:s.x+t._cos,y:s.y+t._sin};let i=null,a=null;return this.obstacles.forEach((r=>{if(r!=t){const o=r.radius+t.radius+t.speed*e,l=y.distance(s,r.position)-o;(null==a||l<a)&&l<t.radius&&y.distance(n,r.position)-o<l&&(a=l,i=r)}})),i}_getAvoidDirection(e){const t=this.entity,s=t.position,n=y.distance(s,e.position),i={x:s.x+n*t._cos,y:s.y+n*t._sin},a=t.radius+e.radius,r=this._getBoundaryPoint(e,-a),o=this._getBoundaryPoint(e,+a);return y.distance(i,r)<y.distance(i,o)?-1:1}_getBoundaryPoint(e,t){const s=this.entity.position,n=y.distance(s,e.position),i=y.angle(s,e.position,!0)+Math.atan2(t,n);return{x:s.x+n*Math.cos(i),y:s.y+n*Math.sin(i)}}}function nt(e){return{color:"orange",speedMin:10,speedMax:50,speed:10+40*Math.random(),steerAngleMax:45,angle:Math.round(360*Math.random()),position:e.getRandomPosition()}}class it extends je{constructor(e){super(),this.bounce=!1,m(this,e)}onStarting(e){super.onStarting(e);for(let t=0;t<this.entityCount;t++){const e=new Je(a(a({},nt(this)),{behaviors:[new et({steerChange:new x(-20,20),speedChange:new x(-20,20)}),this.bounce?new Ze:new Ke]}));this.activate(e)}}}class at extends je{onStarting(e){super.onStarting(e);for(let t=0;t<this.entityCount;t++){const e=new Je(a(a({},nt(this)),{behaviors:[new tt({target:{x:this.bounds[1].x/2,y:this.bounds[1].y/2},maxTurnAngle:.5,arrive:e=>{e.entity.position=this.getRandomPosition()}})]}));this.activate(e)}}}class rt extends je{onStarting(e){super.onStarting(e);for(let t=0;t<this.entityCount;t++){const e=new Je(a(a({},nt(this)),{behaviors:[new et({steerChange:new x(-20,20),speedChange:new x(-50,50)}),new Ke]}));this.activate(e);const t=new Je({color:"red",speedMax:100,position:this.getRandomPosition(),behaviors:[new tt({target:e.position})]});this.activate(t)}}}const ot=[{position:{x:100,y:400},radius:50},{position:{x:150,y:300},radius:30},{position:{x:200,y:150},radius:80},{position:{x:500,y:250},radius:125},{position:{x:800,y:200},radius:50},{position:{x:800,y:400},radius:75}];class lt extends je{constructor(e){super(),this.obstacles=ot,this.avoidEntities=!1,m(this,e)}onStarting(e){super.onStarting(e);const t=[...this.obstacles];for(let s=0;s<this.entityCount;s++){const e=new Je(a(a({},nt(this)),{behaviors:[new st({obstacles:t,avoidColor:"red"}),new et({steerChange:new x(-20,20),speedChange:new x(-50,50)}),new Ke]}));e.position.y=0,this.activate(e),this.avoidEntities&&t.push(e)}}}class ht extends je{onStarting(e){super.onStarting(e);const t=[],s=new Je(a(a({},nt(this)),{behaviors:[new st({obstacles:t}),new et({steerChange:new x(-10,10),speedChange:new x(-50,50)}),new Ke]}));s.color="green",s.steerAngleMax=30,this.activate(s),t&&t.push(s);for(let n=0;n<this.entityCount;n++){const e=new Je(a(a({},nt(this)),{behaviors:[new st({obstacles:t,avoidColor:"red",slowDown:.5}),new tt({target:s.position})]}));this.activate(e),t&&t.push(e)}}}class ct extends L{constructor(){super(...arguments),this.lines=new f("Phone Lines",2),this.totalDuration=new f("Total Duration"),this.callArrival=new x(40,160),this.callDuration=new x(120,240)}onStarting(e){super.onStarting(e),this.timeUnit="s",this.totalDuration.grossDwell.setHistogramParameters(600,0,7200),this.generateEntities(ut,this.callArrival,200)}}class ut extends A{async script(){const e=this.simulation;let t=!1;for(this.enterQueueImmediately(e.totalDuration);!t;)e.lines.canEnter(1)?(this.enterQueueImmediately(e.lines),await this.delay(e.callDuration.sample()),this.leaveQueue(e.lines),t=!0):await this.delay(300);this.leaveQueue(e.totalDuration)}}class dt extends L{constructor(){super(...arguments),this.stock=1e3,this.reorder=800,this.target=1e3,this.stockOuts=0,this.demand=new P(23)}onStarting(e){super.onStarting(e),this.timeUnit="days",this.stock=1e3,this.stockOuts=0,this.stockHistory=[];this.generateEntities(pt,1,200),this.generateEntities(mt,5,40)}getDemandQty(){return 40+this.demand.sample()}}class pt extends A{async script(){const e=this.simulation,t=e.getDemandQty();t>e.stock?e.stockOuts++:e.stock-=t,e.stockHistory.push(e.stock)}}class mt extends A{async script(){const e=this.simulation;if(e.stock<e.reorder){const t=e.target-e.stock;t>0&&(e.stock+=t)}}}class gt extends L{constructor(){super(...arguments),this.qRepairMan=new f("RepairMan",1),this.qAllJobs=new f("Wait All Jobs"),this.qOverhaulJobs=new f("Wait Overhaul Jobs"),this.qOnTheSpotJobs=new f("Wait On-The-Spot Jobs"),this.qCustomerJobs=new f("Wait Customer Jobs"),this.interArrOverhaul=new x(1920,2880),this.serviceOverhaul=new x(540,660),this.interArrOnTheSpot=new x(80,100),this.serviceOnTheSpot=new x(10,20),this.interArrCustomer=new x(240,360),this.serviceCustomer=new x(90,150)}onStarting(e){super.onStarting(e),this.timeUnit="hours",this.timeEnd=24e3,this.generateEntities(wt,this.interArrOverhaul),this.generateEntities(bt,this.interArrOnTheSpot),this.generateEntities(yt,this.interArrCustomer)}}class wt extends A{async script(){const e=this.simulation;this.priority=1,await this.seize(e.qRepairMan,e.serviceOverhaul.sample(),[e.qAllJobs,e.qOverhaulJobs],e.qRepairMan)}}class yt extends A{async script(){const e=this.simulation;this.priority=2,await this.seize(e.qRepairMan,e.serviceCustomer.sample(),[e.qAllJobs,e.qCustomerJobs],e.qRepairMan)}}class bt extends A{async script(){const e=this.simulation;this.priority=3,await this.seize(e.qRepairMan,e.serviceOnTheSpot.sample(),[e.qAllJobs,e.qOnTheSpotJobs],e.qRepairMan)}}class ft extends L{constructor(){super(...arguments),this.m1=new f("Machine 1",1),this.m2=new f("Machine 2",1),this.m3=new f("Machine 3",1),this.timeP1=new _([10,10,14,21,32,38,45],[0,.05,.18,.34,.56,.85,1]),this.timeP2=new x(9,21),this.timeP3=new M(24,4),this.timeInspection=2,this.cntCompleted=0,this.cntRejected=0}onStarting(e){super.onStarting(e),this.timeUnit="min",this.timeEnd=null,this.cntCompleted=0,this.cntRejected=0,this.generateEntities(vt,new k(30))}}class vt extends A{async script(){const e=this.simulation;for(let t=!1;!t;)if(await this.enterQueue(e.m1),await this.delay(e.timeP1.sample()),this.leaveQueue(e.m1),await this.delay(e.timeInspection),t=Math.random()>.2,!t&&Math.random()>.4)return void e.cntRejected++;for(let t=!1;!t;)if(await this.enterQueue(e.m2),await this.delay(e.timeP2.sample()),this.leaveQueue(e.m2),await this.delay(e.timeInspection),t=Math.random()>.15,!t&&Math.random()>.4)return void e.cntRejected++;for(let t=!1;!t;)if(await this.enterQueue(e.m3),await this.delay(e.timeP3.sample()),this.leaveQueue(e.m3),await this.delay(e.timeInspection),t=Math.random()>.05,!t&&Math.random()>.4)return void e.cntRejected++;e.cntCompleted++,e.cntCompleted>=100&&(e.timeEnd=e.timeNow)}}class qt extends L{constructor(){super(...arguments),this.stock=700,this.economicOrderQuantity=500,this.orderPoint=600,this.leadTime=5,this.demand=new x(40,63),this.stockTally=new b}onStarting(e){super.onStarting(e),this.timeUnit="days",this.stock=700,this.timeEnd=100,this.dailyOrders=[],this.inventoryLevel=[],this.stockTally.reset(),this.generateEntities(xt),this.generateEntities(St,1)}}class xt extends A{async script(){const e=this.simulation;for(;;){let t=e.stock<=e.orderPoint?e.economicOrderQuantity:0;t?(await this.delay(e.leadTime),e.stock+=t):await this.delay(1)}}}class St extends A{async script(){const e=this.simulation;let t=Math.round(e.demand.sample());e.stock=Math.max(0,e.stock-t),e.dailyOrders.push(t),e.inventoryLevel.push(e.stock),e.stockTally.add(e.stock)}}class _t extends L{constructor(){super(...arguments),this.interArrOrders=new k(15),this.orderSize=new _([6,6,12,18,24,30,36,48],[0,.1,.35,.65,.8,.92,.97,1]),this.qMachine=new f("Packing Machine",1),this.qPacking=new f("Packing Area"),this.qOrderTransit=new f("Order Transit"),this.capy=4e3,this.stock=1e3,this.stockOut=0,this.dispatched=0}onStarting(e){super.onStarting(e),this.timeUnit="min",this.stock=1e3,this.stockOut=0,this.dispatched=0,this.timeEnd=7200,this.qOrderTransit.grossDwell.setHistogramParameters(1,0,15),this.generateEntities(kt,this.interArrOrders),this.activate(new Et)}}class kt extends A{async script(){const e=this.simulation,t=Math.round(e.orderSize.sample());if(t<=e.stock){this.enterQueueImmediately(e.qOrderTransit),e.stock-=t,this.enterQueueImmediately(e.qPacking),await this.enterQueue(e.qMachine),this.leaveQueue(e.qPacking);const s=2+10*t/60;await this.delay(s),this.leaveQueue(e.qMachine),this.leaveQueue(e.qOrderTransit),e.dispatched+=t}else e.stockOut+=t}}class Et extends A{constructor(){super(...arguments),this.makerDelay=new x(40,44)}async script(){const e=this.simulation;for(;;)await this.delay(this.makerDelay.sample()),e.stock+=60}}class Tt extends L{constructor(){super(...arguments),this.qReducers=new f("Reducers",5),this.qSpinners=new f("Spinners",40),this.qWinders=new f("Winders",8),this.timeReduce=new x(36,40),this.timeSpin=new x(300,340),this.timeWind=new x(60,68),this.reduced=50,this.spun=25,this.wound=25}onStarting(e){super.onStarting(e),this.timeUnit="min",this.reduced=50,this.spun=25,this.wound=25,this.recReduced=[],this.recWound=[],this.recSpun=[],this.timeEnd=2400,this.generateEntities(Mt,20),this.activate(new Ct),this.activate(new Pt)}}class Mt extends A{async script(){const e=this.simulation;await this.enterQueue(e.qReducers),await this.delay(e.timeReduce.sample()),this.leaveQueue(e.qReducers),e.reduced++,await this.enterQueue(e.qSpinners),await this.delay(e.timeSpin.sample()),this.leaveQueue(e.qSpinners),e.reduced--,e.spun++,await this.enterQueue(e.qWinders),await this.delay(e.timeWind.sample()),this.leaveQueue(e.qWinders),e.spun--,e.wound++}}class Ct extends A{async script(){const e=this.simulation;for(;;)await this.delay(960),e.wound>=20&&(e.wound-=20)}}class Pt extends A{async script(){const e=this.simulation;for(;;)e.recReduced.push(e.reduced),e.recWound.push(e.wound),e.recSpun.push(e.spun),await this.delay(480)}}class Dt extends L{constructor(){super(...arguments),this.depot=new f("depot",12),this.pumps=[new f("pumpA",1),new f("pumpB",1),new f("pumpC",1)],this.simulatedDays=5,this.orderSize=new x(300,500),this.interArrival=new zt,this.gallonsSold=0}onStarting(e){super.onStarting(e),this.timeUnit="min",this.timeEnd=24*this.simulatedDays*60,this.gallonsSold=0,this.generateEntities(At,this.interArrival)}get gallonsSoldPerDay(){return this.gallonsSold/this.simulatedDays}}class At extends A{async script(){const e=this.simulation,t=10*Math.round(e.orderSize.sample()),s=Math.floor(3*Math.random()),n=e.pumps[s],i=[6,5,7][s],a=2+.5*e.depot.pop+t/1e3*i;await this.enterQueue(e.depot),await this.enterQueue(n),await this.delay(a),this.leaveQueue(n),this.leaveQueue(e.depot),e.gallonsSold+=t}}class zt extends q{constructor(){super(...arguments),this._r1=new k(18),this._r2=new _([0,.45,1,1.5,2],[0,.2,.6,.85,1])}sample(){return this._r1.sample()/this._r2.sample()}}class $t extends L{constructor(){super(...arguments),this.qOrders=new f("Orders"),this.qBaseStation=new f("Base Station",1),this.qPumps=new f("Pumps",1),this.qBaseplate=new f("Baseplate",1),this.qPaintMotor=new f("Paint Motor",1),this.qPaintPump=new f("Paint Pump",1),this.qGalvanize=new f("Galvanize",1),this.orderArrivalInterval=new k(300),this.obtainMotorDelay=new x(100,300),this.orderPumpDelay=new x(60,300),this.makeBaseplateDelay=new x(60,100),this.testFittingDelay=new x(40,60),this.trialAssemblyDelay=60,this.finalAssemblyDelay=new x(120,180),this.paintMotorDelay=new x(80,120),this.paintPumpDelay=new x(90,150),this.galvanizeDelay=new x(90,150)}onStarting(e){super.onStarting(e),this.timeUnit="min",this.generateEntities(Qt,this.orderArrivalInterval,50)}}class Qt extends A{constructor(){super(...arguments),this.pumpReady=!1,this.baseplateReady=!1}async script(){const e=this.simulation;this.enterQueueImmediately(e.qOrders);const t=new Lt(this);e.activate(t);const s=new Rt(this);for(e.activate(s),await this.enterQueue(e.qBaseStation),await this.delay(e.obtainMotorDelay.sample()),this.leaveQueue(e.qBaseStation),await this.enterQueue(e.qPaintMotor),await this.delay(e.paintMotorDelay.sample()),this.leaveQueue(e.qPaintMotor);!this.pumpReady||!this.baseplateReady;)await this.waitSignal(this);await this.delay(e.testFittingDelay.sample()),await this.delay(e.trialAssemblyDelay),await this.delay(e.finalAssemblyDelay.sample()),this.leaveQueue(e.qOrders)}}class Lt extends A{constructor(e){super(),this.owner=e}async script(){const e=this.simulation;await this.enterQueue(e.qPumps),await this.delay(e.orderPumpDelay.sample()),this.leaveQueue(e.qPumps),await this.enterQueue(e.qPaintPump),await this.delay(e.paintPumpDelay.sample()),this.leaveQueue(e.qPaintPump),this.owner.pumpReady=!0,this.sendSignal(this.owner)}}class Rt extends A{constructor(e){super(),this.owner=e}async script(){const e=this.simulation;await this.enterQueue(e.qBaseplate),await this.delay(e.makeBaseplateDelay.sample()),this.leaveQueue(e.qBaseplate),await this.enterQueue(e.qGalvanize),await this.delay(e.galvanizeDelay.sample()),this.leaveQueue(e.qGalvanize),this.owner.baseplateReady=!0,this.sendSignal(this.owner)}}class It extends L{constructor(){super(...arguments),this.componentArrivalInterval=new k(150),this.gripRelease=new x(7,9),this.machine1Process=new M(60,10),this.machine2Process=new k(100),this.moveRobotDelay=6,this.qJobs=new f("Jobs"),this.qRobot=new f("Robot",1),this.qMachine1=new f("Machine 1",1),this.qMachine2=new f("Machine 2",1)}onStarting(e){super.onStarting(e),this.timeUnit="s",this.generateEntities(Nt,this.componentArrivalInterval,75)}}class Nt extends A{async script(){const e=this.simulation;this.enterQueueImmediately(e.qJobs),await this.enterQueue(e.qRobot),await this.delay(e.gripRelease.sample()),await this.delay(6),await this.delay(e.gripRelease.sample()),this.leaveQueue(e.qRobot),await this.enterQueue(e.qMachine1),await this.delay(e.machine1Process.sample()),this.leaveQueue(e.qMachine1),await this.enterQueue(e.qRobot),await this.delay(e.gripRelease.sample()),await this.delay(7),await this.delay(e.gripRelease.sample()),this.leaveQueue(e.qRobot),await this.enterQueue(e.qMachine2),await this.delay(e.machine2Process.sample()),this.leaveQueue(e.qMachine2),await this.enterQueue(e.qRobot),await this.delay(e.gripRelease.sample()),await this.delay(5),await this.delay(e.gripRelease.sample()),this.leaveQueue(e.qRobot),this.leaveQueue(e.qJobs)}}class Ot extends L{constructor(){super(...arguments),this.qTransit=new f("Transit"),this.qClerks=new f("Clerks",2),this.qFramers=new f("Framers",3),this.qSaddlers=new f("Saddlers",1),this.qHandlers=new f("Handlers",1),this.qWheelers=new f("Wheelers",1),this.qPedalers=new f("Pedalers",1),this.qAssemblers=new f("Assemblers",4),this.qPackers=new f("Packers",3),this.prepareInvoiceDelay=new x(70,90),this.makeFrameDelay=new k(65),this.getSaddleDelay=new x(3,9),this.getHandleDelay=new x(2,6),this.getWheelsDelay=new x(2,4),this.getPedalsDelay=new x(4,6),this.inspectPartDelay=new x(2,4),this.inspectAssemblyDelay=new x(30,40),this.assembleDelay=new M(90,10),this.packDelay=new x(35,45)}onStarting(e){super.onStarting(e),this.timeUnit="min",this.timeEnd=2400,this.generateEntities(Bt,new x(40,60))}}class Bt extends A{constructor(){super(...arguments),this.paperwork=!1,this.frame=!1,this.saddle=!1,this.handle=!1,this.wheel=!1,this.pedal=!1}async script(){const e=this.simulation;for(this.enterQueueImmediately(e.qTransit),e.activate(new Ht(this)),e.activate(new Ft(this)),e.activate(new Gt(this)),e.activate(new Xt(this)),e.activate(new Ut(this)),e.activate(new Vt(this));!(this.frame&&this.saddle&&this.handle&&this.wheel&&this.pedal);)await this.waitSignal(this);for(await this.enterQueue(e.qAssemblers),await this.delay(e.assembleDelay.sample()),await this.delay(e.inspectAssemblyDelay.sample()),this.leaveQueue(e.qAssemblers);!this.paperwork;)await this.waitSignal(this);await this.enterQueue(e.qPackers),await this.delay(e.packDelay.sample()),this.leaveQueue(e.qPackers),this.leaveQueue(e.qTransit)}}class Wt extends A{constructor(e){super(),this.owner=e}}class Ht extends Wt{async script(){const e=this.simulation;await this.enterQueue(e.qFramers),await this.delay(e.makeFrameDelay.sample()),this.leaveQueue(e.qFramers),this.owner.frame=!0,this.sendSignal(this.owner)}}class Ft extends Wt{async script(){const e=this.simulation;await this.enterQueue(e.qSaddlers),await this.delay(e.getSaddleDelay.sample()),await this.delay(e.inspectPartDelay.sample()),this.leaveQueue(e.qSaddlers),this.owner.saddle=!0,this.sendSignal(this.owner)}}class Gt extends Wt{async script(){const e=this.simulation;await this.enterQueue(e.qHandlers),await this.delay(e.getHandleDelay.sample()),await this.delay(e.inspectPartDelay.sample()),this.leaveQueue(e.qHandlers),this.owner.handle=!0,this.sendSignal(this.owner)}}class Xt extends Wt{async script(){const e=this.simulation;await this.enterQueue(e.qWheelers),await this.delay(e.getWheelsDelay.sample()),await this.delay(e.inspectPartDelay.sample()),this.leaveQueue(e.qWheelers),this.owner.wheel=!0,this.sendSignal(this.owner)}}class Ut extends Wt{async script(){const e=this.simulation;await this.enterQueue(e.qPedalers),await this.delay(e.getPedalsDelay.sample()),await this.delay(e.inspectPartDelay.sample()),this.leaveQueue(e.qPedalers),this.owner.pedal=!0,this.sendSignal(this.owner)}}class Vt extends Wt{async script(){const e=this.simulation;await this.enterQueue(e.qClerks),await this.delay(e.prepareInvoiceDelay.sample()),this.leaveQueue(e.qClerks),this.owner.paperwork=!0,this.sendSignal(this.owner)}}class jt extends L{constructor(){super(...arguments),this.stock=[3400,430,600,1e3],this.orderPoint=[2100,240,430,630],this.orderQty=[2300,115,165,200],this.weeklyDemand=[null,new M(64,24),new M(128,32),new M(192,48)],this.leadTime=[4,1,1,1],this.stockHistory=[[],[],[],[],[]],this.stockTallies=[],this.salesTally=new b,this.stockouts=0}onStarting(e){super.onStarting(e),this.timeUnit="weeks",this.stock=[3400,430,600,1e3],this.stockHistory=[[],[],[],[],[]],this.stockTallies=[new b,new b,new b,new b],this.salesTally=new b,this.stockouts=0,this.timeEnd=75,this.activate(new Jt),this.activate(new Yt);for(let t=1;t<=3;t++)this.activate(new Kt(t))}}class Jt extends A{async script(){const e=this.simulation;for(;;){await this.delay(1);let t=0;for(let s=1;s<=3;s++){let n=e.weeklyDemand[s].sample();n>e.stock[s]&&(console.log(`stockout at branch ${s}`),e.stockouts++,n=e.stock[s]),e.stock[s]-=n,t+=n}e.salesTally.add(t);for(let s=0;s<=3;s++)e.stockTallies[s].add(e.stock[s]),e.stockHistory[s].push(e.stock[s])}}}class Yt extends A{async script(){const e=this.simulation;for(;;)e.stock[0]<e.orderPoint[0]?(await this.delay(e.leadTime[0]),e.stock[0]+=e.orderQty[0]):await this.delay(1)}}class Kt extends A{constructor(e){super(),this.branch=e}async script(){const e=this.simulation;for(;;)if(e.stock[this.branch]<e.orderPoint[this.branch]){await this.delay(e.leadTime[this.branch]);let t=e.orderQty[this.branch];t>e.stock[0]&&(e.stockouts++,console.log(`warehouse stockout supplying branch ${this.branch}`),t=e.stock[0]),e.stock[0]-=t,e.stock[this.branch]+=t}else await this.delay(1)}}class Zt extends L{constructor(){super(...arguments),this.interArrival=new k(500),this.rCt=new f("Res Ct",1),this.qCt=new f("Queue Ct"),this.delayCt=300,this.rExp=new f("Res Exp",1),this.qExp=new f("Queue Exp"),this.delayExp=new k(300),this.rErl=new f("Res Erlang",1),this.qErl=new f("Queue Erlang"),this.delayErl=new E(2,150)}onStarting(e){super.onStarting(e),this.timeUnit="1/100 s",this.timeEnd=3e7,this.generateEntities(es,this.interArrival),this.generateEntities(ts,this.interArrival),this.generateEntities(ss,this.interArrival)}}class es extends A{async script(){const e=this.simulation;this.enterQueueImmediately(e.qCt),await this.enterQueue(e.rCt),await this.delay(e.delayCt),this.leaveQueue(e.rCt),this.leaveQueue(e.qCt)}}class ts extends A{async script(){const e=this.simulation;this.enterQueueImmediately(e.qExp),await this.enterQueue(e.rExp),await this.delay(e.delayExp.sample()),this.leaveQueue(e.rExp),this.leaveQueue(e.qExp)}}class ss extends A{async script(){const e=this.simulation;this.enterQueueImmediately(e.qErl),await this.enterQueue(e.rErl),await this.delay(e.delayErl.sample()),this.leaveQueue(e.rErl),this.leaveQueue(e.qErl)}}class ns extends L{constructor(){super(...arguments),this.arrivalRateJunction=new os,this.arrivalRateNorth=new x(5500,6500),this.arrivalRateSouth=new x(5e3,6e3),this.crossJunction=new x(900,1500),this.crossTraffic=new E(4,90),this.mergeTraffic=new E(5,80),this.qTransit=new f("Transit"),this.qCross=new f("Cross"),this.qAisle=new f("Aisle",8),this.qNorthLane=new f("N Lane",1),this.qSouthLane=new f("S Lane",1),this.tCross=new b,this.tMerge=new b}onStarting(e){super.onStarting(e),this.timeUnit="1/100 s",this.timeEnd=6e4,this.tCross.reset(),this.tMerge.reset(),this.generateEntities(is,this.arrivalRateJunction),this.generateEntities(as,this.arrivalRateNorth),this.generateEntities(rs,this.arrivalRateSouth)}}class is extends A{async script(){const e=this.simulation;await this.enterQueue(e.qCross),await this.enterQueue(e.qAisle),await this.enterQueue(e.qTransit);const t=e.crossTraffic.sample();e.tCross.add(t),await this.seize(e.qSouthLane,t),this.leaveQueue(e.qCross);const s=e.mergeTraffic.sample();e.tMerge.add(s),await this.seize(e.qNorthLane,s),this.leaveQueue(e.qTransit),this.leaveQueue(e.qAisle)}}class as extends A{async script(){const e=this.simulation;await this.seize(e.qNorthLane,e.crossJunction.sample())}}class rs extends A{async script(){const e=this.simulation;await this.seize(e.qSouthLane,e.crossJunction.sample())}}class os extends q{constructor(){super(...arguments),this.e1=new k(410),this.e2=new k(1343)}sample(){return super.sample()<.766?this.e1.sample():this.e2.sample()}}class ls extends L{constructor(){super(...arguments),this.qParking=new f("Parking",650),this.qTransit=new f("Transit"),this.qBasket=new f("Basket",70),this.qCart=new f("Cart",650),this.qCheckout=new f("Checkout",17),this.qCheckoutX=new f("Checkout Express",1),this.walkDelay=600,this.itemQty=new x(5,100),this.payMethod=new x(0,2)}onStarting(e){super.onStarting(e),this.timeUnit="1/10 s";this.timeEnd=108e3,this.generateEntities(hs,new k(60),null,0,18e3),this.generateEntities(hs,new k(40),null,18e3,54e3),this.generateEntities(hs,new k(120),null,54e3),this.customers=[],this.activate(new cs)}}class hs extends A{constructor(){super(...arguments),this.itemQty=0,this.paymentMethod=0}async script(){const e=this.simulation;if(!e.qParking.canEnter(1))return;await this.enterQueue(e.qParking),await this.delay(e.walkDelay),await this.enterQueue(e.qTransit),this.itemQty=Math.round(e.itemQty.sample()),this.paymentMethod=Math.round(e.payMethod.sample());const t=this.itemQty<=10?e.qBasket:e.qCart;await this.enterQueue(t),await this.delay(100*this.itemQty);const s=this.itemQty<=10&&e.qCheckoutX.canEnter(1)?e.qCheckoutX:e.qCheckout;await this.enterQueue(s);const n=20*this.itemQty+(250+50*this.paymentMethod);await this.delay(n),this.leaveQueue(s),this.leaveQueue(e.qTransit),await this.delay(e.walkDelay),this.leaveQueue(t),this.leaveQueue(e.qParking)}}class cs extends A{async script(){const e=this.simulation;for(;;)e.customers.push(e.qTransit.pop),await this.delay(600)}}class us extends L{constructor(){super(...arguments),this.highTide=!1,this.shipArrival=new k(26),this.unloadDelay=[new k(15),new k(30),new k(45)],this.loadDelay=[new x(18,30),new x(26,46),new x(44,68)],this.units=[1,2,4],this.qTransit=[new f("Small Ships"),new f("Medium Ships"),new f("Large Ships")],this.qBerths=[new f("Berth 1",2),new f("Berth 2",4),new f("Berth 3",4)]}onStarting(e){super.onStarting(e),this.timeUnit="hours",this.timeEnd=12e3,this.activate(new ws),this.generateEntities(ys,this.shipArrival)}}var ds,ps,ms,gs;(ps=ds||(ds={}))[ps.Low=0]="Low",ps[ps.High=1]="High",(gs=ms||(ms={}))[gs.Small=0]="Small",gs[gs.Medium=1]="Medium",gs[gs.Large=2]="Large";class ws extends A{async script(){const e=this.simulation;for(;;)e.highTide=!1,this.sendSignal(0),await this.delay(3),e.highTide=!0,this.sendSignal(1),await this.delay(10)}}class ys extends A{async script(){const e=this.simulation,t=Math.random();this.shipSize=t<=.5?0:t<=.8?1:2,this.priority=this.shipSize;const s=e.qTransit[this.shipSize];for(this.enterQueueImmediately(s);2==this.shipSize&&!e.highTide;)await this.waitSignal(1);const n=this.getBerth(),i=e.units[this.shipSize];for(await this.enterQueue(n,i),await this.delay(e.unloadDelay[this.shipSize].sample()),await this.delay(e.loadDelay[this.shipSize].sample()),this.leaveQueue(n);2==this.shipSize&&!e.highTide;)await this.waitSignal(1);this.leaveQueue(s)}getBerth(){const e=this.simulation.qBerths;switch(this.shipSize){case 0:case 1:let t=-1,s=-1;return e.forEach(((e,n)=>{(s<0||e.pop<s||e.pop==s&&Math.random()<.5)&&(s=e.pop,t=n)})),e[t];case 2:return e[1].pop<e[2].pop?e[1]:e[2].pop<e[1].pop?e[2]:Math.random()<.5?e[1]:e[2]}}}N("GPSS-Inspired Samples",'<p>\n        These samples were inspired by the\n        <a href="http://www.minutemansoftware.com/tutorial/tutorial_manual.htm">GPSS samples</a>\n        published by Minuteman software.</p>\n    <p>\n        They show how you can use SimScript to simulate a wide range of practical\n        applications and allow you to compare results obtained by GPSS and SimScript.</p>'),B(new ct,"Telephone","<p>\n        A simple telephone system has two external lines.\n        Calls, which originate externally, arrive every 100±60 seconds.\n        When the line is occupied, the caller redials after 5±1 minutes have elapsed.\n        Call duration is 3±1 minutes.</p>\n    <p>\n        A tabulation of the distribution of the time each caller takes to make a\n        successful call is required.</p>\n    <ol>\n        <li>\n            How long will it take for 200 calls to be completed?\n            GPSS says <b>359.16</b> minutes,\n            SimScript says <b><span id='gpss-tel-total'>?</span></b> minutes.</li>\n        <li>\n            How long did it take callers to complete their calls?\n            GPSS says most calls were completed in less than <b>9.5</b> minutes,\n            but <i>many took much longer</i>.\n            SimScript says the average call took\n            <b><span id='gpss-tel-complete'>?</span></b> minutes.</li>\n        <li>\n            What is the utilization of the phone lines?\n            GPSS says the lines are utilized at <b>84%</b> of capacity,\n            SimScript says <b><span id='gpss-tel-utz'>?</span>%</b>.</li>\n    </ol>",((e,t)=>{W("#gpss-tel-total",u(e.timeNow/60)),W("#gpss-tel-complete",u(e.totalDuration.averageDwell/60)),W("#gpss-tel-utz",u(100*e.lines.utilization,0)),t.innerHTML=e.totalDuration.grossDwell.getHistogramChart("Call Duration (min)",1/60)})),B(new dt,"Inventory","<p>\n        A finished product inventory is controlled by means of a weekly\n        review system.\n        The initial stock is 1,000 units.\n        The daily demand varies between 40 and 63 units with equal probability.\n        The target inventory is 1,000 units, that is, the order is placed for the\n        difference between the current stock and 1,000 units.\n        If the current stock is 800 or more, no order is placed for that week.\n        The company operates a five-day week. The lead time for delivery of an\n        order is one week.</p>\n    <p>\n        Simulate the inventory system for 200 days and determine if any stockouts occur.\n        GPSS says there won't be any. SimScript says there will be\n        <b><span id='gpss-inv-stockout'>?</span></b>.</p>",((e,t)=>{W("#gpss-inv-stockout",u(e.stockOuts,0)),t.innerHTML=F("Stock",{data:e.stockHistory,color:"green",showPoints:!0})})),B(new gt,"TV Repair Shop","<p>\n        A television shop employs a single repairman to overhaul its\n        rented television sets, service customers’ sets and do\n        on-the-spot repairs.</p>\n    <ul>\n        <li>\n            Overhaul of company owned television sets commences every 40±8\n            hours and takes 10±1 hours to complete.</li>\n        <li>\n            On-the-spot repairs, such as fuse replacement, tuning and\n            adjustments are done immediately. These arrive every 90±10 minutes\n            and take 15±5 minutes.</li>\n        <li>\n            Customers’ television sets requiring normal service arrive every\n            5±1 hours and take 120±30 minutes to complete.</li>\n    </ul>\n    <p>\n        Normal service of television sets has a higher priority than the \n        overhaul of company owned, rented sets; on-the-spot repairs have\n        the highest priority.</p>\n    <p>\n        After 50 days of operation, determine the following:</p>\n    <ol>\n        <li>\n            The repairman utilization. GPSS says <b>78%</b>,\n            SimScript says <b><span id='tv-utz'>?</span>%</b>.</li>\n        <li>\n            The average waiting times for each type of job.<br/>\n            GPSS says <b>12</b> min overall, <b>25</b> for overhaul jobs,\n            <b>51</b> for customer jobs, and <b>zero</b> for on-the-spot jobs;<br/>\n            SimScript says <b><span id='tv-wait'>?</span></b> min overall,\n            <b><span id='tv-wait-overhaul'>?</span></b> for overhaul jobs,\n            <b><span id='tv-wait-customer'>?</span></b> for customer jobs, and\n            <b><span id='tv-wait-ots'>?</span></b> for on-the-spot jobs.</li>\n    </ol>",((e,t)=>{W("#tv-utz",u(100*e.qRepairMan.utilization,0)),W("#tv-wait",u(e.qAllJobs.averageDwell,0)),W("#tv-wait-overhaul",u(e.qOverhaulJobs.averageDwell,0)),W("#tv-wait-customer",u(e.qCustomerJobs.averageDwell,0)),W("#tv-wait-ots",u(e.qOnTheSpotJobs.averageDwell,0)),t.innerHTML=e.getStatsTable()})),B(new ft,"Quality Control","<p>\n        A component is manufactured by a sequence of three processes, \n        each followed by a short two minute inspection.</p>\n    <p>\n        The first process requires 20% of components to be reworked.\n        The second and third processes require 15% and 5% of components reworked.</p>\n    <p>\n        Sixty percent of components reworked are scrapped and the remaining forty\n        percent need reprocessing on the process from which they were rejected.</p>\n    <p>\n        Manufacturing of a new component commences on average, every 30 minutes,\n        exponentially distributed.</p>\n    <p>\n        Simulate the manufacturing processes for 100 completed components.\n        Determine the time taken\n        (GPSS says about <b>69</b> hours,\n        Simscript says <b><span id='qc-tm'>?</span></b> hours)\n        and the number of components rejected\n        (GPSS says <b>21</b>,\n        Simscript says <b><span id='qc-rejected'>?</span></b>).</p>",((e,t)=>{t.innerHTML=e.getStatsTable(),W("#qc-tm",u(e.timeNow/60,0)),W("#qc-rejected",u(e.cntRejected,0))})),B(new qt,"Order Point","<p>\n        An inventory system is controlled by an order point, set at 600 units,\n        and an economic order quantity of 500 units.</p>\n    <p>\n        The initial stock quantity is 700. Daily demand is in the range 40 to 63\n        units, evenly distributed.\n        The lead-time from ordering to delivery of goods is one week (5 days).</p>\n    <p>\n        Simulate the inventory system for a period of 100 days.\n        Determine the distribution of inventory and the actual daily sales.</p>",((e,t)=>{t.innerHTML=F("Demand and Inventory",{data:[e.stockTally.min,e.stockTally.min],color:"#d0d0d0",width:"1"},{data:[e.stockTally.max,e.stockTally.max],color:"#d0d0d0",width:"1"},{data:[e.stockTally.avg,e.stockTally.avg],color:"#d0d0d0",width:"1"},{name:"Inventory",data:e.inventoryLevel,color:"blue",showPoints:!0},{name:"Daily Orders",data:e.dailyOrders,color:"green"})+`\n            Minimum Inventory: <b>${u(e.stockTally.min,0)}</b> units.<br/>\n            Maximum Inventory: <b>${u(e.stockTally.max,0)}</b> units.<br/>\n            Average Inventory: <b>${u(e.stockTally.avg,0)}</b> units.<br/>\n        `})),B(new _t,"Manufacturing","<p>\n        A manufacturing department of an electronics company makes digital\n        watches. In the dispatch department, the watches are packed by an\n        automatic packing machine, in display packets, in the quantities\n        ordered by retailers.</p>\n    <p>\n        The order size is given by an empirical function. The mean time\n        between order arrivals is 15 minutes, exponentially distributed.\n        The packing time per order is 120 seconds plus 10 seconds per watch\n        packed in the order.</p>\n    <p>\n        The manufacturing department produces the digital watches in lot\n        sizes of 60 units, in 40±5 minutes.</p>\n    <p>\n        Simulate 5 days of the company operation to provide the following\n        information:</p>\n    <ol>\n        <li>\n            The average number of orders waiting in the packing department.<br/>\n            GPSS says <b>0.12</b>,\n            SimScript says <b><span id='man-wait'>?</span></b> orders.</li>\n        <li>\n            The quantity of watches dispatched each day.<br/>\n            SimScript says <b><span id='man-dispatched'>?</span></b>\n            watches per day.</li>\n        <li>\n            The distribution of transit times of orders.\n            SimScript says orders take <b><span id='man-transit'>?</span></b>\n            minutes to process on average.</li>\n    </ol>",((e,t)=>{W("#man-wait",u(e.qPacking.averageLength,2)),W("#man-dispatched",u(e.dispatched/5,0)),W("#man-transit",u(e.qOrderTransit.averageDwell)),t.innerHTML=e.qOrderTransit.grossDwell.getHistogramChart("Order Transit Times (min)")})),B(new Tt,"Textile","<p>\n        A textile factory produces fine mohair yarn in three departments.\n        The first department draws and blends the raw material, in sliver form,\n        and reduces it to a suitable thickness for spinning, in 5 reducer frames.\n        The second department spins the yarn in one of 40 spinning frames.\n        The final process is in the winding department, where the yarn is wound\n        from spinning bobbins onto cones for dispatch.</p>\n    <p>\n        There are 8 winding frames to perform the winding operation.\n        The factory works 8 hours per day.\n        The unit of production is 10 kilograms of yarn.\n        Reducing frames produce one unit every 38±2 minutes, while the spinning \n        frames and winding frames produce one unit in 320±20 minutes and 64±4\n        minutes, respectively.</p>\n    <p>\n        The initial inventory of reduced material is 50 units, spun material\n        is 25 units and finished yarn is 25 units.\n        The finished material is dispatched, in a container of capacity 200\n        units, every two days.</p>\n    <ol>\n        <li>\n            Simulate the production process in the textile factory for 5 days.</li>\n        <li>\n            Find the distribution of the in-process inventories.</li>\n        <li>\n            Determine the utilization of each of the three types of machine.<br/>\n            GPSS says the utilization of reducers was about <b>39%</b>,\n            spinners <b>36%</b>, and winders <b>32%</b>.<br/>\n            SimScript says the utilization of\n            reducers was <b><span id='txt-utz-red'>?</span>%</b>,\n            spinners <b><span id='txt-utz-spin'>?</span>%</b>, and\n            winders <b><span id='txt-utz-wind'>?</span>%</b>.</li>\n    </ol>",((e,t)=>{W("#txt-utz-red",u(100*e.qReducers.utilization,0)),W("#txt-utz-spin",u(100*e.qSpinners.utilization,0)),W("#txt-utz-wind",u(100*e.qWinders.utilization,0)),t.innerHTML=F("In-Process Inventories",{name:"Reduced",data:e.recReduced,color:"red",showPoints:!0},{name:"Wound",data:e.recWound,color:"green",showPoints:!0},{name:"Spun",data:e.recSpun,color:"blue",showPoints:!0})+e.getStatsTable()})),B(new Dt,"Oil Depot",'<p>\n        An oil storage depot distributes three grades of fuel: a) home heating\n        oil, b) light industrial fuel oil, and c) diesel fuel for road vehicles.\n        There is one pump for each grade of fuel, and the demand for each is the same.\n        Orders for fuel oil vary between 3,000 and 5,000 gallons, in increments of 10\n        gallons, evenly distributed.</p>\n    <p>\n        The time required to fill fuel trucks is a function of the following:</p>\n    <ol>\n        <li>The order size.</li>\n        <li>The pumping rate (6, 5 and 7 minutes per 1,000 gallons).</li>\n        <li>The number of vehicles in the depot (30 seconds extra per vehicle).</li>\n        <li>A two-minute fixed setup time.</li>\n    </ol>\n    <p>\n        The depot can hold a maximum of twelve trucks.\n        The mean arrival rate of trucks is 18 minutes, modified by the following\n        function:</p>\n    <table>\n        <tr>\n            <td>Frequency</td>\n            <td>.20</td>\n            <td>.40</td>\n            <td>.25</td>\n            <td>.15</td>\n        </tr>\n        <tr>\n            <td>Ratio to mean</td>\n            <td>.45</td>\n            <td>.60</td>\n            <td>1.5</td>\n            <td>2.0</td>\n        </tr>\n    </table>\n    <p>\n        Simulate the operation of the oil storage depot for 5 days and find:</p>\n    <ul>\n        <li>\n            The distribution of transit times of trucks.<br/>\n            GPSS says the mean is about <b>35</b> min with\n            standard deviation <b>14</b> min.<br/>\n            SimScript says the mean is <b><span id="oil-mean">?</span></b> min and\n            standard deviation <b><span id="oil-std">?</span> min</b>.</li>\n        <li>\n            The total quantity of fuel sold each day.<br/>\n            GPSS says <b>109,490</b> gallons,\n            SimScript says <b><span id="oil-sales">?</span></b> gallons.</li>\n    </ul>',((e,t)=>{W("#oil-mean",u(e.depot.grossDwell.avg,0)),W("#oil-std",u(e.depot.grossDwell.stdev,0)),W("#oil-sales",u(e.gallonsSoldPerDay,0)),t.innerHTML=e.getStatsTable()})),B(new $t,"Pump Assembly","<p>\n        A manufacturer makes centrifugal pump units which are assembled to\n        customer orders. The orders arrive on average, every 5 hours,\n        exponentially distributed.</p>\n    <p>\n        When the order arrives, two copies are made:</p>\n    <ol>\n        <li>\n            The original order is used to obtain a motor from stock and\n            prepare it for assembly (200±100 minutes).</li>\n        <li>\n            The first copy is used to order and adapt a pump\n            (180±120 minutes),</li>\n        <li>\n            The second copy is used to initiate the manufacture of the\n            baseplate (80±20 minutes).</li>\n    </ol>\n    <p>\n        When the pump and the baseplate are ready, a test fitting is\n        carried out (50±10 minutes).\n        All three components are assembled when they are available.\n        The unit is then dismantled, and the pump and motor are painted,\n        and the baseplate is galvanized.\n        Final assembly then takes place (150±30 minutes).</p>\n    <ol>\n        <li>\n            Investigate the utilization of the manufacturing facilities.</li>\n        <li>\n            Determine the transit times and delays, of customers’ orders.</li>\n        <li>\n            What Facility will be a bottleneck if orders increase significantly?</li>\n        <li>\n            Simulate the assembly of 50 motor-pump units.</li>\n    </ol>\n    <p>\n        GPSS says the facilities representing capital equipment have utilizations\n        from <b>31</b>% to <b>73%</b>.<br/>\n        SimScript says the utilizations range from\n        <b><span id='pump-utz-min'>?</span>%</b> to\n        <b><span id='pump-utz-max'>?</span>%</b>.</p>\n    <p>\n        GPSS says the mean order completion time was <b>878</b> min, with\n        a standard deviation of about <b>257</b> min.<br/>\n        SimScript says the mean value was\n        <b><span id='pump-tm-avg'>?</span></b> min, and the standard deviation was\n        <b><span id='pump-tm-std'>?</span></b> min.</p>\n    <p>\n        The pump station and the base station have the highest utilizations\n        (<b><span id='pump-utz-pump'>?</span>%</b> and <b><span id='pump-utz-base'>?</span>%</b>).\n        If all activity is increased proportionately, they will be the first to\n        saturate.</p>\n    ",((e,t)=>{const s=[];e.queues.forEach((e=>{1==e.capacity&&s.push(e.utilization)})),W("#pump-utz-min",u(100*Math.min(...s),0)),W("#pump-utz-max",u(100*Math.max(...s),0)),W("#pump-tm-avg",u(e.qOrders.grossDwell.avg,0)),W("#pump-tm-std",u(e.qOrders.grossDwell.stdev,0)),W("#pump-utz-pump",u(100*e.qPumps.utilization,0)),W("#pump-utz-base",u(100*e.qBaseStation.utilization,0)),t.innerHTML=e.getStatsTable()})),B(new It,"Robot FMS","<p>\n        An experimental, robot operated, flexible manufacturing system has\n        two computer numerical control machine tools, an arrival area, and\n        a finished parts area.</p>\n    <p>\n        Components arrive every 150 seconds, exponentially distributed, and\n        are machined on both machines in sequence.</p>\n    <p>\n        The robot takes 8±1 seconds to grip or release components, and 6\n        seconds to move components from the arrival area to the first machine.\n        Processing time on the first machine is normally distributed, with a\n        mean of 60 seconds and a standard deviation of 10 seconds.</p>\n    <p>\n        The robot takes 7 seconds to move from the first machine to the second\n        machine. Machining time on the second machine is 100 seconds,\n        exponentially distributed.</p>\n    <p>\n        Finally, the robot takes 5 seconds to move components from the second\n        machine to the finished parts storage area.</p>\n    <p>\n        Simulate the manufacturing cell operation, for 75 completed parts,\n        and find:</p>\n    <ol>\n        <li>\n            The distribution of transit times of jobs.<br/>\n            GPSS says the mean time was <b>452</b> seconds, with a\n            standard deviation of around <b>251</b> seconds;<br/>\n            SimScript says <b><span id='fms-tm-mean'>?</span></b> and\n            <b><span id='fms-tm-std'>?</span></b> seconds.</li>\n        <li>\n            The utilization of the robot and the machine tools.<br/>\n            GPSS says the Robot, Machine 1, and Machine 2 had utilizations\n            of <b>36%</b>, <b>33%</b> and <b>64%</b>;<br/>\n            SimScript says\n            <b><span id='fms-utz-robot'>?</span>%</b>,\n            <b><span id='fms-utz-m1'>?</span>%</b>, and\n            <b><span id='fms-utz-m2'>?</span>%</b>.</li>\n        <li>\n            The maximum storage areas required in the cell.<br/>\n            GPSS says the maximum storage required totals <b>13</b>;<br/>\n            SimScript says <b><span id='fms-stg'>?</span></b>.</li>\n    </ol>",((e,t)=>{W("#fms-tm-mean",u(e.qJobs.grossDwell.avg,0)),W("#fms-tm-std",u(e.qJobs.grossDwell.stdev,0)),W("#fms-utz-robot",u(100*e.qRobot.utilization,0)),W("#fms-utz-m1",u(100*e.qMachine1.utilization,0)),W("#fms-utz-m2",u(100*e.qMachine2.utilization,0)),W("#fms-stg",u(e.qJobs.grossPop.max,0)),t.innerHTML=e.getStatsTable()})),B(new Ot,"Bicycle Factory","<p>\n        A factory assembles bicycles employing the following staff: 2 clerks,\n        3 framers, 1 saddler, 1 handler, 1 wheeler, 1 pedaler, 4 assemblers,\n        and 3 packers.</p>\n    <p>\n        The company commences to assemble a bicycle every 50±10 minutes.\n        The clerical department prepares the delivery documents, instructions, \n        toolkit and invoice.</p>\n    <p>\n        Each department withdraws the component required for a particular order\n        from stock, inspects (3±1 minutes) and prepares it for assembly.\n        The frame is manufactured and takes 65 minutes, exponentially distributed.\n        When the components are available, they are assembled.\n        This takes on average 90 minutes, with a standard deviation of\n        10 minutes.</p>\n    <p>\n        When the delivery documents, toolkit, and the assembled bicycle are\n        ready, they are packed (40±5 minutes) in preparation for delivery.</p>\n    <p>\n        Simulate the bicycle factory assembly operation for 5 days and find:</p>\n    <ol>\n        <li>\n            The utilization of the staff in each department.<br/>\n            GPSS says the Clerks are busiest with a utilization of <b>78%</b>.<br/>\n            SimScript says their utilization is <b><span id='bike-clerk-utz'>?</span>%</b>.</li>\n        <li>\n            The transit times of customers’ orders.<br/>\n            GPSS says the average was <b>236</b> min with a standard deviation of <b>51</b> min.<br/>\n            SimScript says the average was <b><span id='bike-tm-mean'>?</span></b> min with a\n            <b><span id='bike-tm-std'>?</span></b> min standard deviation.</li>\n    </ol>",((e,t)=>{W("#bike-clerk-utz",u(100*e.qClerks.utilization,0)),W("#bike-tm-mean",u(e.qTransit.grossDwell.avg,0)),W("#bike-tm-std",u(e.qTransit.grossDwell.stdev,0)),t.innerHTML=e.getStatsTable()})),B(new jt,"Stock Control","<p>\n        A manufacturing company makes waste disposal units, which it sells for\n        $200 each. Total annual demand is for 20,000 units. Distribution is\n        through three branches from a factory warehouse.</p>\n    <p>\n        The lead-time for delivery of an order from the manufacturing plant to\n        the factory warehouse is 4 weeks. The lead-time for delivery of an order\n        from the factory warehouse to the branches is 1 week.</p>\n    <p>\n        The proposed inventory control method is by an economic order quantity \n        and order point system. The initial stocks, order points, economic order\n        quantities, weekly demand and standard deviation are shown in the table\n        below:</p>\n    <table class='params'>\n        <tr>\n            <th>Location</th> <th>Initial Stock</th> <th>Order Point</th>\n            <th>Order Qty</th> <th>Demand Avg</th> <th>Demand Stdev</th>\n        </tr>\n        <tr>\n            <th>Warehouse</th> <td>3,400</td> <td>2,100</td> <td>2,300</td>\n        </tr>\n        <tr>\n            <th>Branch 1</th>  <td>430</td>  <td>240</td>  <td>115</td>  <td>64</td>  <td>24</td>\n        </tr>\n        <tr>\n            <th>Branch 2</th>  <td>600</td>  <td>430</td>  <td>165</td>  <td>128</td>  <td>32</td>\n        </tr>\n        <tr>\n            <th>Branch 3</th>  <td>1,000</td>  <td>630</td>  <td>200</td> <td>192</td>  <td>48</td>\n        </tr>\n    </table>\n    <p>\n        Simulate the inventory control system for 75 weeks and determine:</p>\n    <ol>\n        <li>\n            The distribution of inventories at the three branches and the warehouse.</li>\n        <li>\n            The distribution of actual monthly sales.<br/>\n            GPSS says the monthly sales average was about <b>1,542</b>.<br/>\n            SimScript says <b><span id='ctl-sales-avg'>?</span></b>.</li>\n        <li>\n            The average value of the inventories at the branches and at the warehouse.<br/>\n            GPSS says the inventories were about <b>172</b>, <b>269</b>, <b>183</b>, and <b>1,831</b>.<br/>\n            SimScript says\n            <b><span id='ctl-stock1-avg'>?</span></b>,\n            <b><span id='ctl-stock2-avg'>?</span></b>,\n            <b><span id='ctl-stock3-avg'>?</span></b>, and\n            <b><span id='ctl-stock0-avg'>?</span></b>.\n            </li>\n        <li>\n            Does the system meet the company’s service policy of one stockout in eight years?<br/>\n            GPSS says there were some stockouts at Branch 3 during the 75-week simulated period.<br/>\n            SimScript detected <b><span id='ctl-stockouts'>?</span></b> stockouts.\n    </ol>",((e,t)=>{W("#ctl-sales-avg",u(4*e.salesTally.avg,0)),W("#ctl-stock1-avg",u(e.stockTallies[1].avg,0)),W("#ctl-stock2-avg",u(e.stockTallies[2].avg,0)),W("#ctl-stock3-avg",u(e.stockTallies[3].avg,0)),W("#ctl-stock0-avg",u(e.stockTallies[0].avg,0)),W("#ctl-stockouts",u(e.stockouts,0)),t.innerHTML=F("Inventory Distribution",{data:e.stockHistory[0],name:"Warehouse",color:"black",showPoints:!0},{data:e.stockHistory[1],name:"Branch 1",color:"red"},{data:e.stockHistory[2],name:"Branch 2",color:"green"},{data:e.stockHistory[3],name:"Branch 3",color:"blue"})})),B(new Zt,"Queueing Theory","<p>\n        When feasible, an analytical solution to queuing systems provides a \n        useful means of estimating the performance of simple systems.</p>\n    <p>\n        This program simulates a system for which the queuing parameters are\n        calculated using the appropriate Pollaczek and Khintchin (P-K) equations.\n        The objective is to verify the results obtained by simulation using GPSS\n        and SimScript.</p>\n    <p>\n        The program simulates an interarrival time of 5 seconds (500 time units),\n        exponentially distributed, and a single service channel.\n        The mean service time is 3 seconds (300 time units).\n        The average utilization of the server is consequently 60%.</p>\n    <p>\n        Three modes of service times are investigated:</p>\n    <ol>\n        <li>Constant service time.</li>\n        <li>Exponentially distributed service time.</li>\n        <li>Erlang (k=2) service time.</li>\n    </ol>\n    <p>\n        Run the simulation for 5,000 minutes and compare the simulation\n        results with the predictions of queuing theory.</p>\n    <table class='params'>\n        <tr>\n            <th>Service</th> <th>Constant</th> <th>Exp</th> <th>Erlang</th>\n        </tr>\n        <tr>\n            <th>Mean Queue Time<br/><span class='gpss'>GPSS</span><br/><span class='ss'>SimScript</span></th>\n                <td>525.0<br/><span class='gpss'>526.7</span><br/><span class='ss' id='qt-wait-ct'>?</span></td>\n                <td>750.0<br/><span class='gpss'>757.5</span><br/><span class='ss' id='qt-wait-exp'>?</span></td>\n                <td>637.5<br/><span class='gpss'>649.4</span><br/><span class='ss' id='qt-wait-erl'>?</span></td>\n        <tr>\n            <th>Mean Queue Length<br/><span class='gpss'>GPSS</span><br/><span class='ss'>SimScript</span></th>\n                <td>1.05<br/><span class='gpss'>1.05</span><br/><span class='ss' id='qt-len-ct'>?</span></td>\n                <td>1.50<br/><span class='gpss'>1.50</span><br/><span class='ss' id='qt-len-exp'>?</span></td>\n                <td>1.28<br/><span class='gpss'>1.05</span><br/><span class='ss' id='qt-len-erl'>?</span></td>\n        </tr>\n        <tr>\n            <th>StDev Queue Time<br/><span class='gpss'>GPSS</span><br/><span class='ss'>SimScript</span></th>\n                <td>319<br/><span class='gpss'>278</span><br/><span class='ss' id='qt-tdev-ct'>?</span></td>\n                <td>750<br/><span class='gpss'>740</span><br/><span class='ss' id='qt-tdev-exp'>?</span></td>\n                <td>415<br/><span class='gpss'>595</span><br/><span class='ss' id='qt-tdev-erl'>?</span></td>\n        </tr>\n        <tr>\n            <th>StDev Queue Length<br/><span class='gpss'>GPSS</span><br/><span class='ss'>SimScript</span></th>\n                <td><br/><span class='gpss'>1.43</span><br/><span class='ss' id='qt-ldev-ct'>?</span></td>\n                <td><br/><span class='gpss'>1.94</span><br/><span class='ss' id='qt-ldev-exp'>?</span></td>\n                <td><br/><span class='gpss'>1.57</span><br/><span class='ss' id='qt-ldev-erl'>?</span></td>\n        </tr>\n    </table>",((e,t)=>{W("#qt-wait-ct",u(e.qCt.averageDwell,1)),W("#qt-wait-exp",u(e.qExp.averageDwell,1)),W("#qt-wait-erl",u(e.qErl.averageDwell,1)),W("#qt-len-ct",u(e.qCt.averageLength,2)),W("#qt-len-exp",u(e.qExp.averageLength,2)),W("#qt-len-erl",u(e.qErl.averageLength,2)),W("#qt-tdev-ct",u(e.qCt.grossDwell.stdev,0)),W("#qt-tdev-exp",u(e.qExp.grossDwell.stdev,0)),W("#qt-tdev-erl",u(e.qErl.grossDwell.stdev,0)),W("#qt-ldev-ct",u(e.qCt.grossPop.stdev,2)),W("#qt-ldev-exp",u(e.qExp.grossPop.stdev,2)),W("#qt-ldev-erl",u(e.qErl.grossPop.stdev,2))})),B(new ns,"Traffic","<p>\n        Cars arrive at a T-junction every 6.28 seconds hyperexponentially\n        distributed. The cars then make a left turn northbound onto a\n        highway.</p>\n    <p>\n        When cars cross the southbound lanes, they must wait in a center\n        aisle which can accommodate a maximum of 8 cars.\n        Each car takes 3.6 seconds (Erlang k=4) to cross the traffic lanes.\n        It takes 4 seconds (Erlang k=5) to merge with northbound traffic.</p>\n    <p>\n        Southbound traffic arrives every 55±5 seconds and takes 15±5 seconds\n        to pass the T-junction.\n        Northbound traffic arrives every 60±5 seconds and takes 15±5 seconds\n        to pass.</p>\n    <p>\n        Simulate the traffic at the T-junction for 10 minutes and find:</p>\n    <ol>\n        <li>\n            The transit time of northbound cars turning at the T-junction.<br/>\n            GPSS says the transit time is nearly <b>25</b> seconds.<br/>\n            SimScript says the transit  time is\n            <b><span id='traffic-transit-time'>?</span></b> seconds.</li>\n        <li>\n            The actual Erlang service times.<br/>\n            GPSS says the times were <b>3.6</b> seconds to cross and <b>4.1</b>\n            seconds to merge.<br/>\n            SimScript says the times were <b><span id='traffic-cross-time'>?</span></b>\n            seconds to cross and <b><span id='traffic-merge-time'>?</span></b>\n            seconds to merge.</li>\n        <li>\n            The maximum number of cars queuing in the lane waiting to make a\n            left turn.<br/>\n            GPSS says the maximum number of cars was <b>8</b> cars, and the\n            mean wait to turn was <b>11.5</b> seconds.<br/>\n            SimScript says the maximum number of cars was\n            <b><span id='traffic-turn-cnt'>?</span></b>\n            cars, and the mean wait to turn was\n            <b><span id='traffic-turn-cross'>?</span></b> seconds.<br/>\n            </li>\n    </ol>",((e,t)=>{W("#traffic-transit-time",u(e.qTransit.averageDwell/100,0)),W("#traffic-cross-time",u(e.tCross.avg/100,1)),W("#traffic-merge-time",u(e.tMerge.avg/100,1)),W("#traffic-turn-cnt",u(e.qAisle.grossPop.max,0)),W("#traffic-turn-cross",u(e.qCross.averageDwell/100,1)),t.innerHTML=e.getStatsTable()})),B(new ls,"Supermarket","<p>\n        Customers arrive by car to shop at a supermarket.</p>\n    <p>\n        The parking lot has space for 650 parked cars.\n        If a customer fails to find a parking space, that customer leaves \n        immediately without shopping.</p>\n    <p>\n        On average a customer can walk to the supermarket from the parking lot\n        in 60 seconds.\n        Shoppers purchase between 5 and 100 items, uniformly distributed.\n        Customers buying 10 items or less will generally use a basket (70 provided).\n        Customers buying more than 10 items will generally use a cart (650 provided).</p>\n    <p>\n        Shopping time per customer depends on the number of items purchased \n        (10 seconds per item).\n        Customers select items and then join the shortest queue at one of 17 checkouts.\n        Customers purchasing less than 10 items may choose the express checkout.\n        Checkout time takes 2 seconds per item purchased, plus a time of 25, 30, or \n        35 seconds. This time depends on the method of payment (cash, check or\n        credit card which are assumed equally likely or probable).\n        After checking out a customer walks to the car (60 seconds), loads goods\n        and leaves the parking lot.</p>\n    <p>\n        The arrival rate of customers is exponentially distributed, starting at 600\n        per hour for half an hour, 900 per hour for one hour, 450 per hour for \n        one hour and 300 per hour thereafter.</p>\n    <p>\n        Run the simulation for 3 hours and determine:</p>\n    <ol>\n        <li>\n            The transit time of customers.<br/>\n            GPSS says the time was <b>39.4</b> minutes.<br/>\n            SimScript says <b><span id='market-transit'>?</span></b> minutes.</li>\n        <li>\n            The utilization of the parking lot, carts, baskets and checkouts.<br/>\n            GPSS says the checkouts are near capacity.<br/>\n            SimScript says the utilizations are\n            <b><span id='market-utz-park'>?</span>%</b> (parking),\n            <b><span id='market-utz-cart'>?</span>%</b> (carts),\n            <b><span id='market-utz-basket'>?</span>%</b> (baskets),\n            <b><span id='market-utz-checkout'>?</span>%</b> (checkout), and\n            <b><span id='market-utz-checkoutx'>?</span>%</b> (checkout express).</li>\n        <li>\n            The number of customers in the supermarket at one minute intervals<br/>\n            GPSS says there were <b>399</b> shoppers on average, most waiting to check out.<br/>\n            SimScript says there were <b><span id='market-transit-avg'>?</span></b> shoppers on average.\n            The chart below shows the number of customers grew in the periods of high\n            traffic, and decreased later. At the end of the simulation, there were still\n            <b><span id='market-transit-last'>?</span></b> customers waiting to check out.</li>\n    </ol>\n    <div id='market-customers'></div>",((e,t)=>{W("#market-transit",u(e.qTransit.averageDwell/600,1)),W("#market-utz-park",u(100*e.qParking.utilization,0)),W("#market-utz-cart",u(100*e.qCart.utilization,0)),W("#market-utz-basket",u(100*e.qBasket.utilization,0)),W("#market-utz-checkout",u(100*e.qCheckout.utilization,0)),W("#market-utz-checkoutx",u(100*e.qCheckoutX.utilization,0));const s=e.qTransit.grossPop;W("#market-transit-avg",u(s.avg,0)),W("#market-transit-last",u(e.qTransit.pop,0)),W("#market-customers",F("Customers/minute",{data:e.customers,name:"Total",color:"black",showPoints:!0},{data:[s.avg,s.avg],name:`Average (${u(s.avg,0)})`,color:"green",width:"1"},{data:[s.max,s.max],name:`Max (${s.max})`,color:"red",width:"1"}),!0)})),B(new us,"Port","<p>\n        A harbor port has three berths 1, 2 and 3.</p>\n    <p>\n        At any given time Berth1 can accommodate two small ships, or one\n        medium ship. Berth2 and Berth3 can each handle one large ship,\n        two medium ships or four small ships.</p>\n    <p>\n        The interarrival time of ships is 26 hours, exponentially distributed. \n        Small, medium, and large ships are in the proportions 5:3:2.</p>\n    <p>\n        Queuing for berths is on a first-come first-serve basis, except that no\n        medium or small ship may go to a berth for which a large ship is waiting,\n        and medium ships have a higher priority than small ships.</p>\n    <p>\n        Unloading times for ships are exponentially distributed with mean times\n        as follows: small ships, 15 hours; medium ships, 30 hours; large ships,\n        45 hours.</p>\n    <p>\n        The loading times are as follows: small ships, 24±6 hours uniformly distributed;\n        medium ships, 36±10 hours uniformly distributed; large ships 56±12 hours uniformly\n        distributed.</p>\n    <p>\n        The tide must be high for large ships to enter or leave Berths 2 and 3.\n        Low tide lasts 3 hours, high tide, 10 hours.</p>\n    <p>\n        Run the simulation for 500 days and determine:</p>\n    <ol>\n        <li>\n            The distribution of transit times of each type of ship.<br/>\n            GPSS says the average transit times were about <b>44</b>, <b>74</b>,\n            and <b>115</b> hours<br/>\n            SimScript says the times were <b><span id='port-transit-small'>?</span></b>,\n            <b><span id='port-transit-medium'>?</span></b>, and\n            <b><span id='port-transit-large'>?</span></b> hours.</li>\n        <li>\n            The utilization of the three berths.<br/>\n            GPSS says the utilizations were <b>52%</b>, <b>49%</b>, and <b>54%</b>.<br/>\n            SimScript says the utilizations were <b><span id='port-utz-berth1'>?</span>%</b>,\n            <b><span id='port-utz-berth2'>?</span>%</b>, and\n            <b><span id='port-utz-berth3'>?</span>%</b>.</li>\n    </ol>",((e,t)=>{W("#port-transit-small",u(e.qTransit[0].averageDwell,0)),W("#port-transit-medium",u(e.qTransit[1].averageDwell,0)),W("#port-transit-large",u(e.qTransit[2].averageDwell,0)),W("#port-utz-berth1",u(100*e.qBerths[0].utilization,0)),W("#port-utz-berth2",u(100*e.qBerths[1].utilization,0)),W("#port-utz-berth3",u(100*e.qBerths[2].utilization,0))})),O(),N("SimScript Samples","<p>\n        These samples show SimScript features, ranging from simple simulations\n        to animations and network-based samples.</p>");{B(new re,"PromiseAll","<p>\n            Shows how an Entity may span multiple sub-entities and\n            execute them all using a <b>Promise.all</b> call.\n        </p>"),B(new Z,"Preempt","<p>\n        Shows how to use interruptible delays to simulate pre-empting\n        resources.</p>\n    <p>\n        The sample has three entity types, each with a different\n        priority, all competing for a single resource.</p>"),B(new he,"RandomVarTest","<p>\n        Shows how to create and use\n        <a href='https://en.wikipedia.org/wiki/Random_variable'>random variable</a>\n        objects.</p>\n    <p>\n        Random variables are used to obtain values for inter-arrival times,\n        service times, and other non-deterministic values.</p>\n    <p>\n        Random variables may specify seed values, which cause the variable to\n        produce repeatable streams of random values. If a seed value is not\n        specified, then each run produces a different stream of random values.</p>",((e,t)=>{t.innerHTML=`\n            <label>\n                Type:\n                <select id='rand-type'>${function(){let t="";return e.randomVars.forEach(((s,n)=>{t+=`<option ${n==e.randomVarIndex?"selected":""}>\n                    ${s.name}\n                </option>`})),t}()}</select>\n            </label>\n            <label>\n                Sample size:\n                <input id='rand-size' type='range' min='10' max='100000'>\n            </label>\n            <label>\n                Seeded:\n                <input id='rand-seeded' type='checkbox'>\n            </label>\n            <ul>\n                <li>Count:\n                    <b>${u(e.tally.cnt,0)}</b>\n                </li>\n                <li>Average:\n                    <b>${u(e.tally.avg)}</b>\n                </li>\n                <li>Standard Deviation:\n                    <b>${u(e.tally.stdev)}</b>\n                </li>\n                <li>Variance:\n                    <b>${u(e.tally.var)}</b>\n                </li>\n                <li>Min:\n                    <b>${u(e.tally.min)}</b>\n                </li>\n                <li>Max:\n                    <b>${u(e.tally.max)}</b>\n                </li>\n            </ul>`+e.tally.getHistogramChart(e.randomVar.name),p("rand-type",e.randomVarIndex,(t=>e.randomVarIndex=t)),p("rand-size",e.sampleSize,(t=>e.sampleSize=t)," samples"),p("rand-seeded",e.seeded,(t=>e.seeded=t))})),B(new ke({timeEnd:1e5}),"MultiServer","<p>\n            Single resource with multiple servers versus\n            multiple resources with a single server.</p>",((e,t)=>{let s=0;e.qSingle.forEach((e=>{s+=e.grossPop.avg/e.capacity})),s/=e.qSingle.length;let n=0;e.qSingleNC.forEach((e=>{n+=e.grossPop.avg/e.capacity})),n/=e.qSingleNC.length;const i=(e,t)=>`\n                <ul>\n                    <li>Utilization:\n                        <b>${u(100*e)}%</b>\n                    </li>\n                    <li>Count:\n                        <b>${u(t.totalCount,0)}</b> customers\n                    </li>\n                    <li>Average Wait:\n                        <b>${u(t.averageDwell)}</b> minutes\n                    </li>\n                    <li>Longest Wait:\n                        <b>${u(t.maxDwell)}</b> minutes\n                    </li>\n                    <li>Average Queue:\n                        <b>${u(t.averageLength)}</b> customers\n                    </li>\n                    <li>Longest Queue (95%):\n                        <b>${u(t.grossPop.avg+2*t.grossPop.stdev)}</b> customers\n                    </li>\n                    <li>Longest Queue:\n                        <b>${u(t.maxLength)}</b> customers\n                    </li>\n                </ul>\n            `;t.innerHTML=`\n            <h3>\n                Single Multi-Server Resource\n            </h3>\n            <p>\n                One queue (resource) with multiple servers.\n            </p>\n            ${i(e.qMulti.utilization,e.qMultiWait)}\n            <h3>\n                Multiple Single-Server Resources (Available Server, single-line)\n            </h3>\n            <p>\n                Multiple queues (resources) with a single server each.</p>\n            <p>\n                Customers look for available servers as they arrive.\n                The results are the same as those for a single queue\n                with multiple servers.</p>\n            ${i(s,e.qSingleWait)}\n            <h3>\n                Multiple Single-Server Resources (Random Server, multi-line)\n            </h3>\n            <p>\n                Multiple queues (resources) with a single server each.</p>\n            <p>\n                Customers choose a server randomly when they arrive.\n                Even though the number of servers and service times\n                are the same, the load is not evenly distributed among\n                the servers, so queues and waits are longer.</p>\n            ${i(n,e.qSingleWaitNC)}\n            <h3>\n                Stats\n            </h3>\n            ${e.getStatsTable(!0)}\n        `})),B(new de,"BarberShop","<p>\n            This is a classic\n            <a\n                href='https://try-mts.com/gpss-introduction-and-barber-shop-simulation/'\n            >GPSS simulation example</a>:\n            customers arrive at a barbershop,\n            wait until the barber is available, get serviced, and leave.</p>",((e,t)=>{t.innerHTML=`<ul>\n            <li>Simulated time: <b>${u(e.timeNow/60,0)}</b> hours</li>\n            <li>Elapsed time: <b>${u(e.timeElapsed/1e3,2)}</b> seconds</li>\n            <li>Barber Utilization: <b>${u(100*e.qJoe.grossPop.avg)}%</b></li>\n            <li>Average Wait: <b>${u(e.qWait.grossDwell.avg)}</b> minutes</li>\n            <li>Longest Wait: <b>${u(e.qWait.grossDwell.max)}</b> minutes</li>\n            <li>Waiting chairs needed: <b>${u(e.qWait.grossPop.max,0)}</b></li>\n            <li>Customers Served: <b>${u(e.qJoe.grossDwell.cnt,0)}</b></li>\n        </ul>`+e.getStatsTable(!0)+e.qWait.grossDwell.getHistogramChart("Waiting Times (min)")})),B(new ie,"M/M/1","<p>\n            The utilization is\n            <b><span id='mm1-utz'>?</span>%</b></p>\n        <p>\n            The mean number of customers in the system is\n             <b><span id='mm1-pop'>?</span></b> customers.</p>\n        <p>\n            The mean dwell time is\n            <b><span id='mm1-dwell'>?</span></b> seconds.</p>",((e,t)=>{const s=e.interArrival.mean,n=e.serviceTime.mean,i=n/s;W("#mm1-utz",u(100*i,0)),W("#mm1-pop",u(i/(1-i))),W("#mm1-dwell",u(1/(1/n-1/s))),t.innerHTML=e.getStatsTable()})),B(new me,"M/M/C","<p>\n            This is a classic\n            <a href='https://en.wikipedia.org/wiki/M/M/c_queue'>M/M/C queueing system</a>.\n            Entities arrive, are served by one of C servers, and leave.</p>\n        <p>\n            This system is simple enough that there are formulas to calculate the\n            average queue length and waits (calculated values are shown in italics).</p>",((e,t)=>{const s=1/e.interArrival.mean,n=1/e.service.mean,i=e.qService.capacity,a=s/n,r=a/i,o=1/(function(e,t){let s=0;for(let n=0;n<t;n++)s+=1/c(n)*Math.pow(e,n);return s}(a,i)+1/c(i)*Math.pow(a,i)*i*n/(i*n-s)),l=(Math.pow(a,i)*n*o/(c(i-1)*Math.pow(i*n-s,2))+1/n)*s-a,h=l/s;function c(e){let t=1;for(let s=2;s<=e;s++)t*=s;return t}t.innerHTML=`\n            <label>\n                Number of Servers:\n                <input id='mmc-capy' type='range' min='2' max='10'>\n            </label>\n            <label>\n                Mean inter-arrival time:\n                <input id='mmc-inter-arr' type='range' min='10' max='200'>\n            </label>\n            <label>\n                Mean service time:\n                <input id='mmc-service' type='range' min='10' max='200'>\n            </label>\n            <ul>\n                <li>Simulated time:\n                    <b>${u(e.timeNow/60,0)}</b> hours\n                </li>\n                <li>Elapsed time:\n                    <b>${u(e.timeElapsed/1e3,2)}</b> seconds\n                </li>\n                <li>Number of Servers:\n                    <b>${u(e.qService.capacity,0)}</b>\n                </li>\n                <li>Mean Inter-Arrival Time:\n                    <b>${u(e.interArrival.mean,0)}</b> minutes\n                </li>\n                <li>Mean Service Time:\n                    <b>${u(e.service.mean,0)}</b> minutes\n                </li>\n                <li>Server Utilization:\n                    <b>${u(e.qService.grossPop.avg/e.qService.capacity*100)}%</b>\n                    (<i>${u(100*r)}%</i>)\n                </li>\n                <li>Average Wait:\n                    <b>${u(e.qWait.grossDwell.avg)}</b>\n                    (<i>${u(h)})</i> minutes\n                </li>\n                <li>Average Queue:\n                    <b>${u(e.qWait.grossPop.avg)}</b>\n                    (<i>${u(l)}</i>) customers\n                </li>\n                <li>Longest Wait:\n                    <b>${u(e.qWait.grossDwell.max)}</b> minutes\n                </li>\n                <li>Longest Queue:\n                    <b>${u(e.qWait.grossPop.max,0)}</b> customers\n                </li>\n                <li>\n                    Customers Served: <b>${u(e.qService.grossDwell.cnt,0)}</b>\n                </li>\n            </ul>`,r>1&&(t.innerHTML+="<p class='error'>\n                ** The server utilization exceeds 100%; the system will not reach a steady-state **\n            </p>"),t.innerHTML+=`\n            ${e.qWait.grossPop.getHistogramChart("Queue lengths")}\n            ${e.qWait.grossDwell.getHistogramChart("Wait times (minutes)")}`,p("mmc-capy",e.qService.capacity,(t=>e.qService.capacity=t)," servers"),p("mmc-inter-arr",e.interArrival.mean,(t=>e.interArrival=new k(t))," seconds"),p("mmc-service",e.service.mean,(t=>e.service=new k(t))," seconds")})),B(new be,"Crosswalk","<p>\n            Simulates a crosswalk with a traffic light.</p>\n        <p>\n            Shows how to use the <b>waitsignal</b> and <b>sendSignal</b> methods.</p>",((e,t)=>{const s=e.cycle,n=(s.yellow+s.red)/(s.yellow+s.red+s.green)*(s.yellow+s.red)/2,i=(s.yellow+s.green)/(s.yellow+s.red+s.green)*(s.yellow+s.green)/2,a=s.yellow+s.red,r=s.yellow+s.green;t.innerHTML=`\n            <p>\n                Pedestrian light cycle times (seconds):\n            </p>\n            <label>\n                <span class='light red'></span>Red:\n                <input id='xwalk-red' type='range' min='0' max='120' >\n            </label>\n            <label>\n                <span class='light yellow'></span>Yellow:\n                <input id='xwalk-yellow' type='range' min='0' max='120' >\n            </label>\n            <label>\n                <span class='light green'></span>Green:\n                <input id='xwalk-green' type='range' min='0' max='120' >\n            </label>\n            <ul>\n                <li>Simulated time: <b>${u(e.timeNow/60/60)}</b> hours</li>\n                <li>Elapsed time: <b>${u(e.timeElapsed/1e3)}</b> seconds</li>\n                <li>\n                    Average Pedestrian Wait: <b>${u(e.qPedXing.grossDwell.avg)}</b>\n                    <i>(${u(n)})</i> seconds\n                </li>\n                <li>\n                    Longest Pedestrian Wait: <b>${u(e.qPedXing.grossDwell.max)}</b>\n                    <i>(${u(a)})</i> seconds\n                </li>\n                <li>\n                    Average Car Wait: <b>${u(e.qCarXing.grossDwell.avg)}</b>\n                    <i>(${u(i)})</i> seconds\n                </li>\n                <li>\n                    Longest Car Wait: <b>${u(e.qCarXing.grossDwell.max)}</b>\n                    <i>(${u(r)})</i> seconds\n                </li>\n                <li>Pedestrian Count: <b>${u(e.qPedXing.grossDwell.cnt,0)}</b></li>\n                <li>Car Count: <b>${u(e.qCarXing.grossDwell.cnt,0)}</b></li>\n            </ul>`+e.qPedXing.grossPop.getHistogramChart("Pedestrians waiting to cross")+e.qCarXing.grossPop.getHistogramChart("Cars waiting to cross"),p("xwalk-red",e.cycle.red,(t=>e.cycle.red=t)," seconds"),p("xwalk-yellow",e.cycle.yellow,(t=>e.cycle.yellow=t)," seconds"),p("xwalk-green",e.cycle.green,(t=>e.cycle.green=t)," seconds")})),B(new be({frameDelay:20}),"Animated Crosswalk","<p>\n            This sample uses the same Crosswalk <b>Simulation</b> class\n            as shown earlier, with an added <b>Animation</b> object that\n            adds an animated pane to show the flow of entities through\n            the simulation.</p>\n        <p>\n            The animation pane is a regular <code>&lt;div&gt;</code> element.\n            Queue positions are defined by elements in the animation element.\n            Entities in each queue and in transit between queues are shown\n            using <code>&lt;img&gt;</code> elements.</p>\n        <p>\n            Animations are great for presenting simulations and can be useful\n            for debugging purposes.\n            Keeping them decoupled from the simulations keeps <b>SimScript</b>\n            simple and flexible.</p>\n        <div class='ss-anim'>\n            <div class='time-now'>\n                Time: <span>0.00</span> hours\n            </div>\n            <div class='light'>\n                <div class='red'></div>\n                <div class='yellow'></div>\n                <div class='green'></div>\n            </div>\n\n            <div class='street'></div>\n            <div class='crosswalk'></div>\n\n            <div class='ss-queue car-arr'></div>\n            <div class='ss-queue car-xing'></div>\n            <div class='ss-queue car-xed'></div>\n\n            <div class='ss-queue ped-arr'></div>\n            <div class='ss-queue ped-xing'></div>\n            <div class='ss-queue ped-xed'></div>\n            <div class='ss-queue ped-leave'></div>\n        </div>",((e,t)=>{new U(e,t,{getEntityHtml:e=>e instanceof fe?"<img class='ped' src='resources/blueped.png' width='15' height='19'>":"<img class='car' src='resources/redcar.png' width='55' height='19'>",queues:[{queue:e.qPedArr,element:".ss-queue.ped-arr"},{queue:e.qPedXing,element:".ss-queue.ped-xing",angle:-45,max:8},{queue:e.qPedXed,element:".ss-queue.ped-xed"},{queue:e.qPedLeave,element:".ss-queue.ped-leave"},{queue:e.qCarArr,element:".ss-queue.car-arr"},{queue:e.qCarXing,element:".ss-queue.car-xing",angle:0,max:16},{queue:e.qCarXed,element:".ss-queue.car-xed"}]});const s=t.querySelectorAll(".light div"),n=t.querySelector(".time-now span"),i=()=>{n.textContent=u(e.timeNow/3600);for(let t=0;t<s.length;t++)s[t].style.opacity=t==e.light?"1":""};e.timeNowChanged.addEventListener(i),e.stateChanged.addEventListener(i)})),B(new be({frameDelay:20}),"Animated Crosswalk (SVG)","<p>\n            This sample uses the same Crosswalk <b>Simulation</b> class\n            as shown earlier, this time using an SVG-based animation.</p>\n        <div class='svg ss-time-now'>\n            Time: <b><span>0.00</span></b> hours\n        </div>\n        <svg class='ss-anim' viewBox='0 0 1000 500'>\n            <g class='light'>\n                <rect class='light' x='47.5%' y='0%' width='5%' height='25%' rx='2%'/>\n                <circle class='red' cx='50%' cy='5%' r='2%'/>\n                <circle class='yellow' cx='50%' cy='12.5%' r='2%'/>\n                <circle class='green' cx='50%' cy='20%' r='2%'/>\n            </g>\n\n            <rect class='street' x='10%' y='50%' width='80%' height='20%'/>\n            <rect class='crosswalk' x='45%' y='50%' width='10%' height='20%'/>\n\n            <circle class='ss-queue car-arr' cx='10%' cy='60%' r='10'/>\n            <circle class='ss-queue car-xing' cx='40%' cy='60%' r='10'/>\n            <circle class='ss-queue car-xed' cx='90%' cy='60%' r='10'/>\n\n            <circle class='ss-queue ped-arr' cx='10%' cy='85%' r='10'/>\n            <circle class='ss-queue ped-xing' cx='50%' cy='75%' r='10'/>\n            <circle class='ss-queue ped-xed' cx='50%' cy='45%' r='10'/>\n            <circle class='ss-queue ped-leave' cx='90%' cy='35%' r='10'/>\n        </svg>",((e,t)=>{new U(e,t,{getEntityHtml:e=>e instanceof fe?"<g class='ped' fill='black' stroke='black' opacity='0.8' transform='scale(1,0.8)'>\n                        <circle cx='1%' cy='1%' r='0.5%' fill='orange'/>\n                        <rect x='.4%' y='2%' width='1.3%' height='4%' fill='green' rx='0.7%'/>\n                        <rect x='.66%' y='4%' width='.8%' height='3%' fill='blue'/>\n                        <rect x='.4%' y='7%' width='1.3%' height='.75%' rx='0.5%'/>\n                    </g>":"<g class='car' fill='black' stroke='black'>\n                        <rect x='1%' y='0' width='5%' height='4%' rx='1%'/>\n                        <rect x='0' y='1.5%' width='9%' height='3%' fill='red' rx='0.5%'/>\n                        <circle cx='1.5%' cy='4%' r='.9%' opacity='0.8'/>\n                        <circle cx='7.5%' cy='4%' r='.9%' opacity='0.8'/>\n                        <rect x='0' y='0' width='10%' height='1%' opacity='0'/>\n                    </g>",queues:[{queue:e.qPedArr,element:"svg .ss-queue.ped-arr"},{queue:e.qPedXing,element:"svg .ss-queue.ped-xing",angle:-45,max:8},{queue:e.qPedXed,element:"svg .ss-queue.ped-xed"},{queue:e.qPedLeave,element:"svg .ss-queue.ped-leave"},{queue:e.qCarArr,element:"svg .ss-queue.car-arr"},{queue:e.qCarXing,element:"svg .ss-queue.car-xing",angle:0,max:16},{queue:e.qCarXed,element:"svg .ss-queue.car-xed"}]});const s=t.querySelectorAll(".light circle"),n=document.querySelector(".svg.ss-time-now span"),i=()=>{n.textContent=u(e.timeNow/3600);for(let t=0;t<s.length;t++)s[t].style.opacity=t==e.light?"1":""};e.timeNowChanged.addEventListener(i),e.stateChanged.addEventListener(i)})),B(new be({frameDelay:20}),"Animated Crosswalk (X3DOM)",`<p>\n            This sample uses the same Crosswalk <b>Simulation</b> class\n            as shown earlier, this time using an X3DOM-based animation.</p>\n        <div class='x3d ss-time-now'>\n            Time: <b><span>0.00</span></b> hours\n        </div>\n        <x3d class='ss-anim'> \n            <scene>\n\n                \x3c!-- default viewpoint --\x3e\n                <viewpoint\n                    position='0 -320 320'\n                    orientation='1 0 0 .8'\n                    centerOfRotation='0 0 -20'>\n                </viewpoint>\n\n                \x3c!-- ground --\x3e\n                <transform scale='300 150 .1' translation='0 0 -0.5'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='0.1 0.3 0.1' transparency='0.2'></material>\n                        </appearance>\n                        <box/>\n                    </shape>\n                </transform>\n\n                \x3c!-- street --\x3e\n                <transform scale='250 50 .1'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='.95 .95 .95'></material>\n                        </appearance>\n                        <box/>\n                    </shape>\n                </transform>\n\n                \x3c!-- crosswalk --\x3e\n                <transform scale='50 50 .1' translation='0 0 .1'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='.6 .6 .6'></material>\n                        </appearance>\n                        <box/>\n                    </shape>\n                </transform>\n\n                \x3c!-- light --\x3e\n                <transform class='light'>\n                    <transform translation='0 120 25' rotation='1 0 0 1.57'>\n                        <shape> \x3c!-- post --\x3e\n                            <appearance> \n                                <material diffuseColor='.5 .5 .0'></material>\n                            </appearance>\n                            <cylinder height='50' radius='3'></cylinder>\n                        </shape>\n                        <transform translation='0 -21 0'>\n                            <shape> \x3c!-- bottom rim --\x3e\n                                <appearance> \n                                    <material diffuseColor='.5 .5 .0'></material>\n                                </appearance>\n                                <cylinder height='5' radius='15'></cylinder>\n                            </shape>\n                        </transform>\n                        <transform translation='0 55 0'>\n                            <shape> \x3c!-- box --\x3e\n                                <appearance> \n                                    <material diffuseColor='.5 .5 .0'></material>\n                                </appearance>\n                                <box size='22 65 20'/>\n                            </shape>\n                        </transform>\n                        <transform translation='0 75 5'>\n                            <shape>\n                                <appearance> \n                                    <material class='light red' diffuseColor='1 0 0'></material>\n                                </appearance>\n                                <sphere radius='10'/>\n                            </shape>\n                        </transform>\n                        <transform translation='0 55 5'>\n                            <shape>\n                                <appearance> \n                                    <material class='light yellow' diffuseColor='1 1 0'></material>\n                                </appearance>\n                                <sphere radius='10'/>\n                            </shape>\n                        </transform>\n                        <transform translation='0 35 5'>\n                            <shape>\n                                <appearance> \n                                    <material class='light green' diffuseColor='0 1 0'></material>\n                                </appearance>\n                                <sphere radius='10'/>\n                            </shape>\n                        </transform>\n                    </transform>\n                </transform>\n\n                \x3c!-- queues --\x3e\n                ${G("car-arr",-250,0)}\n                ${G("car-xing",-50,0)}\n                ${G("car-xed",250,0)}\n                ${G("ped-arr",-125,-100)}\n                ${G("ped-xing",0,-75,5)}\n                ${G("ped-xed",0,75,5)}\n                ${G("ped-leave",250,100)}\n            </scene>\n        </x3d>`,((e,t)=>{new U(e,t,{rotateEntities:!0,getEntityHtml:e=>e instanceof fe?`<transform class='${"pedestrian"}'>\n        <transform>\n            <shape>\n                <appearance> \n                    <material diffuseColor='0 0 .5'></material>\n                </appearance>\n                <box size='5 5 8'></box>\n            </shape>\n            <shape render='false'> \x3c!-- padding --\x3e\n                <box size='7 10 8'></box>\n            </shape>\n        </transform>\n        <transform translation='0 0 8'>\n            <shape>\n                <appearance> \n                    <material diffuseColor='0 1 0'></material>\n                </appearance>\n                <box size='5 8 8'></box>\n            </shape>\n        </transform>\n        <transform translation='0 0 16'>\n            <shape>\n                <appearance> \n                    <material diffuseColor='.5 .5 0'></material>\n                </appearance>\n                <sphere radius='3'></sphere>\n            </shape>\n        </transform>\n    </transform>`:e.serial%2?X("car red",30,14,8,[1,0,0]):X("car green",25,12,8,[1,1,0]),queues:[{queue:e.qPedArr,element:"x3d .ss-queue.ped-arr"},{queue:e.qPedXing,element:"x3d .ss-queue.ped-xing",angle:-45,max:8},{queue:e.qPedXed,element:"x3d .ss-queue.ped-xed"},{queue:e.qPedLeave,element:"x3d .ss-queue.ped-leave"},{queue:e.qCarArr,element:"x3d .ss-queue.car-arr"},{queue:e.qCarXing,element:"x3d .ss-queue.car-xing",angle:0,max:16},{queue:e.qCarXed,element:"x3d .ss-queue.car-xed"}]});const s=t.querySelectorAll("material.light"),n=document.querySelector(".x3d.ss-time-now span"),i=()=>{n.textContent=u(e.timeNow/3600);for(let t=0;t<s.length;t++){const n=s[t];n.setAttribute("transparency",t==e.light?"0":"0.7"),n.closest("transform").setAttribute("scale",t==e.light?"1.1 1.1 1.1":".9 .9 .9")}};e.timeNowChanged.addEventListener(i),e.stateChanged.addEventListener(i)})),B(new xe({maxTimeStep:.1}),"Animation Options (SVG)","<p>\n            Change the animation parameters to see their effect:</p>\n        <label>\n            Queue Angle\n            <input id='q-angle' type='range' min='0' max='360' step='15'>\n        </label>\n        <label>\n            Rotate Entities\n            <input id='rotate-ents' type='checkbox'>\n        </label>\n        <label>\n            Spline Tension\n            <input id='tension' type='range' min='0' max='1' step='.1'>\n        </label>\n        <label>\n            Max Time Step\n            <input id='max-step' type='range' min='0' max='1' step='.1'>\n        </label>\n        <label>\n            Frame Delay\n            <input id='frame-delay' type='range' min='0' max='250' step='10'>\n        </label>\n        <svg class='ss-anim' viewBox='0 0 1000 500'>\n\n            \x3c!-- one rotating queue --\x3e\n            <rect class='ss-queue rotate' x='98%' y='23%' width='4%' height='4%'/>\n            <line x1='100%' y1='15%' x2='100%' y2='35%' stroke='black'/>\n            <line x1='90%' y1='25%' x2='110%' y2='25%' stroke='black'/>\n\n            \x3c!-- one queue at the center --\x3e\n            <rect class='ss-queue center' x='38%' y='48%' width='4%' height='4%'/>\n\n            \x3c!-- twelve queues around it --\x3e\n            <rect class='ss-queue q1' x='58%' y='83%' width='4%' height='4%'/>\n            <rect class='ss-queue q2' x='73%' y='68%' width='4%' height='4%'/>\n            <rect class='ss-queue q3' x='78%' y='48%' width='4%' height='4%'/>\n            <rect class='ss-queue q4' x='73%' y='28%' width='4%' height='4%'/>\n            <rect class='ss-queue q5' x='58%' y='13%' width='4%' height='4%'/>\n            <rect class='ss-queue q6' x='38%' y='8%' width='4%' height='4%'/>\n            <rect class='ss-queue q7' x='18%' y='13%' width='4%' height='4%'/>\n            <rect class='ss-queue q8' x='3%' y='28%' width='4%' height='4%'/>\n            <rect class='ss-queue q9' x='-2%' y='48%' width='4%' height='4%'/>\n            <rect class='ss-queue q10' x='3%' y='68%' width='4%' height='4%'/>\n            <rect class='ss-queue q11' x='18%' y='83%' width='4%' height='4%'/>\n            <rect class='ss-queue q12' x='38%' y='88%' width='4%' height='4%'/>\n        </svg>",((e,t)=>{const s=new U(e,t,{rotateEntities:!0,getEntityHtml:e=>e instanceof _e?e.fast?"<polygon points='0 0, 40 0, 50 10, 40 20, 0 20' stroke='black' fill='yellow' opacity='0.5'/>":"<polygon points='0 0, 20 0, 30 20, 20 40, 0 40' stroke='black' fill='red' opacity='0.5'/>":e.serial%2?"<polygon points='0 0, 40 0, 50 10, 40 20, 0 20' stroke='black' fill='blue'/>":"<polygon points='0 0, 20 0, 30 20, 20 40, 0 40' stroke='black' fill='green'/>",queues:[{queue:e.qRotate,element:"svg .ss-queue.rotate",angle:e.qAngle},{queue:e.qCenter,element:"svg .ss-queue.center"},{queue:e.q1,element:"svg .ss-queue.q1"},{queue:e.q2,element:"svg .ss-queue.q2"},{queue:e.q3,element:"svg .ss-queue.q3"},{queue:e.q4,element:"svg .ss-queue.q4"},{queue:e.q5,element:"svg .ss-queue.q5"},{queue:e.q6,element:"svg .ss-queue.q6"},{queue:e.q7,element:"svg .ss-queue.q7"},{queue:e.q8,element:"svg .ss-queue.q8"},{queue:e.q9,element:"svg .ss-queue.q9"},{queue:e.q10,element:"svg .ss-queue.q10"},{queue:e.q11,element:"svg .ss-queue.q11"},{queue:e.q12,element:"svg .ss-queue.q12"}]});p("q-angle",e.qAngle,(t=>{e.qAngle=t;let n=s.queues;n[0].angle=t,s.queues=n})),p("rotate-ents",s.rotateEntities,(e=>s.rotateEntities=e)),p("tension",e.splineTension,(t=>e.splineTension=t)),p("max-step",e.maxTimeStep,(t=>e.maxTimeStep=t)," sim time units"),p("frame-delay",e.frameDelay,(t=>e.frameDelay=t)," ms")})),B(new xe({maxTimeStep:.1}),"Animation Options (A-Frame)","<p>\n            This sample uses the same Crosswalk Simulation class as shown earlier,\n            this time using an <a href=\"https://aframe.io\">A-Frame-based</a> animation.</p>\n        <p>\n            Change the animation parameters to see their effect:</p>\n        <label>\n            Queue Angle\n            <input id='af-q-angle' type='range' min='0' max='360' step='15'>\n        </label>\n        <label>\n            Rotate Entities\n            <input id='af-rotate-ents' type='checkbox'>\n        </label>\n        <label>\n            Spline Tension\n            <input id='af-tension' type='range' min='0' max='1' step='.1'>\n        </label>\n        <label>\n            Max Time Step\n            <input id='af-max-step' type='range' min='0' max='1' step='.1'>\n        </label>\n        <label>\n            Frame Delay\n            <input id='af-frame-delay' type='range' min='0' max='250' step='10'>\n        </label>\n        <div class=\"anim-host\">\n            <a-scene embedded class='ss-anim'>\n\n                \x3c!-- mix-ins --\x3e\n                <a-assets>\n                    <a-mixin id='queue' geometry='radius:4' material='color:orange;opacity:0.3'></a-mixin>\n                    <a-mixin id='transparent' opacity='0.6' transparent='true'></a-mixin>\n                </a-assets>\n                \n                \x3c!-- camera --\x3e\n                <a-entity id='rig' position='0 -150 150' rotation='40 0 0'>\n                    <a-camera id='camera' far='50000' fov='80'></a-camera>\n                </a-entity>            \n\n                \x3c!-- camera\n                <a-entity id='rig' position='0 -200 50' rotation='70 0 0'>\n                    <a-camera id='camera' far='50000' fov='60' look-controls></a-camera>\n                </a-entity>            \n                --\x3e\n                \n                \x3c!-- add a light --\x3e\n                <a-entity light='type:directional; castShadow:true;' position='5 5 15'></a-entity>\n\n                \x3c!-- background --\x3e\n                <a-box position='0 0 -1' width='800' height='800' depth='1' color='#009FFF'></a-box>\n                <a-sky color='lightblue'></a-sky>\n\n                \x3c!-- one rotating queue --\x3e\n                <a-sphere class='ss-queue rotate' mixin='queue' position='100 100 20'></a-sphere>\n                \n                \x3c!-- one queue at the center --\x3e\n                <a-sphere class='ss-queue center' mixin='queue' position='0 0 20'></a-sphere>\n    \n                \x3c!-- twelve queues around it --\x3e\n                <a-sphere class='ss-queue q1' mixin='queue' position='50 87 0'></a-sphere>\n                <a-sphere class='ss-queue q2' mixin='queue' position='87 50  0'></a-sphere>\n                <a-sphere class='ss-queue q3' mixin='queue' position='100 0 0'></a-sphere>\n                <a-sphere class='ss-queue q4' mixin='queue' position='87 -50 0'></a-sphere>\n                <a-sphere class='ss-queue q5' mixin='queue' position='50 -87 0'></a-sphere>\n                <a-sphere class='ss-queue q6' mixin='queue' position='0 -100 0'></a-sphere>\n                <a-sphere class='ss-queue q7' mixin='queue' position='-50 -87 0'></a-sphere>\n                <a-sphere class='ss-queue q8' mixin='queue' position='-87 -50 0'></a-sphere>\n                <a-sphere class='ss-queue q9' mixin='queue' position='-100 0 0'></a-sphere>\n                <a-sphere class='ss-queue q10' mixin='queue' position='-87 50 0'></a-sphere>\n                <a-sphere class='ss-queue q11' mixin='queue' position='-50 87 0'></a-sphere>\n                <a-sphere class='ss-queue q12' mixin='queue' position='0 100 0'></a-sphere>\n            </a-scene>\n        </div>",((e,t)=>{const s=new U(e,t,{rotateEntities:!0,getEntityHtml:e=>e instanceof _e?e.fast?"<a-box width='16' height='8' depth='8' color='yellow' mixin='transparent'></a-box>":"<a-box width='8' height='16' depth='10' color='red' mixin='transparent'></a-box>":e.serial%2?"<a-box width='16' height='8' depth='8' color='green' mixin='transparent'></a-box>":"<a-box width='8' height='16' depth='10' color='blue' mixin='transparent'></a-box>",queues:[{queue:e.qRotate,element:"a-scene .ss-queue.rotate",angle:e.qAngle},{queue:e.qCenter,element:"a-scene .ss-queue.center"},{queue:e.q1,element:"a-scene .ss-queue.q1"},{queue:e.q2,element:"a-scene .ss-queue.q2"},{queue:e.q3,element:"a-scene .ss-queue.q3"},{queue:e.q4,element:"a-scene .ss-queue.q4"},{queue:e.q5,element:"a-scene .ss-queue.q5"},{queue:e.q6,element:"a-scene .ss-queue.q6"},{queue:e.q7,element:"a-scene .ss-queue.q7"},{queue:e.q8,element:"a-scene .ss-queue.q8"},{queue:e.q9,element:"a-scene .ss-queue.q9"},{queue:e.q10,element:"a-scene .ss-queue.q10"},{queue:e.q11,element:"a-scene .ss-queue.q11"},{queue:e.q12,element:"a-scene .ss-queue.q12"}]});p("af-q-angle",e.qAngle,(t=>{e.qAngle=t;let n=s.queues;n[0].angle=t,s.queues=n})," degrees"),p("af-rotate-ents",s.rotateEntities,(e=>s.rotateEntities=e)),p("af-tension",e.splineTension,(t=>e.splineTension=t)),p("af-max-step",e.maxTimeStep,(t=>e.maxTimeStep=t)," sim time units"),p("af-frame-delay",e.frameDelay,(t=>e.frameDelay=t)," ms")})),B(new xe({maxTimeStep:.1}),"Animation Options (X3DOM)",`<p>\n            This sample uses the same Crosswalk Simulation class as shown earlier,\n            this time using an <a href="https://www.x3dom.org/">X3DOM-based</a> animation.</p>\n        <p>\n            Press 'A' to view <b>all</b> elements or 'R' to <b>reset</b> the viewpoint.</p>\n        <p>\n            Change the animation parameters to see their effect:</p>\n        <label>\n            Queue Angle\n            <input id='x3-q-angle' type='range' min='0' max='360' step='15'>\n        </label>\n        <label>\n            Rotate Entities\n            <input id='x3-rotate-ents' type='checkbox'>\n        </label>\n        <label>\n            Spline Tension\n            <input id='x3-tension' type='range' min='0' max='1' step='.1'>\n        </label>\n        <label>\n            Max Time Step\n            <input id='x3-max-step' type='range' min='0' max='1' step='.1'>\n        </label>\n        <label>\n            Frame Delay\n            <input id='x3-frame-delay' type='range' min='0' max='250' step='10'>\n        </label>\n\n        <x3d class='ss-anim'> \n            <scene>\n\n                \x3c!-- default viewpoint --\x3e\n                <viewpoint\n                    position='0 -200 180'\n                    orientation='1 0 0 .75'\n                    centerOfRotation='0 0 -20'>\n                </viewpoint>\n\n                \x3c!-- background --\x3e\n                <transform scale='150 150 0.1'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='0 .9 1'></material>\n                        </appearance>\n                        <box/>\n                    </shape>\n                </transform>\n\n                \x3c!-- one rotating queue --\x3e\n                ${G("rotate",100,100,20)}\n                \n                \x3c!-- one queue at the center --\x3e\n                ${G("center",0,0,20)}\n    \n                \x3c!-- twelve queues around it --\x3e\n                ${G("q1",50,87)}\n                ${G("q2",87,50)}\n                ${G("q3",100,0)}\n                ${G("q4",87,-50)}\n                ${G("q5",50,-87)}\n\n                ${G("q6",0,-100)}\n                ${G("q7",-50,-87)}\n                ${G("q8",-87,-50)}\n                ${G("q9",-100,0)}\n                ${G("q10",-87,50)}\n                ${G("q11",-50,87)}\n                ${G("q12",0,100)}\n            </scene>\n        </x3d>`,((e,t)=>{const s=new U(e,t,{rotateEntities:!0,getEntityHtml:e=>e instanceof _e?e.fast?X("yellow",30,10,4,[1,1,0]):X("red",20,8,4,[1,0,0]):e.serial%2?X("green",30,10,4,[0,1,0]):X("blue",20,8,4,[0,0,1]),queues:[{queue:e.qRotate,element:"x3d .ss-queue.rotate",angle:e.qAngle},{queue:e.qCenter,element:"x3d .ss-queue.center"},{queue:e.q1,element:"x3d .ss-queue.q1"},{queue:e.q2,element:"x3d .ss-queue.q2"},{queue:e.q3,element:"x3d .ss-queue.q3"},{queue:e.q4,element:"x3d .ss-queue.q4"},{queue:e.q5,element:"x3d .ss-queue.q5"},{queue:e.q6,element:"x3d .ss-queue.q6"},{queue:e.q7,element:"x3d .ss-queue.q7"},{queue:e.q8,element:"x3d .ss-queue.q8"},{queue:e.q9,element:"x3d .ss-queue.q9"},{queue:e.q10,element:"x3d .ss-queue.q10"},{queue:e.q11,element:"x3d .ss-queue.q11"},{queue:e.q12,element:"x3d .ss-queue.q12"}]});p("x3-q-angle",e.qAngle,(t=>{e.qAngle=t;let n=s.queues;n[0].angle=t,s.queues=n})," degrees"),p("x3-rotate-ents",s.rotateEntities,(e=>s.rotateEntities=e)),p("x3-tension",e.splineTension,(t=>e.splineTension=t)),p("x3-max-step",e.maxTimeStep,(t=>e.maxTimeStep=t)," sim time units"),p("x3-frame-delay",e.frameDelay,(t=>e.frameDelay=t)," ms")})),B(new Ae({maxTimeStep:.01}),"Network Intro (SVG)","<p>\n            This sample uses a network to simulate an area with random service\n            requests and a fixed number of service vehicles.</p>\n        <ul>\n            <li>\n                Red circles show service requests that happen at random locations\n                on the network.</li>        \n            <li>\n                Green circles show service vehicles that looking for or traveling\n                to requests.</li>        \n            <li>\n                Yellow circles show service vehicles servicing a request.</li>\n        </ul>\n        <label>\n            Slow Mode\n            <input id='network-svg-slow' type='checkbox'>\n        </label>\n        <label>\n            Number of Service Vehicles: <b><span id='network-svg-nsvc'>0</span></b>\n        </label>\n        <label>\n            Server Utilization: <b><span id='network-svg-utz'>0</span>%</b>\n        </label>\n        <label>\n            Average Response Time: <b><span id='network-svg-wait'>0</span></b> seconds\n        </label>\n        <label>\n            Requests Served:\n            <b><span id='network-svg-served'>0</span></b>\n            /\n            <span id='network-svg-nreq'>0</span>\n        </label>\n        <label>\n            Requests Missed: <b><span id='network-svg-missed'>0</span></b>\n        </label>\n        <p></p>\n        <svg class='ss-anim'\n            viewbox='0 0 800 400'\n            fill='orange'\n            stroke='black'\n            stroke-width='1'\n            font-size='10'\n            text-anchor='middle'\n            dominant-baseline='middle'>\n        </svg>",((e,t)=>{!function(e,t,s=!0,n=!0,i=!1){const a="http://www.w3.org/2000/svg",r=(e,t)=>{for(let s in t)e.setAttribute(s,t[s].toString())};n&&e.links.forEach(((e,s)=>{if(s%2==0){const s=document.createElementNS(a,"line"),n=e.from.position,o=e.to.position;if(r(s,{class:"ss-link "+(e.id?"id"+e.id:""),x1:n.x,y1:n.y,x2:o.x,y2:o.y}),t.appendChild(s),i){const s=document.createElementNS(a,"circle"),i=(n.x+o.x)/2,l=(n.y+o.y)/2;r(s,{cx:i,cy:l,r:1,"stroke-width":0,fill:"white"}),t.appendChild(s);const h=document.createElementNS(a,"text");r(h,{x:i,y:l}),h.innerHTML=this.getLinkDistance(e).toFixed(0),t.appendChild(h)}}})),s&&e.nodes.forEach((e=>{const s=document.createElementNS(a,"circle"),n=e.position;r(s,{class:"ss-node "+(e.id?"id"+e.id:""),cx:n.x,cy:n.y,r:"2%"}),t.appendChild(s);const i=document.createElementNS(a,"text");r(i,{x:n.x,y:n.y,fill:"black",strokeWidth:0}),i.innerHTML=e.id,t.appendChild(i)}))}(e.network,t,!0,!0);const s=[];e.network.nodes.forEach((e=>{s.push({queue:e.queue,element:"svg .ss-node.id"+e.id,stackEntities:!0})})),new U(e,t,{animateToQueueEnd:!1,rotateEntities:!0,queues:s,getEntityHtml:e=>e instanceof $e?`<g opacity='0.5'>\n                        <circle r='20' stroke='black' fill=${e.busy?"yellow":"green"}/>\n                        <polygon\n                            stroke='none'\n                            fill=${e.busy?"none":"black"}\n                            points='20 0, -13 -18, -13 18'/>\n                    </g>`:"<g opacity='0.5'>\n                        <circle r='30' fill='red'/>\n                    </g>"}),p("network-svg-slow",e.maxTimeStep>0,(t=>e.maxTimeStep=t?.01:0)),W("#network-svg-nsvc",u(e.serviceVehicles,0)),W("#network-svg-nreq",u(e.requests,0));const n=()=>{W("#network-svg-utz",u(100*e.qBusy.utilization,0)),W("#network-svg-wait",u(e.qWait.averageDwell,0)),W("#network-svg-served",u(e.requestsServed,0)),W("#network-svg-missed",u(e.requestsMissed,0))};e.requestFinished.addEventListener(n),e.stateChanged.addEventListener(n)})),B(new Ae({maxTimeStep:.1}),"Network Intro (X3DOM)","<p>\n            This sample uses a network to simulate an area with random service\n            requests and a fixed number of service vehicles.</p>\n        <ul>\n            <li>\n                Red spheres show service requests that happen at random locations\n                on the network.</li>        \n            <li>\n                Green service vehicles are looking for or traveling to requests.</li>        \n            <li>\n                Yellow service vehicles are servicing a request.</li>\n        </ul>\n        <label>\n            Slow Mode\n            <input id='network-x3d-slow' type='checkbox'>\n        </label>\n        <label>\n            Number of Service Vehicles: <b><span id='network-x3d-nsvc'>0</span></b>\n        </label>\n        <label>\n            Server Utilization: <b><span id='network-x3d-utz'>0</span>%</b>\n        </label>\n        <label>\n            Average Response Time: <b><span id='network-x3d-wait'>0</span></b> seconds\n        </label>\n        <label>\n            Requests Served:\n            <b><span id='network-x3d-served'>0</span></b>\n            /\n            <span id='network-x3d-nreq'>0</span>\n        </label>\n        <label>\n            Requests Missed: <b><span id='network-x3d-missed'>0</span></b>\n        </label>\n        <p></p>\n        <x3d class='ss-anim network'> \n            <scene>\n\n                \x3c!-- default viewpoint --\x3e\n                <viewpoint\n                    position='400 -80 700'\n                    orientation='1 0 0 0.36771'\n                    centerOfRotation='450 250 0'>\n                </viewpoint>\n\n                \x3c!-- background --\x3e\n                <transform translation='400 200 0'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='0 .5 .5'></material>\n                        </appearance>\n                        <box size='1200 800 .1'/>\n                    </shape>\n                </transform>\n            </transform>                \n            </scene>\n        </x3d>",((e,t)=>{Qe(e.network,t);const s=[];e.network.nodes.forEach((e=>{s.push({queue:e.queue,element:"x3d.network .ss-queue.q"+e.id,stackEntities:!0})})),new U(e,t,{queues:s,rotateEntities:!0,getEntityHtml:e=>e instanceof $e?X("service",40,15,10,[e.busy?1:0,.5,0]):"<shape>\n                        <appearance>\n                            <material transparency='0.5' diffuseColor='1 0 0'/>\n                        </appearance>\n                        <sphere radius='40'/>\n                    </shape>"}),p("network-x3d-slow",e.maxTimeStep>0,(t=>e.maxTimeStep=t?1:0)),W("#network-x3d-nsvc",u(e.serviceVehicles,0)),W("#network-x3d-nreq",u(e.requests,0));const n=()=>{W("#network-x3d-utz",u(100*e.qBusy.utilization,0)),W("#network-x3d-wait",u(e.qWait.averageDwell,0)),W("#network-x3d-served",u(e.requestsServed,0)),W("#network-x3d-missed",u(e.requestsMissed,0))};e.requestFinished.addEventListener(n),e.stateChanged.addEventListener(n)})),B(new Le({maxTimeStep:1e-4,frameDelay:50}),"Car Following","<p>\n            Simple car-following demo.</p>\n        <p>\n            Cars are randomly generated and follow the car ahead, adjusting\n            their speed as needed to keep a safe headway (so they could\n            stop before hitting the car ahead).</p>\n        <p>\n            The animation is not to scale, so the cars may appear to move\n            together too closely (the road strip is 1km long).</p>\n        <p>\n            The simulation uses a simplified version of\n            <a href='https://en.wikipedia.org/wiki/Gipps%27_model'>Gipp's model</a>\n            to update the vehicle speeds at fixed time intervals.</p>\n        <p>\n            This sample shows how to use the <b>getAnimationPosition</b>\n            method in the <b>Entity</b> class to customize queue\n            animations.</p>\n        <label>\n            Vehicle Count:\n            <b><span id='carfollow-cnt'>0</span></b> / <span id='carfollow-tot'>0</span>\n        </label>\n        <label>\n            Max Speed:\n            <b><span id='carfollow-speed-max'>0</span></b> km/h\n        </label>\n        <label>\n            Min Speed:\n            <b><span id='carfollow-speed-min'>0</span></b> km/h\n        </label>\n        <label>\n            Average Speed:\n            <b><span id='carfollow-speed'>0</span></b> km/h\n        </label>\n        <svg class='ss-anim car-follow' viewBox='0 0 1000 500'>\n            <line class='strip'\n                x1='0%' y1='90%'\n                x2='100%' y2='10%'\n                stroke='lightgrey'\n                stroke-width='5%'/>\n            <circle class='strip-start' cx='0%' cy='90%' r='1%' fill='orange' opacity='0.5'/>\n            <circle class='strip-end' cx='100%' cy='10%' r='1%' fill='orange' opacity='0.5'/>\n        </svg>",((e,t)=>{const s=["red","green","blue","white"];new U(e,t,{rotateEntities:!0,queues:[{queue:e.qStrip,element:".strip-start",endElement:".strip-end"}],getEntityHtml:e=>`<g>\n                    <polygon\n                        stroke-width='1'\n                        stroke='black'\n                        fill='${s[e.serial%s.length]}'\n                        points='0 0, 40 0, 42 3, 42 17, 40 20, 0 20'/>\n                    <polygon\n                        fill='black'\n                        points='20 2, 30 2, 30 18, 20 18'/>\n                </g>`}),W("#carfollow-tot",u(e.totalCars,0)),W("#carfollow-speed-max",u(3.6*e.carSpeeds.max,0)),W("#carfollow-speed-min",u(3.6*e.carSpeeds.min,0));const n=()=>{const t=e.qStrip.averageDwell,s=e.stripLength;W("#carfollow-cnt",u(e.qStrip.totalCount,0)),W("#carfollow-speed",u(t?s/t*3.6:0,0))};e.carFinished.addEventListener(n),e.stateChanged.addEventListener(n)})),B(new Ie({maxTimeStep:.001}),"Network Car Following (X3DOM)","<p>\n            Network-based car-following demo.</p>\n        <p>\n            Cars are randomly generated travel from the first to the\n            last network nodes using a simple car-following model.</p>\n        <p>\n            The animation is not to scale, so the cars may appear to move\n            together too closely (the network nodes are 100m apart).\n            But they may not overtake each other.</p>\n        <p>\n            The simulation uses a simplified version of\n            <a href='https://en.wikipedia.org/wiki/Gipps%27_model'>Gipp's model</a>\n            to update the vehicle speeds at fixed time intervals.\n            It also accounts for congestion when calculating shortest paths.</p>\n        <p>\n            This sample shows how to use the <b>getAnimationPosition</b>\n            method in the <b>Entity</b> class to customize queue\n            animations.</p>\n        <label>\n            Slow Mode\n            <input id='carfollowing-slow' type='checkbox'>\n        </label>\n        <label>\n            Vehicle Count:\n            <b><span id='carfollowing-cnt'>0</span></b> / <span id='carfollowing-tot'>0</span>\n        </label>\n        <label>\n            Max Speed:\n            <b><span id='carfollowing-speed-max'>0</span></b> km/h\n        </label>\n        <label>\n            Min Speed:\n            <b><span id='carfollowing-speed-min'>0</span></b> km/h\n        </label>\n        <label>\n            Average Speed:\n            <b><span id='carfollowing-speed'>0</span></b> km/h\n        </label>\n        <p></p>\n        <x3d class='ss-anim car-following'> \n            <scene>\n\n                \x3c!-- default viewpoint --\x3e\n                <viewpoint\n                    position='400 -50 600'\n                    orientation='1 0 0 0.34'\n                    centerOfRotation='450 250 0'>\n                </viewpoint>\n\n                \x3c!-- background --\x3e\n                <transform translation='400 200 0'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='0 .5 .5'></material>\n                        </appearance>\n                        <box size='1200 800 .1'/>\n                    </shape>\n                </transform>\n            </transform>                \n            </scene>\n        </x3d>",((e,t)=>{Qe(e.network,t);const s=[];e.network.nodes.forEach((e=>{s.push({queue:e.queue,element:"x3d.car-following .ss-queue.q"+e.id})})),e.network.links.forEach((e=>{s.push({queue:e.queue,element:"x3d.car-following .ss-queue.q"+e.from.id,endElement:"x3d.car-following .ss-queue.q"+e.to.id})}));const n=[[1,0,0],[0,1,0],[0,0,1],[1,1,1]];new U(e,t,{queues:s,rotateEntities:!0,getEntityHtml:e=>X("car",25,10,6,n[e.serial%n.length])}),p("carfollowing-slow",e.maxTimeStep>0,(t=>e.maxTimeStep=t?.001:0)),W("#carfollowing-tot",u(e.totalCars,0)),W("#carfollowing-speed-max",u(3.6*e.carSpeeds.max,0)),W("#carfollowing-speed-min",u(3.6*e.carSpeeds.min,0));const i=()=>{const t=e.stats.totalTime,s=e.stats.totalDistance;W("#carfollowing-cnt",u(e.stats.carsDone,0)),W("#carfollowing-speed",u(t?s/t*3.6:0,0))};e.carFinished.addEventListener(i),e.stateChanged.addEventListener(i)}));const e=50,t=10;B(new Fe({frameDelay:e}),"Asteroids (SVG)","<p>\n            SimScript is not a game engine, but it can be used to create\n            simple games such as the classic Asteroids.</p>\n        <p>\n            This sample shows how simulations can handle keyboard and\n            touch events, and perform collision tests.</p>\n        <p>\n            To play, press the run button and use these keys:</p>\n        <ul>\n            <li>\n                <code>LEFT/RIGHT</code> arrows to turn the ship\n                (or swipe left/right on touch devices).</li>\n            <li>\n                <code>UP</code> arrow to accelerate\n                (or swipe up on touch devices).</li>\n            <li>\n                <code>SPACE</code> bar to fire a missile\n                (or tap on touch devices).</li>\n            <li>\n                <code>S</code> to toggle sound effects.</li>\n        </ul>\n        <label>\n            Professional Mode:\n            <input id='pro-mode' type='checkbox'>\n        </label>\n        <label>\n            Missiles Fired:\n            <b><span id='missiles-fired'>0</span></b>\n        </label>\n        <label>\n            Asteroids Destroyed:\n                <b><span id='asteroids-destroyed'>0</span></b>\n                /\n                <span id='asteroids-cnt'>0</span>\n        </label>\n        <svg class='ss-anim asteroids' viewBox='0 0 1000 500'>\n            <radialGradient id='jetGradient' fx='1'>\n                <stop offset='0%' stop-color='yellow'/>\n                <stop offset='100%' stop-color='transparent'/>\n            </radialGradient>    \n            <circle class='ss-queue center' cx='50%' cy='50%' r='0'/>\n            <text class='game-over' x='50%' y='50%' fill='white' text-anchor='middle' font-size='36pt'></text>\n        </svg>",((s,n)=>{new U(s,n,{rotateEntities:!0,getEntityHtml:e=>{if(e instanceof Xe)return`<g>\n                        <polygon\n                            fill='none'\n                            stroke='white'\n                            stroke-width='2'\n                            points='0 0, -20 30, 40 0, -20 -30'/>\n                        <circle\n                            r='25'\n                            cx='-30'\n                            fill='url(#jetGradient)'\n                            opacity=${e.engineOn?"1":"0"}/>\n                    </g>`;if(e instanceof Ue)return"<g>\n                        <line\n                            x1='-10' y1='0' x2='10' y2='0'\n                            stroke='red'\n                            stroke-width='6'/>\n                    </g>";if(e instanceof Ve){return`<g ${e.small?"transform='scale(0.5, 0.5)'":""}'>\n                        <polygon\n                            fill='none'\n                            stroke='white'\n                            stroke-width='2'\n                            points='0 49, 17 29, 41 24, 46 0, 29 -17, 21 -36, 0 -50, -20 -35, -26 -15, -53 0, -29 17, -27 46'/>\n                    </g>`}throw"unknown entity type"},queues:[{queue:s.q,element:"svg.asteroids .ss-queue.center"}]}),p("pro-mode",!1,(n=>s.maxTimeStep=n?t:e)),W("#asteroids-cnt",u(s.asteroidCount,0));const i=()=>{W("#missiles-fired",u(s.missilesFired,0)),W("#asteroids-destroyed",u(s.asteroidsDestroyed,0))};s.asteroidsDestroyedChanged.addEventListener(i),s.missilesFiredChanged.addEventListener(i),s.stateChanged.addEventListener((()=>{i();n.querySelector(".game-over").innerHTML=s.state==$.Finished?"Game Over! You "+(s.won?"Won!!!":"Lost..."):""}))}))}O(),N("Steering Behaviors","<p>\n        These samples are based on the article\n        <a href='http://www.red3d.com/cwr/steer/'>Steering Behaviors For Autonomous Characters</a>.</p>\n    <p>\n        The article presents solutions for a common requirement of autonomous characters\n        in simulations, animations, and games: the ability to navigate around their world\n        in a life-like and improvisational manner.</p>\n    <p>\n        These \"steering behaviors\" are largely independent of the particulars of the\n        character's means of locomotion. Combinations of steering behaviors can be used\n        to achieve higher level goals.</p>\n    <p>\n        To implement steering behaviors in SimScript, the samples define a\n        <b>SteeringVehicle</b> class that extends <b>Entity</b>.</p>\n    <p>\n        The <b>SteeringVehicle</b> class exposes properties that represent the \n        entity's current <b>position</b>, <b>angle</b>, and <b>speed</b>.</p>\n    <p>\n        The <b>SteeringVehicle</b> class also exposes a <b>behaviors</b> property\n        that contains custom steering behaviors represented by\n        <b>SteeringBehavior</b> objects.</p>");{const e=e=>({rotateEntities:!0,getEntityHtml:e=>`<polygon\n                    stroke='black' stroke-width='4' fill='${e.color||"black"}' opacity='0.5'\n                    points='0 0, 40 0, 50 10, 40 20, 0 20'/>`,queues:[{queue:e.q,element:"svg .ss-queue"}]}),t=e=>{const t={red:[1,1,0],orange:[1,1,0],green:[0,1,0]};return{rotateEntities:!0,getEntityHtml:e=>X("car",40,20,10,t[e.color]||[0,0,0]),queues:[{queue:e.q,element:"x3d .ss-queue"}]}};B(new it,"Wander + Wrap (SVG)","<p>\n            This sample shows entities that implement two behaviors:</p>\n        <ul>\n            <li>\n                <b>WanderBehavior</b>: causes entities to change speed and\n                direction periodically, and</li>\n            <li>\n                <b>WrapBehavior</b>: causes entities to wrap around the\n                simulation surface as they move.</li>\n        </ul>\n        <label>\n            Entity Count\n            <input id='wander-cnt' type='range' min='1' max='100'>\n        </label>\n        <label>\n            Slow Mode\n            <input id='wander-slow' type='checkbox'>\n        </label>\n        <svg class='ss-anim steering' viewBox='0 0 1000 500'>\n            <circle class='ss-queue'/>\n        </svg>",((t,s)=>{p("wander-cnt",t.entityCount,(e=>t.entityCount=e)," entities"),p("wander-slow",t.slowMode,(e=>t.slowMode=e)),new U(t,s,e(t))})),B(new it,"Wander + Wrap (X3DOM)",`<p>\n            This sample shows entities that implement two behaviors:</p>\n        <ul>\n            <li>\n                <b>WanderBehavior</b>: causes entities to change speed and\n                direction periodically, and</li>\n            <li>\n                <b>WrapBehavior</b>: causes entities to wrap around the\n                simulation surface as they move.</li>\n        </ul>\n        <label>\n            Entity Count\n            <input id='wander-x3d-cnt' type='range' min='1' max='100'>\n        </label>\n        <label>\n            Slow Mode\n            <input id='wander-x3d-slow' type='checkbox'>\n        </label>\n        <x3d class='ss-anim'> \n            <scene>\n\n                \x3c!-- default viewpoint --\x3e\n                <viewpoint\n                    position='500 -500 600'\n                    orientation='1 0 0 .8'\n                    centerOfRotation='0 0 -20'>\n                </viewpoint>\n\n                \x3c!-- ground --\x3e\n                <transform scale='1000 500 .1' translation='500 250 -0.5'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='0.1 0.3 0.1' transparency='0.8'></material>\n                        </appearance>\n                        <box/>\n                    </shape>\n                </transform>\n\n                \x3c!-- queues --\x3e\n                ${G("q",500,250)}\n            </scene>\n        </x3d>`,((e,s)=>{p("wander-x3d-cnt",e.entityCount,(t=>e.entityCount=t)," entities"),p("wander-x3d-slow",e.slowMode,(t=>e.slowMode=t)),new U(e,s,t(e))})),B(new it({bounce:!0}),"Wander + Bounce (SVG)","<p>\n            This sample shows entities that implement two behaviors:</p>\n        <ul>\n            <li>\n                <b>WanderBehavior</b>: causes entities to change speed and\n                direction periodically, and</li>\n            <li>\n                <b>BounceBehavior</b>: causes entities to bounce off the\n                edges of the simulation surface.</li>\n        </ul>\n        <label>\n            Entity Count\n            <input id='bounce-cnt' type='range' min='1' max='100'>\n        </label>\n        <label>\n            Slow Mode\n            <input id='bounce-slow' type='checkbox'>\n        </label>\n        <svg class='ss-anim steering' viewBox='0 0 1000 500'>\n            <circle class='ss-queue'/>\n        </svg>",((t,s)=>{p("bounce-cnt",t.entityCount,(e=>t.entityCount=e)," entities"),p("bounce-slow",t.slowMode,(e=>t.slowMode=e)),new U(t,s,e(t))})),B(new it({bounce:!0}),"Wander + Bounce (X3DOM)",`<p>\n            This sample shows entities that implement two behaviors:</p>\n        <ul>\n            <li>\n                <b>WanderBehavior</b>: causes entities to change speed and\n                direction periodically, and</li>\n            <li>\n                <b>BounceBehavior</b>: causes entities to bounce off the\n                edges of the simulation surface.</li>\n        </ul>\n        <label>\n            Entity Count\n            <input id='bounce-x3d-cnt' type='range' min='1' max='100'>\n        </label>\n        <label>\n            Slow Mode\n            <input id='bounce-x3d-slow' type='checkbox'>\n        </label>\n        <x3d class='ss-anim'> \n            <scene>\n\n                \x3c!-- default viewpoint --\x3e\n                <viewpoint\n                    position='500 -500 600'\n                    orientation='1 0 0 .8'\n                    centerOfRotation='0 0 -20'>\n                </viewpoint>\n\n                \x3c!-- ground --\x3e\n                <transform scale='1000 500 .1' translation='500 250 -0.5'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='0.1 0.3 0.1' transparency='0.8'></material>\n                        </appearance>\n                        <box/>\n                    </shape>\n                </transform>\n\n                \x3c!-- queues --\x3e\n                ${G("q",500,250)}\n            </scene>\n        </x3d>`,((e,s)=>{p("bounce-x3d-cnt",e.entityCount,(t=>e.entityCount=t)," entities"),p("bounce-x3d-slow",e.slowMode,(t=>e.slowMode=t)),new U(e,s,t(e))})),B(new at,"Seek (SVG)","<p>\n            This sample shows entities that implement a <b>SeekBehavior</b>.\n            They move towards the center of the animation, slow down as they\n            approach the target, and restart from a random position when they\n            reach the target.</p>\n        <label>\n            Entity Count\n            <input id='seek-cnt' type='range' min='1' max='100'>\n        </label>\n        <label>\n            Slow Mode\n            <input id='seek-slow' type='checkbox'>\n        </label>\n        <svg class='ss-anim steering' viewBox='0 0 1000 500'>\n            <circle cx='50%' cy='50%' r='20' fill='none' stroke='orange'/>\n            <circle cx='50%' cy='50%' r='80' fill='none' stroke='orange'/>\n            <circle cx='50%' cy='50%' r='140' fill='none' stroke='orange'/>\n            <circle class='ss-queue'/>\n        </svg>",((t,s)=>{p("seek-cnt",t.entityCount,(e=>t.entityCount=e)," entities"),p("seek-slow",t.slowMode,(e=>t.slowMode=e)),new U(t,s,e(t))})),B(new at,"Seek (X3DOM)",`<p>\n            This sample shows entities that implement a <b>SeekBehavior</b>.\n            They move towards the center of the animation, slow down as they\n            approach the target, and restart from a random position when they\n            reach the target.</p>\n        <label>\n            Entity Count\n            <input id='seek-x3d-cnt' type='range' min='1' max='100'>\n        </label>\n        <label>\n            Slow Mode\n            <input id='seek-x3d-slow' type='checkbox'>\n        </label>\n        <x3d class='ss-anim'> \n            <scene>\n\n                \x3c!-- default viewpoint --\x3e\n                <viewpoint\n                    position='500 -500 600'\n                    orientation='1 0 0 .8'\n                    centerOfRotation='0 0 -20'>\n                </viewpoint>\n\n                \x3c!-- ground --\x3e\n                <transform scale='1000 500 .1' translation='500 250 -0.5'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='0.1 0.3 0.1' transparency='0.8'></material>\n                        </appearance>\n                        <box/>\n                    </shape>\n                </transform>\n\n                \x3c!-- queues --\x3e\n                ${G("q",500,250)}\n            </scene>\n        </x3d>`,((e,s)=>{p("seek-x3d-cnt",e.entityCount,(t=>e.entityCount=t)," entities"),p("seek-x3d-slow",e.slowMode,(t=>e.slowMode=t)),new U(e,s,t(e))})),B(new rt,"Chase (SVG)","<p>\n            This sample shows two types of entity:</p>\n        <ul>\n            <li>\n                <span class='light yellow'></span> Yellow entities\n                wander and wrap around the simulation surface.</li>\n            <li>\n                <span class='light red'></span> Red entities implement a\n                <b>SeekBehavior</b> and chase the yellow entities.</li>\n        </ul>\n        <label>\n            Entity Count\n            <input id='chase-cnt' type='range' min='1' max='100'>\n        </label>\n        <label>\n            Slow Mode\n            <input id='chase-slow' type='checkbox'>\n        </label>\n        <svg class='ss-anim steering' viewBox='0 0 1000 500'>\n            <circle class='ss-queue'/>\n        </svg>",((t,s)=>{p("chase-cnt",t.entityCount,(e=>t.entityCount=e)," entities"),p("chase-slow",t.slowMode,(e=>t.slowMode=e)),new U(t,s,e(t))})),B(new rt,"Chase (X3DOM)",`<p>\n            This sample shows two types of entity:</p>\n        <ul>\n            <li>\n                <span class='light yellow'></span> Yellow entities\n                wander and wrap around the simulation surface.</li>\n            <li>\n                <span class='light red'></span> Red entities implement a\n                <b>SeekBehavior</b> and chase the yellow entities.</li>\n        </ul>\n        <label>\n            Entity Count\n            <input id='chase-x3d-cnt' type='range' min='1' max='100'>\n        </label>\n        <label>\n            Slow Mode\n            <input id='chase-x3d-slow' type='checkbox'>\n        </label>\n        <x3d class='ss-anim'> \n            <scene>\n\n                \x3c!-- default viewpoint --\x3e\n                <viewpoint\n                    position='500 -500 600'\n                    orientation='1 0 0 .8'\n                    centerOfRotation='0 0 -20'>\n                </viewpoint>\n\n                \x3c!-- ground --\x3e\n                <transform scale='1000 500 .1' translation='500 250 -0.5'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='0.1 0.3 0.1' transparency='0.8'></material>\n                        </appearance>\n                        <box/>\n                    </shape>\n                </transform>\n\n                \x3c!-- queues --\x3e\n                ${G("q",500,250)}\n            </scene>\n        </x3d>`,((e,s)=>{p("chase-x3d-cnt",e.entityCount,(t=>e.entityCount=t)," entities"),p("chase-x3d-slow",e.slowMode,(t=>e.slowMode=t)),new U(e,s,t(e))})),B(new lt,"Avoid Static Obstacles (SVG)","<p>\n            Shows how to implement an <b>AvoidBehavior</b> that causes\n            entities to avoid obstacles.\n            In this example, all obstacles are static and are\n            shown as grey circles.</p>\n        <ul>\n            <li>\n                <span class='light yellow'></span> Yellow entities use an\n                <b>AvoidBehavior</b> to avoid obstacles.</li>\n            <li>\n                <span class='light red'></span> Entities turn red and change\n                speed and direction when they detect obstacles.</li>\n            </ul>\n        <label>\n            Entity Count\n            <input id='avoid-static-cnt' type='range' min='1' max='100'>\n        </label>\n        <label>\n            Slow Mode\n            <input id='avoid-static-slow' type='checkbox'>\n        </label>\n        <svg class='ss-anim steering' viewBox='0 0 1000 500'>\n            <circle class='ss-queue'/>\n        </svg>",((t,s)=>{p("avoid-static-cnt",t.entityCount,(e=>t.entityCount=e)," entities"),p("avoid-static-slow",t.slowMode,(e=>t.slowMode=e)),t.obstacles.forEach((e=>{s.innerHTML+=`<circle cx='${e.position.x}' cy='${e.position.y}' r='${e.radius}' fill='lightgrey'/>`})),new U(t,s,e(t))})),B(new lt({avoidEntities:!0}),"Avoid Static Obstacles (X3DOM)",`<p>\n            Shows how to implement an <b>AvoidBehavior</b> that causes\n            entities to avoid obstacles.\n            In this example, all obstacles are static and are\n            shown as orange cylinders.</p>\n        <label>\n            Entity Count\n            <input id='avoid-static-x3d-cnt' type='range' min='1' max='100'>\n        </label>\n        <label>\n            Slow Mode\n            <input id='avoid-static-x3d-slow' type='checkbox'>\n        </label>\n        <x3d class='ss-anim'> \n            <scene>\n\n                \x3c!-- default viewpoint --\x3e\n                <viewpoint\n                    position='500 -500 600'\n                    orientation='1 0 0 .8'\n                    centerOfRotation='0 0 -20'>\n                </viewpoint>\n\n                \x3c!-- ground --\x3e\n                <transform scale='1000 500 .1' translation='500 250 -0.5'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='0.1 0.3 0.1' transparency='0.8'></material>\n                        </appearance>\n                        <box/>\n                    </shape>\n                </transform>\n\n                \x3c!-- queues --\x3e\n                ${G("q",500,250)}\n            </scene>\n        </x3d>`,((e,s)=>{p("avoid-static-x3d-cnt",e.entityCount,(t=>e.entityCount=t)," entities"),p("avoid-static-x3d-slow",e.slowMode,(t=>e.slowMode=t)),e.obstacles.forEach((e=>{s.firstElementChild.innerHTML+=`\n                    <transform rotation='1 0 0 1.57' translation='${e.position.x} ${e.position.y} 15'>\n                        <shape>\n                            <appearance>\n                                <material diffuseColor='.5 .5 0'/>\n                            </appearance>\n                            <cylinder height='30' radius='${e.radius}'/>\n                        </shape>\n                    </transform>`})),new U(e,s,t(e))})),B(new lt({avoidEntities:!0}),"Avoid Static and Moving Obstacles (SVG)","<p>\n            Shows how to implement an <b>AvoidBehavior</b> that causes\n            entities to avoid obstacles.\n            In this example, in addition to the static obstacles shown\n            as grey circles, other entities are also treated as obstacles.</p>\n        <ul>\n            <li>\n                <span class='light yellow'></span> Yellow entities use an\n                <b>AvoidBehavior</b> to avoid obstacles.</li>\n            <li>\n                <span class='light red'></span> Entities turn red and change\n                speed and direction when they detect obstacles.</li>\n        </ul>\n        <label>\n            Entity Count\n            <input id='avoid-cnt' type='range' min='1' max='100'>\n        </label>\n        <label>\n            Slow Mode\n            <input id='avoid-slow' type='checkbox'>\n        </label>\n        <svg class='ss-anim steering' viewBox='0 0 1000 500'>\n            <circle class='ss-queue'/>\n        </svg>",((t,s)=>{p("avoid-cnt",t.entityCount,(e=>t.entityCount=e)," entities"),p("avoid-slow",t.slowMode,(e=>t.slowMode=e)),t.obstacles.forEach((e=>{s.innerHTML+=`<circle cx='${e.position.x}' cy='${e.position.y}' r='${e.radius}' fill='lightgrey'/>`})),new U(t,s,e(t))})),B(new lt({avoidEntities:!0}),"Avoid Static and Moving Obstacles (X3DOM)",`<p>\n            Shows how to implement an <b>AvoidBehavior</b> that causes\n            entities to avoid obstacles.\n            In this example, in addition to the static obstacles shown\n            as orange cylinders, other entities are also treated as\n            obstacles.</p>\n        <label>\n            Entity Count\n            <input id='avoid-x3d-cnt' type='range' min='1' max='100'>\n        </label>\n        <label>\n            Slow Mode\n            <input id='avoid-x3d-slow' type='checkbox'>\n        </label>\n        <x3d class='ss-anim'> \n            <scene>\n\n                \x3c!-- default viewpoint --\x3e\n                <viewpoint\n                    position='500 -500 600'\n                    orientation='1 0 0 .8'\n                    centerOfRotation='0 0 -20'>\n                </viewpoint>\n\n                \x3c!-- ground --\x3e\n                <transform scale='1000 500 .1' translation='500 250 -0.5'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='0.1 0.3 0.1' transparency='0.8'></material>\n                        </appearance>\n                        <box/>\n                    </shape>\n                </transform>\n\n                \x3c!-- queues --\x3e\n                ${G("q",500,250)}\n            </scene>\n        </x3d>`,((e,s)=>{p("avoid-x3d-cnt",e.entityCount,(t=>e.entityCount=t)," entities"),p("avoid-x3d-slow",e.slowMode,(t=>e.slowMode=t)),e.obstacles.forEach((e=>{s.firstElementChild.innerHTML+=`\n                    <transform rotation='1 0 0 1.57' translation='${e.position.x} ${e.position.y} 15'>\n                        <shape>\n                            <appearance>\n                                <material diffuseColor='.5 .5 0'/>\n                            </appearance>\n                            <cylinder height='30' radius='${e.radius}'/>\n                        </shape>\n                    </transform>`})),new U(e,s,t(e))})),B(new ht,"Follow Target, Avoid Followers (SVG)","<p>\n            This example shows how you can use <b>SeekBehavior</b> and\n            <b>AvoidBehavior</b> to have entities follow a target while\n            avoiding other entities.</p>\n        <ul>\n        <li>\n            <span class='light green'></span> The green entity wanders\n            around the simulation surface.</li>\n        <li>\n            <span class='light yellow'></span> Yellow entities follow it\n            and avoid other entities, turning red while avoiding them.</li>\n        </ul>\n        <label>\n            Entity Count\n            <input id='follow-cnt' type='range' min='1' max='100'>\n        </label>\n        <label>\n            Slow Mode\n            <input id='follow-slow' type='checkbox'>\n        </label>\n        <svg class='ss-anim steering' viewBox='0 0 1000 500'>\n            <circle class='ss-queue'/>\n        </svg>",((t,s)=>{p("follow-cnt",t.entityCount,(e=>t.entityCount=e)," entities"),p("follow-slow",t.slowMode,(e=>t.slowMode=e)),new U(t,s,e(t))})),B(new ht,"Follow Target, Avoid Followers (X3DOM)",`<p>\n            This example shows how you can use <b>SeekBehavior</b> and\n            <b>AvoidBehavior</b> to have entities follow a target while\n            avoiding other entities.</p>\n        <ul>\n        <li>\n            <span class='light green'></span> The green entity wanders\n            around the simulation surface.</li>\n        <li>\n            <span class='light yellow'></span> Yellow entities follow it\n            and avoid other entities.</li>\n        </ul>\n        <label>\n            Entity Count\n            <input id='follow-x3d-cnt' type='range' min='1' max='100'>\n        </label>\n        <label>\n            Slow Mode\n            <input id='follow-x3d-slow' type='checkbox'>\n        </label>\n        <x3d class='ss-anim'> \n            <scene>\n\n                \x3c!-- default viewpoint --\x3e\n                <viewpoint\n                    position='500 -500 600'\n                    orientation='1 0 0 .8'\n                    centerOfRotation='0 0 -20'>\n                </viewpoint>\n\n                \x3c!-- ground --\x3e\n                <transform scale='1000 500 .1' translation='500 250 -0.5'>\n                    <shape>\n                        <appearance> \n                            <material diffuseColor='0.1 0.3 0.1' transparency='0.8'></material>\n                        </appearance>\n                        <box/>\n                    </shape>\n                </transform>\n\n                \x3c!-- queues --\x3e\n                ${G("q",500,250)}\n            </scene>\n        </x3d>`,((e,s)=>{p("follow-x3d-cnt",e.entityCount,(t=>e.entityCount=t)," entities"),p("follow-x3d-slow",e.slowMode,(t=>e.slowMode=t)),new U(e,s,t(e))}))}O();
