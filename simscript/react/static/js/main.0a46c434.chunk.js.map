{"version":3,"sources":["simscript-react/components.tsx","simulations/simscript/crosswalk.tsx","simulations/simscript/barbershop.tsx","simulations/simscript/mmc.tsx","simulations/gpss/telephone.tsx","simulations/gpss/tv-repair-shop.tsx","simscript-react/util.tsx","simulations/gpss/order-point.tsx","simulations/gpss/textile.tsx","simulations/steering/steering.tsx","simulations/steering/seek.tsx","simulations/steering/avoid.tsx","simulations/steering/seek-avoid.tsx","simulations/steering/network.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SimulationComponent","props","_mounted","_lastUpdate","_animRef","React","createRef","sim","assert","Simulation","stateChanged","addEventListener","updateOutput","timeNowChanged","now","Date","this","animated","current","animHost","querySelector","Animation","getAnimationOptions","initializeAnimation","stop","forceUpdate","html","__html","e","state","SimulationState","Running","start","ctrlKey","runText","String","fromCharCode","stopText","animHtml","getAnimationHostHtml","className","renderParams","ref","HTMLDiv","onClick","clickRun","timeNow","renderOutput","getStatsTable","showNetValues","Component","NumericParameter","HTMLSpan","label","type","min","max","value","onChange","change","target","valueAsNumber","parent","suffix","BooleanParameter","checked","dangerouslySetInnerHTML","Signal","BarberShop","options","qJoe","Queue","qWait","name","timeUnit","setOptions","timeEnd","grossDwell","setHistogramParameters","generateEntities","Customer","Uniform","service","a","shop","simulation","enterQueue","leaveQueue","delay","sample","Entity","MMCComponent","c","qService","capacity","v","format","interArrival","mean","Exponential","factorial","n","f","i","lambda","mu","rho1","rho","p0","sum","Math","pow","lq","wq","timeElapsed","grossPop","avg","cnt","getHistogramChart","MMC","enterQueueImmediately","CrosswalkComponent","cycle","red","yellow","green","slowMode","wPavg","wCavg","wPmax","wCmax","qPedXing","qCarXing","getEntityHtml","Pedestrian","queues","queue","qPedArr","element","angle","qPedXed","qPedLeave","qCarArr","qCarXed","lights","querySelectorAll","updateStats","length","style","opacity","light","Crosswalk","walkToXing","walkAcross","walkAway","driveToXing","driveAway","pedestrianArrivalInterval","carArrivalInterval","RED","_slowMode","activate","TrafficLight","Car","maxTimeStep","frameDelay","GREEN","waitSignal","setLight","YELLOW","sendSignal","TelephoneComponent","totalDuration","averageDwell","lines","utilization","Telephone","callArrival","callDuration","Call","done","canEnter","TVRepairShopComponent","qRepairMan","qAllJobs","qOverhaulJobs","qCustomerJobs","qOnTheSpotJobs","TVRepairShop","interArrOverhaul","serviceOverhaul","interArrOnTheSpot","serviceOnTheSpot","interArrCustomer","serviceCustomer","TVOverhaulEntity","TVOnTheSpotEntity","TVCustomerEntity","priority","seize","getLineChart","title","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","series","forEach","s","apply","data","rng","svg","margin","left","right","top","bottom","color","width","x1","y1","x2","y2","toFixed","showPoints","radius","legend","OrderPointComponent","stockTally","inventoryLevel","dailyOrders","OrderPoint","stock","economicOrderQuantity","orderPoint","leadTime","demand","Tally","reset","OrderMaker","Order","units","round","push","add","TextileComponent","recReduced","recWound","recSpun","qReducers","qSpinners","qWinders","Textile","timeReduce","timeSpin","timeWind","reduced","spun","wound","TextileTransaction","TextileDispatcher","TextileRecorder","SteeringComponent","entityCount","viewpoint","viewPoint","createX3Queue","viewBox","carColors","orange","rotateEntities","createX3Car","updateEntityElement","material","colorAttr","clrNow","getAttribute","clrNext","toString","setAttribute","q","polygon","fill","obstacles","network","Array","scene","firstElementChild","innerHTML","o","position","x","y","height","renderNetworkX3D","p","Network","links","link","p1","from","p2","to","z","w","h","d","rgb","x3d","nodes","nd","pos","id","index","len","Point","distance","SteeringBehaviors","step","bounds","_eCnt","random","path","bounce","segment","generateObstaclesForLineSegment","cos","sin","rOverlap","l","SteeringVehicle","_speed","_speedMin","_speedMax","_accel","_angle","_sin","_cos","_pos","_steerAngle","_steerAngleMax","behaviors","PI","clamp","steerAngleMax","steerAngle","speedMin","speedMax","speed","dt","b","entity","applyBehavior","acceleration","targetAngle","da","delta","abs","sign","end","updatePosition","SteeringBehavior","WrapBehavior","BounceBehavior","r","xMin","xMax","yMin","yMax","WanderBehavior","changeInterval","steerChange","speedChange","_timeLastChange","SeekBehavior","arrive","Event","seekAngle","arrivalDistance","maxSpeedDistance","dist","pct","angTarget","getTurnAngle","onArrive","raise","EventArgs","empty","AvoidBehavior","_currentObstacle","_saveColor","_saveSpeed","avoidColor","slowDown","avoidAngle","preventOthersWhileAvoiding","obstacle","getNearestObstacle","currentObstacle","getAvoidAngle","criticalDistance","pNow","pNext","minDist","offset","aDelta","avoidDelta","getDeltaDistance","ePos","SteeringSeek","getRandomPosition","staticObstacles","SteeringAvoid","avoidEntities","SteeringLinearObstaclesSeek","generateObstaclesForPath","slice","xPos","yPos","indexOf","splice","NetworkSteering","createNetwork","rndNode","RandomInt","vehicles","vehiclesDone","NetworkSteeringVehicle","NetworkAvoidBehavior","NetworkSeekBehavior","shortestPath","angDelta","pass","avoid","turnAngle","_lastPath","startPosition","clone","nextLink","shift","rows","cols","spacing","sparse","row","floor","col","MyLink","exact","activeClassName","children","App","open","href","Home","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a46c434.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Simulation, SimulationState, Animation, assert } from 'simscript';\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// component that renders a Simulation\r\ninterface ISimulationComponentProps<T> {\r\n    sim: T,\r\n    showNetValues?: boolean,\r\n    animated?: boolean | string,\r\n    viewBox?: string,\r\n    viewPoint?: string\r\n}\r\n\r\nexport class SimulationComponent<T extends Simulation = Simulation> extends React.Component<ISimulationComponentProps<T>, any> {\r\n    _mounted = false;\r\n    _lastUpdate = 0;\r\n    _animRef = React.createRef<HTMLDivElement>();\r\n\r\n    // initialize simulation\r\n    constructor(props: ISimulationComponentProps<T>) {\r\n        super(props);\r\n\r\n        // this is our simulation\r\n        const sim = props.sim;\r\n        assert(sim instanceof Simulation, '**sim** parameter should be a Simulation');\r\n\r\n        // update output when state changes\r\n        sim.stateChanged.addEventListener(() => {\r\n            this.updateOutput();\r\n        });\r\n\r\n        // update output every 750ms\r\n        sim.timeNowChanged.addEventListener(() => {\r\n            let now = Date.now();\r\n            if (now - this._lastUpdate > 750) {\r\n                this._lastUpdate = now;\r\n                this.updateOutput();\r\n            }\r\n        });\r\n    }\r\n\r\n    // keep track of mounted state\r\n    componentDidMount() {\r\n        this._mounted = true;\r\n\r\n        // initialize animation after mounting\r\n        if (this.props.animated !== false && this._animRef.current !== null) {\r\n            const animHost = this._animRef.current.querySelector('.ss-anim') as HTMLElement;\r\n            if (animHost !== null) {\r\n                new Animation(this.props.sim, animHost, this.getAnimationOptions());\r\n                this.initializeAnimation(animHost);\r\n            }\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        this.props.sim.stop(true);\r\n        this._mounted = false;\r\n    }\r\n\r\n    // update simulation output\r\n    updateOutput() {\r\n        if (this._mounted) {\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    // set html output\r\n    createMarkup(html: string) {\r\n        return { __html: html };\r\n    };\r\n\r\n    // handle run/stop button\r\n    clickRun(e?: any) {\r\n        const sim = this.props.sim;\r\n        this._lastUpdate = 0;\r\n        if (sim.state === SimulationState.Running) {\r\n            sim.stop();\r\n        } else {\r\n            sim.start(e.ctrlKey);\r\n        }\r\n        this.updateOutput();\r\n    }\r\n\r\n    render() {\r\n        const\r\n            sim = this.props.sim,\r\n            runText = String.fromCharCode(9654) + ' Run',\r\n            stopText = String.fromCharCode(9632) + ' Stop',\r\n            animHtml = this.getAnimationHostHtml();\r\n        return <div className='sim-cmp'>\r\n            <div className='sim-params'>\r\n                {this.renderParams()}\r\n            </div>\r\n            <div className='sim-animation' ref={this._animRef}>\r\n                {this.props.animated !== false && animHtml != null && <HTMLDiv html={animHtml} />}\r\n            </div>\r\n            <button className='btn-run' onClick={e => this.clickRun(e)}>\r\n                {sim.state !== SimulationState.Running ? runText : stopText}\r\n            </button>\r\n            <div className='sim-output'>\r\n                {sim.timeNow > 0 && this.renderOutput()}\r\n            </div>\r\n        </div>;\r\n    }\r\n\r\n    // no parameters by default\r\n    renderParams(): JSX.Element | null {\r\n        return null;\r\n    }\r\n\r\n    // show stats table by default\r\n    renderOutput(): JSX.Element | null {\r\n        return <HTMLDiv html={this.props.sim.getStatsTable(this.props.showNetValues)} />\r\n    }\r\n\r\n    // no animation by default\r\n    getAnimationHostHtml(): string | null{\r\n        return null;\r\n    }\r\n    getAnimationOptions(): any {\r\n        return null;\r\n    }\r\n    initializeAnimation(animHost: HTMLElement) {\r\n        // override to initialize animation\r\n    }\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// component that provides two-way binding to numeric values\r\ninterface IParameterProps<T> {\r\n    label: string,\r\n    value: T,\r\n    min?: number,\r\n    max?: number,\r\n    change: (value: T) => void,\r\n    parent: React.Component,\r\n    suffix?: string,\r\n}\r\nexport function NumericParameter(props: IParameterProps<number>) {\r\n    return <label>\r\n        <HTMLSpan html={props.label} />\r\n        <input type='range'\r\n            min={props.min}\r\n            max={props.max}\r\n            value={props.value}\r\n            onChange={e => {\r\n                props.change(e.target.valueAsNumber);\r\n                props.parent.forceUpdate();\r\n            }} />\r\n        {props.suffix}\r\n    </label>;\r\n}\r\nexport function BooleanParameter(props: IParameterProps<boolean>) {\r\n    return <label>\r\n        <HTMLSpan html={props.label} />\r\n        <input type='checkbox'\r\n            checked={props.value}\r\n            onChange={e => {\r\n                props.change(e.target.checked);\r\n                props.parent.forceUpdate();\r\n            }} />\r\n        {props.suffix}\r\n    </label>;\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// component that renders HTML content\r\ninterface IHTMLDivProps {\r\n    html: string;\r\n}\r\nexport function HTMLDiv(props: IHTMLDivProps) {\r\n    return <div dangerouslySetInnerHTML={{ __html: props.html }} />;\r\n}\r\nexport function HTMLSpan(props: IHTMLDivProps) {\r\n    return <span dangerouslySetInnerHTML={{ __html: props.html }} />;\r\n}","import { Simulation, Entity, Queue, Exponential, Uniform, format, setOptions } from 'simscript';\r\nimport { SimulationComponent, HTMLDiv, NumericParameter, BooleanParameter } from '../../simscript-react/components';\r\n\r\n/**\r\n * Custom Component to show Crosswalk Simulations with \r\n * Simulation parameters and custom output.\r\n */\r\nexport class CrosswalkComponent extends SimulationComponent<Crosswalk> {\r\n\r\n    // render parameters section\r\n    renderParams(): JSX.Element {\r\n        const sim = this.props.sim;\r\n        return <>\r\n            <h3>\r\n                Parameters\r\n            </h3>\r\n            <p>\r\n                Pedestrian traffic light cycles:\r\n            </p>\r\n            <ul>\r\n                <li>\r\n                    <NumericParameter label='<span class=\"light red\"></span>Red:' parent={this}\r\n                        value={sim.cycle.red}\r\n                        min={0} max={120}\r\n                        change={v => sim.cycle.red = v}\r\n                        suffix={` ${format(sim.cycle.red, 0)} ${sim.timeUnit}`} />\r\n                </li>\r\n                <li>\r\n                    <NumericParameter label='<span class=\"light yellow\"></span>Yellow:' parent={this}\r\n                        value={sim.cycle.yellow}\r\n                        min={0} max={120}\r\n                        change={v => sim.cycle.yellow = v}\r\n                        suffix={` ${format(sim.cycle.yellow, 0)} ${sim.timeUnit}`} />\r\n                </li>\r\n                <li>\r\n                    <NumericParameter label='<span class=\"light green\"></span>Green:' parent={this}\r\n                        value={sim.cycle.green}\r\n                        min={0} max={120}\r\n                        change={v => sim.cycle.green = v}\r\n                        suffix={` ${format(sim.cycle.green, 0)} ${sim.timeUnit}`} />\r\n                </li>\r\n            </ul>\r\n            <BooleanParameter label='Slow Mode:' parent={this}\r\n                value={sim.slowMode}\r\n                change={v => sim.slowMode = v} />\r\n        </>;\r\n    }\r\n\r\n    // render output section\r\n    renderOutput(): JSX.Element {\r\n        const\r\n            sim = this.props.sim,\r\n            c = sim.cycle,\r\n            wPavg = (c.yellow + c.red) / (c.yellow + c.red + c.green) * (c.yellow + c.red) / 2,\r\n            wCavg = (c.yellow + c.green) / (c.yellow + c.red + c.green) * (c.yellow + c.green) / 2,\r\n            wPmax = c.yellow + c.red,\r\n            wCmax = c.yellow + c.green;\r\n        \r\n        return <>\r\n            <h3>\r\n                Results\r\n            </h3>\r\n            <ul>\r\n                <li>\r\n                    Simulated time: <b>{format(sim.timeNow / 60 / 60)}</b> hours</li>\r\n                <li>\r\n                    Elapsed time: <b>{format(sim.timeElapsed / 1000)}</b> seconds</li>\r\n                <li>\r\n                    Average Pedestrian Wait: <b>{format(sim.qPedXing.grossDwell.avg)}</b>{' '}\r\n                    <i>({format(wPavg)})</i> {sim.timeUnit}</li>\r\n                <li>\r\n                    Longest Pedestrian Wait: <b>{format(sim.qPedXing.grossDwell.max)}</b>{' '}\r\n                    <i>({format(wPmax)})</i> {sim.timeUnit}</li>\r\n                <li>\r\n                    Average Car Wait: <b>{format(sim.qCarXing.grossDwell.avg)}</b>{' '}\r\n                    <i>({format(wCavg)})</i> {sim.timeUnit}</li>\r\n                <li>\r\n                    Longest Car Wait: <b>{format(sim.qCarXing.grossDwell.max)}</b>{' '}\r\n                    <i>({format(wCmax)})</i> {sim.timeUnit}</li>\r\n                <li>\r\n                    Pedestrian Count: <b>{format(sim.qPedXing.grossDwell.cnt, 0)}</b></li>\r\n                <li>\r\n                    Car Count: <b>{format(sim.qCarXing.grossDwell.cnt, 0)}</b></li>\r\n            </ul>\r\n\r\n            <div className='histograms'>\r\n                <HTMLDiv html={sim.qPedXing.grossPop.getHistogramChart('Pedestrians waiting to cross')} />\r\n                <HTMLDiv html={sim.qCarXing.grossPop.getHistogramChart('Cars waiting to cross')} />\r\n            </div>\r\n                \r\n        </>;\r\n    }\r\n\r\n    // render animation section\r\n    getAnimationHostHtml(): string {\r\n        return `<svg class='ss-anim' viewbox='0 0 1000 500'>\r\n            <g class='light'>\r\n                <rect class='light' x='47.5%' y='0%' width='5%' height='25%' rx='2%'/>\r\n                <circle class='red' cx='50%' cy='5%' r='2%'/>\r\n                <circle class='yellow' cx='50%' cy='12.5%' r='2%'/>\r\n                <circle class='green' cx='50%' cy='20%' r='2%'/>\r\n            </g>\r\n\r\n            <rect class='street' x='10%' y='50%' width='80%' height='20%'/>\r\n            <rect class='crosswalk' x='45%' y='50%' width='10%' height='20%'/>\r\n\r\n            <circle class='ss-queue car-arr' cx='10%' cy='60%' r='10'/>\r\n            <circle class='ss-queue car-xing' cx='40%' cy='60%' r='10'/>\r\n            <circle class='ss-queue car-xed' cx='90%' cy='60%' r='10'/>\r\n\r\n            <circle class='ss-queue ped-arr' cx='10%' cy='85%' r='10'/>\r\n            <circle class='ss-queue ped-xing' cx='50%' cy='75%' r='10'/>\r\n            <circle class='ss-queue ped-xed' cx='50%' cy='45%' r='10'/>\r\n            <circle class='ss-queue ped-leave' cx='90%' cy='35%' r='10'/>\r\n        </svg>`;\r\n    }\r\n\r\n    // get animation options\r\n    getAnimationOptions(): any {\r\n        const sim = this.props.sim;\r\n        return {\r\n            getEntityHtml: (e: Entity) => {\r\n                if (e instanceof Pedestrian) {\r\n                    return `<g class='ped' fill='black' stroke='black' opacity='0.8' transform='scale(1,0.8)'>\r\n                        <circle cx='1%' cy='1%' r='0.5%' fill='orange'/>\r\n                        <rect x='.4%' y='2%' width='1.3%' height='4%' fill='green' rx='0.7%'/>\r\n                        <rect x='.66%' y='4%' width='.8%' height='3%' fill='blue'/>\r\n                        <rect x='.4%' y='7%' width='1.3%' height='.75%' rx='0.5%'/>\r\n                    </g>`;\r\n                } else {\r\n                    return `<g class='car' fill='black' stroke='black'>\r\n                        <rect x='1%' y='0' width='5%' height='4%' rx='1%'/>\r\n                        <rect x='0' y='1.5%' width='9%' height='3%' fill='red' rx='0.5%'/>\r\n                        <circle cx='1.5%' cy='4%' r='.9%' opacity='0.8'/>\r\n                        <circle cx='7.5%' cy='4%' r='.9%' opacity='0.8'/>\r\n                        <rect x='0' y='0' width='10%' height='1%' opacity='0'/>\r\n                    </g>`;\r\n                }\r\n            },\r\n            queues: [\r\n                { queue: sim.qPedArr, element: 'svg .ss-queue.ped-arr' },\r\n                { queue: sim.qPedXing, element: 'svg .ss-queue.ped-xing', angle: -45, max: 8 },\r\n                { queue: sim.qPedXed, element: 'svg .ss-queue.ped-xed' },\r\n                { queue: sim.qPedLeave, element: 'svg .ss-queue.ped-leave' },\r\n\r\n                { queue: sim.qCarArr, element: 'svg .ss-queue.car-arr' },\r\n                { queue: sim.qCarXing, element: 'svg .ss-queue.car-xing', angle: 0, max: 16 },\r\n                { queue: sim.qCarXed, element: 'svg .ss-queue.car-xed' },\r\n            ]\r\n        };\r\n    }\r\n\r\n    // update traffic lights\r\n    initializeAnimation(animHost: HTMLElement): void {\r\n        const\r\n            sim = this.props.sim,\r\n            lights = animHost.querySelectorAll('.light circle'),\r\n            updateStats = () => {\r\n                for (let i = 0; i < lights.length; i++) {\r\n                    (lights[i] as HTMLElement).style.opacity = (i === sim.light) ? '1' : '';\r\n                }\r\n            };\r\n        sim.timeNowChanged.addEventListener(updateStats);\r\n        sim.stateChanged.addEventListener(updateStats);\r\n\r\n    }\r\n}\r\n    \r\n/**\r\n * CrossWalk simulation\r\n */\r\nexport enum Signal {\r\n    RED,\r\n    YELLOW,\r\n    GREEN,\r\n}\r\n\r\nexport class Crosswalk extends Simulation {\r\n    qPedArr = new Queue('Pedestrian Arrival');\r\n    qPedXing = new Queue('Pedestrian Crossing');\r\n    qPedXed = new Queue('Pedestrian Crossed');\r\n    qPedLeave = new Queue('Pedestrian Leaving');\r\n\r\n    qCarArr = new Queue('Car Arrival');\r\n    qCarXing = new Queue('Car Crossing');\r\n    qCarXed = new Queue('Car Crossed');\r\n    \r\n    walkToXing = new Uniform(60, 120);\r\n    walkAcross = new Uniform(10, 20);\r\n    walkAway = new Uniform(120, 180);\r\n\r\n    driveToXing = new Uniform(5, 6);\r\n    driveAway = new Uniform(10, 12);\r\n\r\n    pedestrianArrivalInterval = new Exponential(60 / 10); // 10/min\r\n    carArrivalInterval = new Exponential(60 / 6); // 6/min\r\n\r\n    cycle = {\r\n        red: 20,\r\n        yellow: 10,\r\n        green: 30,\r\n    };\r\n    light = Signal.RED;\r\n\r\n    _slowMode = false;\r\n\r\n    // initialize Simulation\r\n    constructor(options?: any) {\r\n        super();\r\n        this.name = 'Crosswalk';\r\n        this.timeUnit = 's';\r\n        this.qPedXing.grossPop.setHistogramParameters(3);\r\n        this.qCarXing.grossPop.setHistogramParameters(2);\r\n        this.timeEnd = 3600 * 24; // 24 hours\r\n        setOptions(this, options);\r\n    }\r\n\r\n    // create entity generators\r\n    onStarting() {\r\n        super.onStarting();\r\n        this.activate(new TrafficLight());\r\n        this.generateEntities(Pedestrian, this.pedestrianArrivalInterval);\r\n        this.generateEntities(Car, this.carArrivalInterval);\r\n    }\r\n\r\n    // toggle simulation speed\r\n    get slowMode(): boolean {\r\n        return this._slowMode;\r\n    }\r\n    set slowMode(value: boolean) {\r\n        this._slowMode = value;\r\n        if (value) {\r\n            this.maxTimeStep = 1;\r\n            this.frameDelay = 30;\r\n        } else {\r\n            this.maxTimeStep = 0;\r\n            this.frameDelay = 0;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// pedestrians\r\nexport class Pedestrian extends Entity<Crosswalk> {\r\n    async script() {\r\n        let sim = this.simulation;\r\n\r\n        // walk to crosswalk\r\n        await this.delay(sim.walkToXing.sample(), {\r\n            queues: [sim.qPedArr, sim.qPedXing]\r\n        });\r\n\r\n        // enter pedestrian crosswalk\r\n        await this.enterQueue(sim.qPedXing);\r\n\r\n        // wait for green light\r\n        while (sim.light !== Signal.GREEN) {\r\n            await this.waitSignal(Signal.GREEN);\r\n        }\r\n\r\n        // leave crossing\r\n        this.leaveQueue(sim.qPedXing);\r\n\r\n        // walk across and away\r\n        await this.delay(sim.walkAcross.sample(), {\r\n            queues: [sim.qPedXing, sim.qPedXed]\r\n        });\r\n        await this.delay(sim.walkAway.sample(), {\r\n            queues: [sim.qPedXed, sim.qPedLeave]\r\n        });\r\n    }\r\n}\r\n\r\n// cars\r\nexport class Car extends Entity<Crosswalk> {\r\n    async script() {\r\n        let sim = this.simulation;\r\n\r\n        // drive to crosswalk\r\n        await this.delay(sim.driveToXing.sample(), {\r\n            queues: [sim.qCarArr, sim.qCarXing]\r\n        });\r\n\r\n        // enter crosswalk\r\n        await this.enterQueue(sim.qCarXing);\r\n\r\n        // wait until red for pedestrians\r\n        while (sim.light !== Signal.RED) {\r\n            await this.waitSignal(Signal.RED);\r\n        }\r\n\r\n        // leave crosswalk\r\n        this.leaveQueue(sim.qCarXing);\r\n\r\n        // drive away\r\n        await this.delay(sim.driveAway.sample(), {\r\n            queues: [sim.qCarXing, sim.qCarXed]\r\n        });\r\n    }\r\n}\r\n\r\n// traffic light\r\nclass TrafficLight extends Entity<Crosswalk> {\r\n    async script() {\r\n        let sim = this.simulation;\r\n        while (true) {\r\n\r\n            // turn green to allow pedestrians to cross\r\n            this.setLight(Signal.GREEN);\r\n            await this.delay(sim.cycle.green);\r\n\r\n            // turn yellow to clear pedestrians\r\n            this.setLight(Signal.YELLOW);\r\n            await this.delay(sim.cycle.yellow);\r\n\r\n            // turn red to allow cars to cross\r\n            this.setLight(Signal.RED);\r\n            await this.delay(sim.cycle.red);\r\n        }\r\n    }\r\n    setLight(value: Signal) {\r\n        this.simulation.light = value;\r\n        this.sendSignal(value);\r\n    }\r\n}\r\n","import { Simulation, Queue, Uniform, Entity, setOptions } from 'simscript';\r\n\r\nexport class BarberShop extends Simulation {\r\n    qJoe = new Queue('Joe', 1);\r\n    qWait = new Queue('Wait Area');\r\n\r\n    // initialize Simulation\r\n    constructor(options?: any) {\r\n        super();\r\n        this.name = 'Barbershop';\r\n        this.timeUnit = 'min';\r\n        setOptions(this, options);\r\n    }\r\n\r\n    // generate entities with inter-arrival times of 18 min for 8 hours * 7 days\r\n    onStarting() {\r\n        super.onStarting();\r\n        this.timeEnd = 60 * 8 * 7; // 7 8-hour days\r\n        this.qWait.grossDwell.setHistogramParameters(1, 0, 10);\r\n        this.generateEntities(Customer, new Uniform(18 - 6, 18 + 6));\r\n    }\r\n}\r\nclass Customer extends Entity<BarberShop> {\r\n    service = new Uniform(15 - 3, 15 + 3);\r\n    async script() {\r\n        const shop = this.simulation;\r\n        await this.enterQueue(shop.qWait); // enter the line\r\n        await this.enterQueue(shop.qJoe); // seize Joe the barber\r\n        this.leaveQueue(shop.qWait); // leave the line\r\n        await this.delay(this.service.sample()); // get a haircut\r\n        this.leaveQueue(shop.qJoe); // free Joe        \r\n    }\r\n}\r\n","import { Simulation, Entity, Queue, Exponential, setOptions, format } from 'simscript';\r\nimport { SimulationComponent, HTMLDiv, NumericParameter } from '../../simscript-react/components';\r\n\r\n/**\r\n * Custom Component to show MMC Simulations with \r\n * Simulation parameters and custom output.\r\n */\r\nexport class MMCComponent extends SimulationComponent<MMC> {\r\n\r\n    // render parameters section\r\n    renderParams(): JSX.Element {\r\n        const\r\n            sim = this.props.sim,\r\n            c = sim.qService.capacity as number;\r\n\r\n        return <>\r\n            <h3>\r\n                Parameters\r\n            </h3>\r\n            <ul>\r\n                <li>\r\n                    <NumericParameter label='Number of Servers:' parent={this} value={c}\r\n                        min={1} max={10}\r\n                        change={v => sim.qService.capacity = v}\r\n                        suffix={` ${format(c, 0)} servers`} />\r\n                </li>\r\n                <li>\r\n                    <NumericParameter label='Mean inter-arrival time:' parent={this} value={sim.interArrival.mean}\r\n                        min={10} max={200}\r\n                        change={v => sim.interArrival = new Exponential(v)}\r\n                        suffix={` ${format(sim.interArrival.mean, 0)} ${sim.timeUnit}`} />\r\n                </li>\r\n                <li>\r\n                    <NumericParameter label='Mean service time:' parent={this} value={sim.service.mean}\r\n                        min={10} max={200}\r\n                        change={v => sim.service = new Exponential(v)}\r\n                        suffix={` ${format(sim.service.mean, 0)} ${sim.timeUnit}`} />\r\n                </li>\r\n            </ul>\r\n        </>;\r\n    }\r\n\r\n    // render output section\r\n    renderOutput(): JSX.Element {\r\n        const sum = (rho1: number, c: number): number => {\r\n            let sum = 0;\r\n            for (let i = 0; i < c; i++) {\r\n                sum += 1 / factorial(i) * Math.pow(rho1, i);\r\n            }\r\n            return sum;\r\n        }\r\n        const factorial = (n: number): number => {\r\n            let f = 1;\r\n            for (let i = 2; i <= n; i++) f *= i;\r\n            return f;\r\n        }\r\n        const\r\n            sim = this.props.sim as MMC,\r\n            lambda = 1 / sim.interArrival.mean, // arrival rate\r\n            mu = 1 / sim.service.mean, // service rate\r\n            c = sim.qService.capacity as number, // server count\r\n            rho1 = lambda / mu, // utilization\r\n            rho = rho1 / c; // actual utilization\r\n        const\r\n            p0 = 1 / (sum(rho1, c) + 1 / factorial(c) * Math.pow(rho1, c) * c * mu / (c * mu - lambda)),\r\n            ws = Math.pow(rho1, c) * mu * p0 / (factorial(c - 1) * Math.pow(c * mu - lambda, 2)) + 1 / mu,\r\n            ls = ws * lambda,\r\n            lq = ls - rho1, // average queue length\r\n            wq = lq / lambda; // average wait\r\n        \r\n        return <>\r\n            <h3>\r\n                Results\r\n            </h3>\r\n\r\n            {/* show error if utilization exceeds 100% */}\r\n            {rho >= 1 && <p className='error'>\r\n                ** The server utilization exceeds 100%; the system will not reach a steady-state. **\r\n            </p>}\r\n\r\n            <ul className='multi-column'>\r\n                <li>\r\n                    Simulated time:{' '}\r\n                    <b>{format(sim.timeNow / 60, 0)}</b> hours</li>\r\n                <li>\r\n                    Elapsed time:{' '}\r\n                    <b>{format(sim.timeElapsed / 1000, 2)}</b> seconds</li>\r\n                <li>\r\n                    Number of Servers:{' '}\r\n                    <b>{format(c, 0)}</b></li>\r\n                <li>\r\n                    Mean Inter-Arrival Time:{' '}\r\n                    <b>{format(sim.interArrival.mean, 0)}</b> {sim.timeUnit}</li>\r\n                <li>\r\n                    Mean Service Time:{' '}\r\n                    <b>{format(sim.service.mean, 0)}</b> {sim.timeUnit}</li>\r\n                <li>\r\n                    Server Utilization:{' '}\r\n                    <b>{format(sim.qService.grossPop.avg / c * 100, 0)}%</b>{' '}\r\n                    (<i>{format(rho * 100, 0)}%</i>)</li>\r\n                <li>\r\n                    Mean Wait:{' '}\r\n                    <b>{format(sim.qWait.grossDwell.avg, 2)}</b>{' '}\r\n                    (<i>{format(wq, 2)})</i> {sim.timeUnit}</li>\r\n                <li>\r\n                    Mean Queue:{' '}\r\n                    <b>{format(sim.qWait.grossPop.avg, 2)}</b>{' '}\r\n                    (<i>{format(lq, 2)}</i>) cust</li>\r\n                <li>\r\n                    Longest Wait:{' '}\r\n                    <b>{format(sim.qWait.grossDwell.max, 0)}</b> {sim.timeUnit}</li>\r\n                <li>\r\n                    Longest Queue:{' '}\r\n                    <b>{format(sim.qWait.grossPop.max, 0)}</b> cust</li>\r\n                <li>\r\n                    Customers Served:{' '}\r\n                    <b>{format(sim.qService.grossDwell.cnt, 0)}</b></li>\r\n            </ul>\r\n\r\n            <div className='histograms'>\r\n                <HTMLDiv html={sim.qWait.grossPop.getHistogramChart('Queue lengths') }/>\r\n                <HTMLDiv html={sim.qWait.grossDwell.getHistogramChart('Wait times (hours)', 1/60)} />\r\n            </div>\r\n\r\n        </>;\r\n    }\r\n}\r\n\r\n/**\r\n * MMC Simulation\r\n */\r\nexport class MMC extends Simulation {\r\n    qWait = new Queue('Wait');\r\n    qService = new Queue('Service', 2);\r\n    interArrival = new Exponential(80);\r\n    service = new Exponential(100);\r\n\r\n    constructor(options?: any) {\r\n        super();\r\n        this.name = 'MMC';\r\n        this.timeUnit = 'min';\r\n        setOptions(this, options);\r\n    }\r\n\r\n    // generate entities with exponential inter-arrival times\r\n    onStarting() {\r\n        super.onStarting();\r\n\r\n        // get up tally histograms\r\n        this.qWait.grossPop.setHistogramParameters(1, 0, 10);\r\n        this.qWait.grossDwell.setHistogramParameters(60, 0, 500 - 0.1);\r\n\r\n        // start simulation\r\n        this.generateEntities(Customer, this.interArrival, 1e5); // limit the # of customers\r\n    }\r\n}\r\n\r\n// MMC customer\r\nclass Customer extends Entity<MMC> {\r\n    async script() {\r\n        let sim = this.simulation;\r\n        this.enterQueueImmediately(sim.qWait);\r\n        await this.enterQueue(sim.qService);\r\n        this.leaveQueue(sim.qWait);\r\n        await this.delay(sim.service.sample());\r\n        this.leaveQueue(sim.qService);\r\n    }\r\n}\r\n\r\n","import { Simulation, Entity, Queue, Uniform, EventArgs, format } from 'simscript';\r\nimport { SimulationComponent, HTMLDiv } from '../../simscript-react/components';\r\n\r\n/**\r\n * Custom Component to show Telephone Simulations with custom output.\r\n */\r\nexport class TelephoneComponent extends SimulationComponent<Telephone> {\r\n\r\n    // render custom output\r\n    renderOutput(): JSX.Element {\r\n        const sim = this.props.sim;\r\n        return <>\r\n            <ul>\r\n                <li>\r\n                    It took <b>{format(sim.timeNow / 60)}</b> minutes to complete 200 calls.</li>\r\n                <li>\r\n                    The average call took <b>{format(sim.totalDuration.averageDwell / 60)}</b> minutes to complete.</li>\r\n                <li>\r\n                    The phone line utilization was <b>{format(sim.lines.utilization * 100, 0)}</b>%.</li>\r\n            </ul>\r\n            <HTMLDiv html={sim.totalDuration.grossDwell.getHistogramChart('Call Duration (min)', 1 / 60)}/>\r\n        </>;\r\n    }\r\n}\r\n\r\n//-------------------------------------------------------------------------\r\n// Telephone\r\n//-------------------------------------------------------------------------\r\n// A simple telephone system has two external lines.\r\n// Calls, which originate externally, arrive every 100±60 seconds.\r\n// When the line is occupied, the caller redials after 5±1 minutes have elapsed.\r\n// Call duration is 3±1 minutes.\r\n// A tabulation of the distribution of the time each caller takes to make\r\n// a successful call is required.\r\n// How long will it take for 200 calls to be completed?\r\n//-------------------------------------------------------------------------\r\nexport class Telephone extends Simulation {\r\n    lines = new Queue('Phone Lines', 2);\r\n    totalDuration = new Queue('Total Duration');\r\n    callArrival = new Uniform(100 - 60, 100 + 60); // calls arrive every 100 +- 60 sec\r\n    callDuration = new Uniform(2 * 60, 4 * 60); // calls last 3 +- 1 min\r\n\r\n    onStarting(e: EventArgs) {\r\n        super.onStarting(e);\r\n        this.timeUnit = 's';\r\n        this.totalDuration.grossDwell.setHistogramParameters(60 * 10, 0, 60 * 120); // 10-min bins up to 2 hours\r\n        this.generateEntities(Call, this.callArrival, 200);\r\n    }\r\n}\r\nclass Call extends Entity {\r\n    async script() {\r\n        const sim = this.simulation as Telephone;\r\n        let done = false;\r\n        this.enterQueueImmediately(sim.totalDuration);\r\n        while (!done) {\r\n            if (sim.lines.canEnter(1)) { // line is available, make the call now\r\n                this.enterQueueImmediately(sim.lines);\r\n                await this.delay(sim.callDuration.sample());\r\n                this.leaveQueue(sim.lines);\r\n                done = true;\r\n            } else { // line is busy, wait for 5 minutes and try again\r\n                await this.delay(5 * 60);\r\n            }\r\n        }\r\n        this.leaveQueue(sim.totalDuration);\r\n    }\r\n}\r\n","import { Simulation, Entity, Queue, Uniform, EventArgs, format } from 'simscript';\r\nimport { SimulationComponent } from '../../simscript-react/components';\r\n\r\n/**\r\n * Custom Component to show TVRepairShop Simulations with custom output.\r\n */\r\nexport class TVRepairShopComponent extends SimulationComponent<TVRepairShop> {\r\n\r\n    // render custom output\r\n    renderOutput(): JSX.Element {\r\n        const sim = this.props.sim;\r\n        return <ul>\r\n            <li>\r\n                The utilization of the repairman is <b>{format(sim.qRepairMan.utilization * 100, 0)}</b>%.</li>\r\n            <li>\r\n                The overall average delay is <b>{format(sim.qAllJobs.averageDwell, 0)}</b> min.</li>\r\n            <li>\r\n                The average delay for overhaul jobs is <b>{format(sim.qOverhaulJobs.averageDwell, 0)}</b> min.</li>\r\n            <li>\r\n                The average delay for customer jobs is <b>{format(sim.qCustomerJobs.averageDwell, 0)}</b> min.</li>\r\n            <li>\r\n                The average delay for on-the-spot jobs is <b>{format(sim.qOnTheSpotJobs.averageDwell, 0)}</b> min.</li>\r\n        </ul>;\r\n    }\r\n}\r\n\r\n//-------------------------------------------------------------------------\r\n// TVRepairShop\r\n//-------------------------------------------------------------------------\r\n// A television shop employs a single repairman to overhaul its rented\r\n// television sets, service customers’ sets and do on-the-spot repairs.\r\n// Overhaul of company owned television sets commences every 40±8 hours\r\n// and takes 10±1 hours to complete.\r\n// On-the-spot repairs, such as fuse replacement, tuning and adjustments \r\n// are done immediately. These arrive every 90±10 minutes and take 15±5 \r\n// minutes.\r\n// Customers’ television sets requiring normal service arrive every 5±1 \r\n// hours and take 120±30 minutes to complete.\r\n// Normal service of television sets has a higher priority than the \r\n// overhaul of company owned, rented sets.\r\n// 1. Simulate the operation of the repair department for 50 days.\r\n// 2. Determine the utilization of the repairman and the delays in the\r\n// service to customers.\r\n//-------------------------------------------------------------------------\r\nexport class TVRepairShop extends Simulation {\r\n\r\n    // queues\r\n    qRepairMan = new Queue('RepairMan', 1);\r\n    qAllJobs = new Queue('Wait All Jobs');\r\n    qOverhaulJobs = new Queue('Wait Overhaul Jobs');\r\n    qOnTheSpotJobs = new Queue('Wait On-The-Spot Jobs');\r\n    qCustomerJobs = new Queue('Wait Customer Jobs');\r\n\r\n    // delays\r\n    interArrOverhaul = new Uniform((40 - 8) * 60, (40 + 8) * 60); // 40+-8 hours\r\n    serviceOverhaul = new Uniform((10 - 1) * 60, (10 + 1) * 60); // 10+-1 hours\r\n    interArrOnTheSpot = new Uniform(90 - 10, 90 + 10); // 90+-10 min\r\n    serviceOnTheSpot = new Uniform(15 - 5, 15 + 5); // 15+-5 min\r\n    interArrCustomer = new Uniform((5 - 1) * 60, (5 + 1) * 60); // 5+-1 hours\r\n    serviceCustomer = new Uniform(120 - 30, 120 + 30); // 120+-30 minutes\r\n\r\n    // initialization\r\n    onStarting(e?: EventArgs) {\r\n        super.onStarting(e);\r\n        this.timeUnit = 'hours';\r\n        this.timeEnd = 50 * 8 * 60; // simulate 50 8-hour days\r\n        this.generateEntities(TVOverhaulEntity, this.interArrOverhaul);\r\n        this.generateEntities(TVOnTheSpotEntity, this.interArrOnTheSpot);\r\n        this.generateEntities(TVCustomerEntity, this.interArrCustomer);\r\n    }\r\n}\r\nclass TVOverhaulEntity extends Entity<TVRepairShop> {\r\n    async script() {\r\n        const sim = this.simulation;\r\n        this.priority = 1;\r\n\r\n        // use repairman for TV overhauling (preemptively)\r\n        await this.seize(\r\n            sim.qRepairMan,\r\n            sim.serviceOverhaul.sample(),\r\n            [sim.qAllJobs, sim.qOverhaulJobs],\r\n            sim.qRepairMan);\r\n    }\r\n}\r\nclass TVCustomerEntity extends Entity<TVRepairShop> {\r\n    async script() {\r\n        const sim = this.simulation;\r\n        this.priority = 2;\r\n\r\n        // use repairman for a customer job (preemptively)\r\n        await this.seize(\r\n            sim.qRepairMan,\r\n            sim.serviceCustomer.sample(),\r\n            [sim.qAllJobs, sim.qCustomerJobs],\r\n            sim.qRepairMan);\r\n    }\r\n}\r\nclass TVOnTheSpotEntity extends Entity<TVRepairShop> {\r\n    async script() {\r\n        const sim = this.simulation;\r\n        this.priority = 3;\r\n\r\n        // use repairman for an on-the-spot job (preemptively)\r\n        await this.seize(\r\n            sim.qRepairMan,\r\n            sim.serviceOnTheSpot.sample(),\r\n            [sim.qAllJobs, sim.qOnTheSpotJobs],\r\n            sim.qRepairMan);\r\n    }\r\n}\r\n","import { format } from 'simscript';\r\n\r\n/**\r\n * Defines parameters for series in a chart created by the\r\n * {@link getLineChart} method.\r\n */\r\n interface IChartSeries {\r\n    /** The series name as shown in the legend. */\r\n    name?: string,\r\n    /** The series color (defaults to black). */\r\n    color?: string,\r\n    /** The series line width (defaults to 3px). */\r\n    width?: string,\r\n    /** Whether to show points with tooltpis along the line (dafaults to false). */\r\n    showPoints?: boolean,\r\n    /** An array containing the series data. */\r\n    data: number[]\r\n}\r\n\r\n/**\r\n * Gets an HTML string showing numeric arrays as an SVG line chart.\r\n * @param title Chart title.\r\n * @param series Array of {@link IChartSeries} objects.\r\n * @returns A string showing the series as an SVG line chart.\r\n */\r\nexport function getLineChart(title: string, ...series: IChartSeries[]): string {\r\n\r\n    // get max and min (accounting for all series)\r\n    let max: number = Number.NEGATIVE_INFINITY;\r\n    let min: number = Number.POSITIVE_INFINITY;\r\n    series.forEach((s: IChartSeries) => {\r\n        min = Math.min(min, Math.min.apply(null, s.data));\r\n        max = Math.max(max, Math.max.apply(null, s.data));\r\n    });\r\n    const rng = (max - min) || 1;\r\n\r\n    // start chart\r\n    let svg = `<svg xmlns='http://www.w3.org/2000/svg' class='ss-chart' fill='none'>`;\r\n\r\n    // add box\r\n    svg += `<rect width='100%' height='100%' stroke='black' />`;\r\n\r\n    // chart margins\r\n    const margin = {\r\n        left: 10,\r\n        right: 10,\r\n        top: 10,\r\n        bottom: 10\r\n    };\r\n    \r\n    // add each series\r\n    series.forEach((s: IChartSeries) => {\r\n        if (s.data.length > 1) {\r\n\r\n            // create line group\r\n            svg += `<g stroke='${s.color || 'black'}' stroke-width='${s.width || '3'}'>`;\r\n            if (s.name) {\r\n                const\r\n                    min = Math.min.apply(null, s.data),\r\n                    max = Math.max.apply(null, s.data),\r\n                    rng = min < max ? ` (min: ${format(min, 0)}, max: ${format(max, 0)})` : '';\r\n                svg += `<title>\r\n                    ${s.name}${rng}\r\n                </title>`;\r\n            }\r\n\r\n            // add lines\r\n            for (let i = 0; i < s.data.length - 1; i++) {\r\n                const\r\n                    x1 = margin.left + i / (s.data.length - 1) * (100 - margin.left - margin.right), // 10% to 90%\r\n                    y1 = 100 - margin.bottom - (s.data[i] - min) / rng * (100 - margin.top - margin.bottom),\r\n                    x2 = margin.left + (i + 1) / (s.data.length - 1) * (100 - margin.left - margin.right),\r\n                    y2 = 100 - margin.bottom - (s.data[i + 1] - min) / rng * (100 - margin.top - margin.bottom);\r\n                svg += `<line x1=${x1.toFixed(1)}% y1=${y1.toFixed(1)}% x2=${x2.toFixed(1)}% y2=${y2.toFixed(1)}% />`;\r\n            }\r\n\r\n            // close line group\r\n            svg += '</g>';\r\n\r\n            // show series points\r\n            if (s.showPoints) {\r\n\r\n                // create point group\r\n                svg += `<g fill='${s.color || 'black'}' stroke='none' opacity='0.4'>`;\r\n\r\n                // add points\r\n                for (let i = 0; i < s.data.length - 1; i++) {\r\n                    const\r\n                        x1 = margin.left + i / (s.data.length - 1) * (100 - margin.left - margin.right), // 10% to 90%\r\n                        y1 = 100 - margin.bottom - (s.data[i] - min) / rng * (100 - margin.top - margin.bottom),\r\n                        x2 = margin.left + (i + 1) / (s.data.length - 1) * (100 - margin.left - margin.right),\r\n                        y2 = 100 - margin.bottom - (s.data[i + 1] - min) / rng * (100 - margin.top - margin.bottom),\r\n                        radius = `r='5px'`;\r\n\r\n                    // show first, last, inflexion, and distant points\r\n                    if (i === 0 ||\r\n                        i === s.data.length - 1 ||\r\n                        x2 - x1 > 10 ||\r\n                        (s.data[i] - s.data[i - 1]) * (s.data[i] - s.data[i + 1]) > 0) {\r\n                        svg += `<circle cx=${x1.toFixed(1)}% cy=${y1.toFixed(1)}% ${radius}>\r\n                            <title>${format(s.data[i], 0)}</title>\r\n                        </circle>`;\r\n                    }\r\n\r\n                    // last point\r\n                    if (i === s.data.length - 2) {\r\n                        svg += `<circle cx=${x2.toFixed(1)}% cy=${y2.toFixed(1)}% ${radius}>\r\n                            <title>${format(s.data[i + 1], 0)}</title>\r\n                        </circle>`;\r\n                    }\r\n                }\r\n\r\n                // close point group\r\n                svg += '</g>';\r\n            }\r\n        }\r\n    });\r\n\r\n    // add title\r\n    if (title) {\r\n        svg += `<text x='50%' y='1em' text-anchor='middle' fill='black'>${title}</text>`\r\n    }\r\n\r\n    // add legends\r\n    let top = 10;\r\n    let legend = '';\r\n    series.forEach((s: IChartSeries) => {\r\n        if (s.name) {\r\n            legend += `\r\n                <rect x='${margin.left}%' y='${top}%' width='2.5%' height='1em' fill='${s.color || 'black'}' />\r\n                <text x='${margin.left + 3}%' y='${top + 1}%' fill='black'>${s.name}</text>`;\r\n            top += 10;\r\n        }\r\n    });\r\n    if (legend) {\r\n        svg += `<g font-size='80%' font-weight='bold' dominant-baseline='hanging'>\r\n            ${legend}\r\n        </g>`;\r\n    }\r\n\r\n\r\n    // finish and return chart\r\n    svg += `</svg>`;\r\n    return svg;\r\n}\r\n","import { Simulation, Entity, Uniform, Tally, EventArgs, format } from 'simscript';\r\nimport { SimulationComponent, HTMLDiv } from '../../simscript-react/components';\r\nimport { getLineChart } from '../../simscript-react/util';\r\n\r\n/**\r\n * Custom Component to show OrderPoint Simulations with custom output.\r\n */\r\nexport class OrderPointComponent extends SimulationComponent<OrderPoint> {\r\n\r\n    // render custom output\r\n    renderOutput(): JSX.Element {\r\n        const sim = this.props.sim;\r\n        return <>\r\n            <ul>\r\n                <li>\r\n                    Average Inventory: <b>{format(sim.stockTally.avg, 0)}</b> units.</li>\r\n                <li>\r\n                    Maximum Inventory: <b>{format(sim.stockTally.max, 0)}</b> units.</li>\r\n                <li>\r\n                    Minimum Inventory: <b>{format(sim.stockTally.min, 0)}</b> units.</li>\r\n            </ul>\r\n            <HTMLDiv html={\r\n                getLineChart('Demand and Inventory',\r\n                    { data: [sim.stockTally.min, sim.stockTally.min], color: '#d0d0d0', width: '1' },\r\n                    { data: [sim.stockTally.max, sim.stockTally.max], color: '#d0d0d0', width: '1' },\r\n                    { data: [sim.stockTally.avg, sim.stockTally.avg], color: '#d0d0d0', width: '1' },\r\n                    { name: 'Inventory', data: sim.inventoryLevel, color: 'blue', showPoints: true },\r\n                    { name: 'Daily Orders', data: sim.dailyOrders, color: 'green' }\r\n                )\r\n            } />\r\n        </>;\r\n    }\r\n}\r\n        \r\n//-------------------------------------------------------------------------\r\n// OrderPoint\r\n//-------------------------------------------------------------------------\r\n// An inventory system is controlled by an order point, set at 600 units,\r\n// and an economic order quantity of 500 units.\r\n// The initial stock quantity is 700. Daily demand is in the range 40 to 63\r\n// units, evenly distributed.\r\n// The lead-time from ordering to delivery of goods is one week (5 days).\r\n// Simulate the inventory system for a period of 100 days.\r\n// Determine the distribution of inventory and the actual daily sales.\r\n//-------------------------------------------------------------------------\r\nexport class OrderPoint extends Simulation {\r\n    stock = 700;\r\n    economicOrderQuantity = 500;\r\n    orderPoint = 600;\r\n    leadTime = 5;\r\n    demand = new Uniform(40, 63);\r\n    stockTally = new Tally();\r\n\r\n    // plot data\r\n    dailyOrders: number[] = [];\r\n    inventoryLevel: number[] = [];\r\n\r\n    onStarting(e?: EventArgs) {\r\n        super.onStarting(e);\r\n        this.timeUnit = 'days';\r\n\r\n        this.stock = 700;\r\n        this.timeEnd = 100;\r\n        this.dailyOrders = [];\r\n        this.inventoryLevel = [];\r\n        this.stockTally.reset();\r\n\r\n        this.generateEntities(OrderMaker);\r\n        this.generateEntities(Order, 1);\r\n    }\r\n}\r\n\r\nclass OrderMaker extends Entity {\r\n    async script() {\r\n        const sim = this.simulation as OrderPoint;\r\n        for (; ;) {\r\n\r\n            // calculate how many units to order\r\n            let units = sim.stock <= sim.orderPoint\r\n                ? sim.economicOrderQuantity\r\n                : 0;\r\n\r\n            // place order, wait for it to arrive, and update the stock\r\n            if (units) {\r\n                await this.delay(sim.leadTime);\r\n                sim.stock += units;\r\n            } else { // wait for a day and check again\r\n                await this.delay(1);\r\n            }\r\n        }\r\n    }\r\n}\r\nclass Order extends Entity {\r\n    async script() {\r\n        const sim = this.simulation as OrderPoint;\r\n        let units = Math.round(sim.demand.sample());\r\n        sim.stock = Math.max(0, sim.stock - units);\r\n        sim.dailyOrders.push(units);\r\n        sim.inventoryLevel.push(sim.stock);\r\n        sim.stockTally.add(sim.stock);\r\n    }\r\n}\r\n","import { Simulation, Queue, Entity, Uniform, EventArgs, format } from 'simscript';\r\nimport { SimulationComponent, HTMLDiv } from '../../simscript-react/components';\r\nimport { getLineChart } from '../../simscript-react/util';\r\n\r\n/**\r\n * Custom Component to show Textile Simulations with custom output.\r\n */\r\nexport class TextileComponent extends SimulationComponent<Textile> {\r\n\r\n    // render custom output\r\n    renderOutput(): JSX.Element {\r\n        const sim = this.props.sim;\r\n        return <>\r\n            <p>\r\n                The distribution of the in-process inventories was:</p>\r\n            <HTMLDiv html={\r\n                getLineChart('In-Process Inventories',\r\n                    { name: 'Reduced', data: sim.recReduced, color: 'red', showPoints: true },\r\n                    { name: 'Wound', data: sim.recWound, color: 'green', showPoints: true },\r\n                    { name: 'Spun', data: sim.recSpun, color: 'blue', showPoints: true },\r\n                )\r\n            } />\r\n            <p>\r\n                The utilization of the machines was:</p>\r\n            <ul>\r\n                <li>Reducers: <b>{format(sim.qReducers.utilization * 100, 0)}</b>%</li>\r\n                <li>Spinners: <b>{format(sim.qSpinners.utilization * 100, 0)}</b>%</li>\r\n                <li>Winders: <b>{format(sim.qWinders.utilization * 100, 0)}</b>%</li>\r\n            </ul>\r\n        </>;\r\n    }\r\n}\r\n\r\n//-------------------------------------------------------------------------\r\n// Textile\r\n//-------------------------------------------------------------------------\r\n// A textile factory produces fine mohair yarn in three departments.\r\n// The first department draws and blends the raw material, in sliver form,\r\n// and reduces it to a suitable thickness for spinning, in 5 reducer frames.\r\n// The second department spins the yarn in one of 40 spinning frames.\r\n// The final process is in the winding department, where the yarn is wound\r\n// from spinning bobbins onto cones for dispatch.\r\n// There are 8 winding frames to perform the winding operation.\r\n// The factory works 8 hours per day.\r\n// The unit of production is 10 kilograms of yarn.\r\n// Reducing frames produce one unit every 38±2 minutes, while the spinning \r\n// frames and winding frames produce one unit in 320±20 minutes and 64±4\r\n// minutes, respectively.\r\n// The initial inventory of reduced material is 50 units, spun material\r\n// is 25 units and finished yarn is 25 units.\r\n// The finished material is dispatched, in a container of capacity 200\r\n// units, every two days.\r\n// 1. Simulate the production process in the textile factory for 5 days.\r\n// 2. Find the distribution of the in-process inventories.\r\n// 3. Determine the utilization of each of the three types of machines.\r\n//-------------------------------------------------------------------------\r\nexport class Textile extends Simulation {\r\n\r\n    // resources\r\n    qReducers = new Queue('Reducers', 5); // 5 reducer frames\r\n    qSpinners = new Queue('Spinners', 40); // 40 spinning frames\r\n    qWinders = new Queue('Winders', 8); // 8 winding frames\r\n\r\n    // processing times (minutes)\r\n    timeReduce = new Uniform(38 - 2, 38 + 2);\r\n    timeSpin = new Uniform(320 - 20, 320 + 20);\r\n    timeWind = new Uniform(64 - 4, 64 + 4);\r\n\r\n    // stock\r\n    reduced = 50;\r\n    spun = 25;\r\n    wound = 25;\r\n\r\n    // stock records\r\n    recReduced: number[] = [];\r\n    recWound: number[] = [];\r\n    recSpun: number[] = [];\r\n\r\n    onStarting(e?: EventArgs) {\r\n        super.onStarting(e);\r\n        this.timeUnit = 'min';\r\n\r\n        // initialize stock\r\n        this.reduced = 50;\r\n        this.spun = 25;\r\n        this.wound = 25;\r\n        this.recReduced = [];\r\n        this.recWound = [];\r\n        this.recSpun = [];\r\n\r\n        // simulate 5 8-hour days\r\n        this.timeEnd = 5 * 8 * 60;\r\n\r\n        // activate entities\r\n        this.generateEntities(TextileTransaction, 20); // one transaction every 20 min\r\n        this.activate(new TextileDispatcher()); // dispatch 200kg every two days\r\n        this.activate(new TextileRecorder()); // record inventories once a day\r\n    }\r\n}\r\n\r\nclass TextileTransaction extends Entity {\r\n    async script() {\r\n        const sim = this.simulation as Textile;\r\n        ////console.log('started unit', this.serial, 'at', sim.timeNow);\r\n\r\n        // reduce one unit (10kg)\r\n        await this.enterQueue(sim.qReducers);\r\n        await this.delay(sim.timeReduce.sample());\r\n        this.leaveQueue(sim.qReducers);\r\n        sim.reduced++;\r\n\r\n        // spin one unit\r\n        await this.enterQueue(sim.qSpinners);\r\n        await this.delay(sim.timeSpin.sample());\r\n        this.leaveQueue(sim.qSpinners);\r\n        sim.reduced--;\r\n        sim.spun++;\r\n\r\n        // wind one unit\r\n        await this.enterQueue(sim.qWinders);\r\n        await this.delay(sim.timeWind.sample());\r\n        this.leaveQueue(sim.qWinders);\r\n        sim.spun--;\r\n        sim.wound++;\r\n\r\n        ///console.log('finished unit', this.serial, 'at', sim.timeNow);\r\n    }\r\n}\r\nclass TextileDispatcher extends Entity {\r\n    async script() {\r\n        const sim = this.simulation as Textile;\r\n\r\n        // one unit of production is 10 kilograms of yarn\r\n        for (; ;) {\r\n            await this.delay(16 * 60); // every two 8-hour days\r\n            if (sim.wound >= 20) {\r\n                sim.wound -= 20; // dispatched 20 units (200kg)\r\n                //console.log('dispatched 200kg', sim.wound);////\r\n            } else {\r\n                //console.log('missed dispatch', sim.wound);////\r\n            }\r\n        }\r\n    }\r\n}\r\nclass TextileRecorder extends Entity {\r\n    async script() {\r\n        const sim = this.simulation as Textile;\r\n        for (; ;) {\r\n\r\n            // record inventories\r\n            sim.recReduced.push(sim.reduced);\r\n            sim.recWound.push(sim.wound);\r\n            sim.recSpun.push(sim.spun);\r\n\r\n            // record once a day\r\n            await this.delay(8 * 60);\r\n        }\r\n    }\r\n}\r\n","import {\r\n    Simulation, SimulationState, Entity, Queue, Event, EventArgs, RandomVar,\r\n    Network, IAnimationPosition, IPoint, ILink, Point, setOptions, clamp, format\r\n} from 'simscript';\r\nimport { SimulationComponent, NumericParameter, BooleanParameter } from '../../simscript-react/components';\r\n\r\nconst\r\n    FAST_MODE_FRAMEDELAY = 0,\r\n    SLOW_MODE_FRAMEDELAY = 5;\r\n\r\n/**\r\n * Custom Component to show Crosswalk Simulations with \r\n * Simulation parameters and custom output.\r\n */\r\nexport class SteeringComponent extends SimulationComponent<SteeringBehaviors> {\r\n\r\n    // render parameters section\r\n    renderParams(): JSX.Element {\r\n        const sim = this.props.sim;\r\n        return <>\r\n            <h3>\r\n                Parameters\r\n            </h3>\r\n            <ul>\r\n                <li>\r\n                    <NumericParameter label='Entity Count:' parent={this}\r\n                        value={sim.entityCount}\r\n                        min={1} max={50}\r\n                        change={v => sim.entityCount = v}\r\n                        suffix={` ${format(sim.entityCount, 0)} entities`} /></li>\r\n                <li>\r\n                    <BooleanParameter label='Slow Mode:' parent={this}\r\n                        value={sim.slowMode}\r\n                        min={1} max={50}\r\n                        change={v => sim.slowMode = v} /></li>\r\n            </ul>\r\n        </>;\r\n    }\r\n\r\n    // render output section\r\n    renderOutput(): JSX.Element {\r\n        return <></>;\r\n    }\r\n\r\n    // render animation section (X3DOM or SVG)\r\n    getAnimationHostHtml(): string {\r\n        if (this.props.animated === 'x3d') {\r\n\r\n            // get viewpoint\r\n            const viewpoint = this.props.viewPoint || `<viewpoint\r\n                position='500 -200 400'\r\n                orientation='1 0 0 .8'\r\n                centerOfRotation='0 0 -20'>\r\n            </viewpoint>`;\r\n\r\n            // render X3DOM animation element\r\n            return `<x3d class='ss-anim steering'>\r\n                <scene>\r\n                    ${viewpoint}\r\n                    <transform scale='1000 500 .1' translation='500 250 -0.5'>\r\n                        <shape>\r\n                            <appearance>\r\n                                <material diffuseColor='0.1 0.3 0.1' transparency='0.8'></material>\r\n                            </appearance>\r\n                            <box />\r\n                        </shape>\r\n                    </transform>\r\n                    ${this.createX3Queue('q', 0, 0)}\r\n                </scene>\r\n            </x3d>`;\r\n            \r\n        } else {\r\n            \r\n            // render SVG animation element\r\n            const viewBox = this.props.viewBox || '0 0 1000 500';\r\n            return `<svg class='ss-anim steering' viewbox='${viewBox}'>\r\n                <circle class='ss-queue'></circle>\r\n            </svg>`;\r\n        }\r\n    }\r\n\r\n    // get animation options (X3DOM or SVG)\r\n    getAnimationOptions(): any {\r\n        const sim = this.props.sim;\r\n        if (this.props.animated === 'x3d') {\r\n\r\n            // get X3DOM animation options\r\n            const carColors: any = {\r\n                red: [1, 0, 0],\r\n                orange: [1, 1, 0],\r\n                green: [0, 1, 0]\r\n            };\r\n            return {\r\n                rotateEntities: true,\r\n                getEntityHtml: (e: SteeringVehicle) => this.createX3Car('car', 40, 20, 10, carColors[e.color] || [0, 0, 0]),\r\n                updateEntityElement: (e: SteeringVehicle, element: HTMLElement) => {\r\n                    const\r\n                        material = element.querySelector('material') as HTMLElement,\r\n                        colorAttr = 'diffuseColor',\r\n                        clrNow = material.getAttribute(colorAttr),\r\n                        clrNext = (carColors[e.color] || [0, 0, 0]).toString();\r\n                    if (clrNext !== clrNow) {\r\n                        material.setAttribute(colorAttr, clrNext);\r\n                    }\r\n                },\r\n                queues: [\r\n                    { queue: sim.q, element: 'x3d .ss-queue' }\r\n                ]\r\n            }\r\n        } else {\r\n            \r\n            // get SVG animation options\r\n            return {\r\n                rotateEntities: true,\r\n                getEntityHtml: (e: SteeringVehicle) => `<polygon\r\n                    stroke='black' stroke-width='4' fill='${e.color || 'black'}' opacity='0.5'\r\n                    points='0 0, 40 0, 50 10, 40 20, 0 20'/>`\r\n                ,\r\n                updateEntityElement: (e: SteeringVehicle, element: HTMLElement) => {\r\n                    const polygon = element.querySelector('polygon') as any;\r\n                    if (polygon.fill !== e.color) {\r\n                        polygon.setAttribute('fill', e.color);\r\n                    }\r\n                },\r\n                queues: [\r\n                    { queue: sim.q, element: 'svg .ss-queue' }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n\r\n    // initialize animation (X3DOM or SVG)\r\n    initializeAnimation(animHost: HTMLElement) {\r\n        const\r\n            obstacles = (this.props.sim as any).obstacles,\r\n            network = (this.props.sim as any).network;\r\n        \r\n        if (this.props.animated === 'x3d') {\r\n\r\n            // initialize X3DOM animation element\r\n            const\r\n                height = 30,\r\n                color = '.5 .5 0';\r\n            if (obstacles instanceof Array) {\r\n\r\n                // show obstacles\r\n                const scene = animHost.firstElementChild as HTMLElement;\r\n                let html = scene.innerHTML;\r\n                obstacles.forEach(o => {\r\n                    html += `<transform rotation='1 0 0 1.57' translation='${o.position.x} ${o.position.y} ${height / 2}'>\r\n                        <shape>\r\n                            <appearance>\r\n                                <material diffuseColor='${color}'/>\r\n                            </appearance>\r\n                            <cylinder height=${height} radius='${o.radius}'/>\r\n                        </shape>\r\n                    </transform>`;\r\n                });\r\n                scene.innerHTML = html;\r\n            }\r\n            if (network != null) {\r\n\r\n                // show network\r\n                this.renderNetworkX3D(network, animHost, false, true);\r\n            }\r\n    \r\n        } else {\r\n\r\n            // initialize SVG animation element\r\n            const color = 'lightgrey';\r\n            if (obstacles instanceof Array) {\r\n                let html = animHost.innerHTML;\r\n                obstacles.forEach(o => {\r\n                    const p = o.position;\r\n                    html += `<circle cx='${p.x}' cy='${p.y}' r='${o.radius}' fill='${color}'/>`;\r\n                });\r\n                animHost.innerHTML = html;\r\n            }\r\n            if (network instanceof Network) {\r\n                let html = `<g stroke='lightgray' stroke-width='40' stroke-linecap='round'>`;\r\n                network.links.forEach(link => {\r\n                    const\r\n                        p1 = link.from.position as IPoint,\r\n                        p2 = link.to.position as IPoint;\r\n                    html += `<line x1='${p1.x}' y1='${p1.y}' x2='${p2.x}' y2='${p2.y}' />`;\r\n                });\r\n                html += `</g>`;\r\n                animHost.innerHTML += html;\r\n            }\r\n        }\r\n    }\r\n\r\n    // X3DOM utilities\r\n    createX3Queue(name: string, x: number, y: number, z = 0): string {\r\n        return `<transform class='ss-queue ${name}' translation='${x} ${y} ${z}'>\r\n            <shape>\r\n                <appearance>\r\n                    <material diffuseColor='1 1 0' transparency='0.6'></material>\r\n                </appearance>\r\n                <sphere radius='4'></sphere>\r\n            </shape>\r\n        </transform>`;\r\n    }\r\n    createX3Car(name: string, w: number, h: number, d: number, rgb: number[]): string {\r\n        return `<transform class='ss-car ${name}' translation='0 0 ${h / 2}'>\r\n            <transform>\r\n                <shape> <!-- body -->\r\n                    <appearance>\r\n                        <material diffuseColor='${rgb[0]} ${rgb[1]} ${rgb[2]}'></material>\r\n                    </appearance>\r\n                    <box size='${w} ${h} ${d}'></box>\r\n                </shape>\r\n                <shape render='false'> <!-- 5 unit padding -->\r\n                    <box size='${w * 1.1} ${h * 1.1} ${d * 1.1}'></box>\r\n                </shape>\r\n            </transform>\r\n            <transform translation='${-w * .2} 0 ${+d * .5}'>\r\n                <shape> <!-- cabin -->\r\n                    <appearance>\r\n                        <material diffuseColor='${rgb[0] / 3} ${rgb[1] / 3} ${rgb[2] / 3}'></material>\r\n                    </appearance>\r\n                    <box size='${w * .5} ${h * .75} ${d}'></box>\r\n                </shape>\r\n            </transform>\r\n            <transform translation='${-w / 2 + 4} 0 -2'>\r\n                <shape> <!-- front wheels -->\r\n                    <appearance>\r\n                        <material diffuseColor='0 0 0'></material>\r\n                    </appearance>\r\n                    <cylinder radius='3' height='${h + 2}'></cylinder>\r\n                </shape>\r\n            </transform>\r\n            <transform translation='${+w / 2 - 4} 0 -2'>\r\n                <shape> <!-- rear wheels -->\r\n                    <appearance>\r\n                        <material diffuseColor='0 0 0'></material>\r\n                    </appearance>\r\n                    <cylinder radius='3' height='${h + 2}'></cylinder>\r\n                </shape>\r\n            </transform>\r\n        </transform>`;\r\n    }\r\n    renderNetworkX3D(network: Network, x3d: HTMLElement, nodes = true, links = true) {\r\n        let html = '';\r\n        if (nodes) {\r\n            network.nodes.forEach(nd => {\r\n                const pos = nd.position as IPoint;\r\n                html += `<transform class='ss-queue q${nd.id}' translation='${pos.x} ${pos.y} 0'>\r\n                    <shape>\r\n                        <appearance>\r\n                            <material transparency='0.5' diffuseColor='1 1 0'/>\r\n                        </appearance>\r\n                        <box size='5 5 2'></box>\r\n                    </shape>\r\n                </transform>`;\r\n            });\r\n        }\r\n        if (links) {\r\n            network.links.forEach((link: ILink, index: number) => {\r\n                if (index % 2 === 0) {\r\n                    const from = link.from.position as IPoint;\r\n                    const to = link.to.position as IPoint;\r\n                    const len = Point.distance(from, to);\r\n                    html += `<transform translation='${from.x} ${from.y} 0' rotation='0 0 1 ${Point.angle(from, to, true)}'>\r\n                        <transform translation='${len / 2} 0 0'>\r\n                            <shape>\r\n                                <appearance>\r\n                                    <material transparency='0' diffuseColor='.1 .1 .1'/>\r\n                                </appearance>\r\n                                <box size='${len + 30} 50 1'></box>\r\n                            </shape>\r\n                        </transform>\r\n                    </transform>`;\r\n                }\r\n            });\r\n        }\r\n        const scene = x3d.querySelector('scene') as HTMLElement;\r\n        scene.innerHTML += html;\r\n    }\r\n}\r\n\r\n/**\r\n * Simulation used to show various steering behaviors.\r\n * It defines properties that determine the animation **bounds**, \r\n * a **slowMode**, and the **entityCount**. \r\n * It also provides a **getRandomPosition** method for generating\r\n * random positions for entities.\r\n */\r\nexport class SteeringBehaviors extends Simulation {\r\n    q = new Queue();\r\n    step = 0.01; // simulated time step\r\n    bounds = [new Point(), new Point(1000, 500)]; // simulation bounds\r\n    _eCnt = 8; // start with 8 entities\r\n\r\n    /**\r\n     * Initializes a new instance of the {@link SteeringBehaviors} class.\r\n     * @param options Object with parameters used to initialize the {@link SteeringBehaviors} instance.\r\n     */\r\n    constructor(options?: any) {\r\n        super();\r\n        this.slowMode = false;\r\n        setOptions(this, options);\r\n    }\r\n    /**\r\n     * Gets or sets a value that determines the simulation speed.\r\n     */\r\n    get slowMode(): boolean {\r\n        return this.frameDelay === SLOW_MODE_FRAMEDELAY;\r\n    }\r\n    set slowMode(value: boolean) {\r\n        this.frameDelay = value ? SLOW_MODE_FRAMEDELAY : FAST_MODE_FRAMEDELAY;\r\n    }\r\n    /**\r\n     * Gets or sets the number of entities to generate.\r\n     */\r\n    get entityCount(): number {\r\n        return this._eCnt;\r\n    }\r\n    set entityCount(value: number) {\r\n        if (value !== this._eCnt) {\r\n            this._eCnt = value;\r\n            if (this.state === SimulationState.Running) {\r\n                this.start(true);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets a random position within the animation surface.\r\n     */ \r\n     getRandomPosition(): IPoint {\r\n        return new Point(\r\n            Math.round(Math.random() * this.bounds[1].x),\r\n            Math.round(Math.random() * this.bounds[1].y));\r\n    }\r\n    /**\r\n     * Generates a group of circular obstacles along a given path.\r\n     * @param path Array of {@link IPoint} instances that define the path.\r\n     * @param radius The radius of the obstacles.\r\n     * @param bounce Value for the **bounce** property of the obstacles.\r\n     * @returns Array of {@link IObstacle} instances.\r\n     */\r\n    generateObstaclesForPath(path: IPoint[], radius: number, bounce?: boolean): IObstacle[] {\r\n        const obstacles: IObstacle[] = [];\r\n        for (let i = 0; i < path.length - 1; i++) {\r\n            const segment = this.generateObstaclesForLineSegment(path[i], path[i + 1], radius, bounce);\r\n            obstacles.push(...segment);\r\n        }\r\n        return obstacles;\r\n    }\r\n    /**\r\n     * Generates a group of circular obstacles along a given line segment.\r\n     * @param p1 {@link IPoint} that defines the start of the obstacle.\r\n     * @param p2 {@link IPoint} that defines the end of the obstacle.\r\n     * @param radius The radius of the obstacles.\r\n     * @param bounce Value for the **bounce** property of the obstacles.\r\n     * @returns Array of {@link IObstacle} instances.\r\n     */\r\n    generateObstaclesForLineSegment(p1: IPoint, p2: IPoint, radius: number, bounce?: boolean): IObstacle[] {\r\n        const\r\n            d = Point.distance(p1, p2),\r\n            a = Point.angle(p1, p2, true),\r\n            cos = Math.cos(a),\r\n            sin = Math.sin(a),\r\n            rOverlap = radius * 1.1,\r\n            obstacles: IObstacle[] = [];\r\n        for (let l = 0; l <= d; l += radius * 2) {\r\n            obstacles.push({\r\n                position: { x: p1.x + l * cos, y: p1.y + l * sin },\r\n                radius: rOverlap,\r\n                bounce: bounce\r\n            });\r\n        }\r\n        return obstacles;\r\n    }\r\n}\r\n\r\n/**\r\n * Entities with a {@link position}, {@link angle}, {@link speed},\r\n * {@link acceleration}, {@link steerAngle}, and an \r\n * {@link updatePosition} method that updates the current position\r\n * and angle after a time interval.\r\n * \r\n * This class also has a {@link behaviors} property that contains\r\n * an array of {@link SteeringBehavior} objects which are applied\r\n * in sequence to update the entity state after each time increment.\r\n */\r\nexport class SteeringVehicle<S extends SteeringBehaviors = SteeringBehaviors> extends Entity<S> {\r\n    _speed = 0;\r\n    _speedMin = 0;\r\n    _speedMax: number | null = null;\r\n    _accel = 0;\r\n    _angle = 0; // in degrees, clockwise\r\n    _sin = 0;\r\n    _cos = 1;\r\n    _pos: IPoint = new Point();\r\n    _steerAngle = 0;\r\n    _steerAngleMax = 90;\r\n    _lastUpdate = 0;\r\n  \r\n    /**\r\n     * Initializes a new instance of the {@link SteeringVehicle} class.\r\n     */\r\n    constructor(options?: any) {\r\n        super();\r\n        setOptions(this, options);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the entity's current color.\r\n     * \r\n     * The default value for this property is **'black'**.\r\n     */\r\n    color = 'black';\r\n    /**\r\n     * Gets or sets the entity's radius (used to detect collisions).\r\n     * \r\n     * The default value for this property is **25**.\r\n     */\r\n    radius = 25;\r\n    /**\r\n     * Gets or sets an array containing {@link SteeringBehavior} objects\r\n     * that determine how the entity moves within the simulation.\r\n     */\r\n    behaviors: SteeringBehavior[] = []; // no behaviors by default\r\n    /**\r\n     * Gets or sets a value that determines whether the entity is done\r\n     * and should exit the simulation.\r\n     */\r\n    done = false;\r\n    /**\r\n     * Gets or sets the entity's current position.\r\n     */\r\n    get position(): IPoint {\r\n        return this._pos;\r\n    }\r\n    set position(value: IPoint) {\r\n        this._pos = value;\r\n    }\r\n    /**\r\n     * Gets or sets the entity's current angle.\r\n     * \r\n     * The angle determines the entity's orientation (on the X-Y plane)\r\n     * and the direction it is moving in.\r\n     * \r\n     * The angle is measured in degrees, in the clockwise direction.\r\n     */\r\n    get angle(): number {\r\n        return this._angle;\r\n    }\r\n    set angle(value: number) {\r\n\r\n        // normalize value\r\n        while (value > 180) {\r\n            value -= 360;\r\n        }\r\n        while (value < -180) {\r\n            value += 360;\r\n        }\r\n\r\n        // save angle, sin, and cos\r\n        this._angle = value;\r\n        this._sin = Math.sin(value * Math.PI / 180);\r\n        this._cos = Math.cos(value * Math.PI / 180);\r\n    }\r\n    /**\r\n     * Gets or sets a value that represents the change, in degrees,\r\n     * of the {@link angle} property per unit time.\r\n     * \r\n     * The default value for this property is **0**.\r\n     * \r\n     * See also the {@link steerAngleMax} property.\r\n     */\r\n    get steerAngle(): number {\r\n        return this._steerAngle;\r\n    }\r\n    set steerAngle(value: number) {\r\n        this._steerAngle = clamp(value, -this.steerAngleMax, this.steerAngleMax);\r\n    }\r\n    /**\r\n     * Gets or sets the maximum {@link steerAngle} value, in degrees.\r\n     * \r\n     * The default value for this property is **90** degrees, which means\r\n     * the {@link steerAngle} property is clamped to values between \r\n     * -90 and +90 degrees.\r\n     */\r\n    get steerAngleMax(): number {\r\n        return this._steerAngleMax;\r\n    }\r\n    set steerAngleMax(value: number) {\r\n        this._steerAngleMax = value;\r\n        this.steerAngle = this._steerAngle;\r\n    }\r\n    /**\r\n     * Gets or sets a value that represents the entity's current speed\r\n     * (amount by which to increase the entity's {@link position} in \r\n     * the direction determined by the entity's {@link angle} per\r\n     * unit time). \r\n     */\r\n    get speed(): number {\r\n        return this._speed;\r\n    }\r\n    set speed(value: number) {\r\n        this._speed = clamp(value, this.speedMin, this.speedMax);\r\n    }\r\n    /**\r\n     * Gets or sets the minimum {@link speed} value.\r\n     * \r\n     * The default value for this property is **0**.\r\n     */\r\n    get speedMin(): number {\r\n        return this._speedMin;\r\n    }\r\n    set speedMin(value: number) {\r\n        this._speedMin = value;\r\n        this.speed = this._speed;\r\n    }\r\n    /**\r\n     * Gets or sets the maximum {@link speed} value.\r\n     * \r\n     * The default value for this property is **null**, which \r\n     * means there is no maximum speed limit.\r\n     */\r\n    get speedMax(): number | null {\r\n        return this._speedMax;\r\n    }\r\n    set speedMax(value: number | null) {\r\n        this._speedMax = value;\r\n        this.speed = this._speed;\r\n    }\r\n    /**\r\n     * Gets or sets a value that represents the entity's current\r\n     * acceleration (amount by which to increase the entity's \r\n     * {@link speed} per unit time).\r\n     */\r\n    get acceleration(): number {\r\n        return this._accel;\r\n    }\r\n    set acceleration(value: number) {\r\n        this._accel = value;\r\n    }\r\n    /**\r\n     * Updates the entity's angle, speed, and position after a given\r\n     * time interval.\r\n     */\r\n    updatePosition(dt: number) {\r\n\r\n        // apply all behaviors\r\n        if (this.behaviors) {\r\n            for (let i = 0; i < this.behaviors.length; i++) {\r\n                const b = this.behaviors[i];\r\n                b.entity = this;\r\n                if (b.applyBehavior(this, dt)) {\r\n                    break; // stop iterating if applyBehavior returned true\r\n                }\r\n            }\r\n        }\r\n\r\n        // update angle\r\n        this.angle += this.steerAngle * dt;\r\n\r\n        // update speed\r\n        this.speed += this.acceleration * dt;\r\n\r\n        // update position\r\n        const p = this.position;\r\n        p.x += this.speed * this._cos * dt;\r\n        p.y += this.speed * this._sin * dt;\r\n    }\r\n    /**\r\n     * Gets the angle to turn to in order to match a target angle.\r\n     * \r\n     * Use this method to make gradual turns instead of changing\r\n     * the angle abruptly to a new value.\r\n     * \r\n     * @param targetAngle The angle we are aiming for.\r\n     * @param dt The time step.\r\n     * @param da The maximum angle to turn per time step.\r\n     * @returns The new angle needed to make a gradual turn from the\r\n     * current angle to the **targetAngle**.\r\n     */\r\n    getTurnAngle(targetAngle: number, dt: number, da = 2): number {\r\n        const step = Math.max(da, da * dt); // turn up to da degrees at a time\r\n        let delta = targetAngle - this.angle;\r\n\r\n        // normalize delta to [-180,+180]\r\n        if (delta < -180) {\r\n            delta += 360;\r\n        } else if (delta > 180) {\r\n            delta -= 360;\r\n        }\r\n\r\n        // close enough\r\n        if (Math.abs(delta) < step) {\r\n            return targetAngle;\r\n        }\r\n\r\n        // get closer\r\n        return this.angle + step * Math.sign(delta);\r\n    }\r\n    /**\r\n     * Gets the entity's current animation position and angle.\r\n     */\r\n    getAnimationPosition(q: Queue, start: IPoint, end: IPoint): IAnimationPosition {\r\n        const timeNow = this.simulation.timeNow;\r\n        this.updatePosition(timeNow - this._lastUpdate);\r\n        this._lastUpdate = timeNow;\r\n        return this;\r\n    }\r\n    /**\r\n     * Enter the single queue and wait.\r\n     */\r\n    async script() {\r\n        const sim = this.simulation;\r\n        this.enterQueueImmediately(sim.q);\r\n        while (!this.done) {\r\n            await this.delay(sim.step);\r\n        }\r\n        this.leaveQueue(sim.q);\r\n    }\r\n}\r\n\r\n//------------------------------------------------------------------------------------\r\n// Steering Behaviors\r\n\r\n/**\r\n * Base class for Steering Behaviors.\r\n */\r\nexport abstract class SteeringBehavior {\r\n    entity: SteeringVehicle | null = null;\r\n\r\n    /**\r\n     * Initializes a new instance of the SteeringBehavior class.\r\n     */\r\n    constructor(options?: any) {\r\n        setOptions(this, options);\r\n    }\r\n\r\n    /**\r\n     * Applies the behavior to the entity, updating its speed and\r\n     * angle to achieve the desired behavior.\r\n     * @returns False to continue iterating through the remaining behaviors,\r\n     * false to stop and not apply any remaining behaviors.\r\n     */\r\n    applyBehavior(e: SteeringVehicle, dt: number): boolean {\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Interface implemented by objects that acts as obstacles.\r\n */\r\nexport interface IObstacle {\r\n    /** Gets or sets the position of the obstacle's center. */\r\n    position: IPoint,\r\n    /** Gets or sets the radius of the obstacle. */\r\n    radius: number,\r\n    /** \r\n     * Gets or sets a value that determines whether entities\r\n     * that get close to the obstacle should ignore it of\r\n     * bounce off it.\r\n     */\r\n    bounce?: boolean\r\n}\r\n\r\n/**\r\n * WrapBehavior: Entity wraps around the simulation surface.\r\n */\r\nexport class WrapBehavior extends SteeringBehavior {\r\n    applyBehavior(e: SteeringVehicle, dt: number): boolean {\r\n        const bounds = e.simulation.bounds;\r\n        if (bounds) {\r\n            const p = e.position;\r\n            if (p.x < bounds[0].x) {\r\n                p.x = bounds[1].x;\r\n            } else if (p.x > bounds[1].x) {\r\n                p.x = bounds[0].x;\r\n            }\r\n            if (p.y < bounds[0].y) {\r\n                p.y = bounds[1].y;\r\n            } else if (p.y > bounds[1].y) {\r\n                p.y = bounds[0].y;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * BounceBehavior: Entity bounces around the simulation surface.\r\n */\r\nexport class BounceBehavior extends SteeringBehavior {\r\n    applyBehavior(e: SteeringVehicle, dt: number): boolean {\r\n        const bounds = e.simulation.bounds;\r\n        if (bounds) {\r\n            const\r\n                p = e.position,\r\n                r = e.radius,\r\n                xMin = bounds[0].x + r,\r\n                xMax = bounds[1].x - r,\r\n                yMin = bounds[0].y + r,\r\n                yMax = bounds[1].y - r;\r\n            if (p.x < xMin || p.x > xMax) {\r\n                e.angle = 180 - e.angle;\r\n                p.x = p.x < xMin ? xMin : xMax;\r\n            } else if (p.y < yMin || p.y > yMax) {\r\n                e.angle = -e.angle;\r\n                p.y = p.y < yMin ? yMin : yMax;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * WanderBehavior: Entity wanders around the simulation surface.\r\n */\r\nexport class WanderBehavior extends SteeringBehavior {\r\n    changeInterval = 10;\r\n    steerChange: RandomVar | null = null;\r\n    speedChange: RandomVar | null = null;\r\n    _timeLastChange = 0;\r\n    \r\n    constructor(options?: any) {\r\n        super();\r\n        setOptions(this, options);\r\n    }\r\n\r\n    applyBehavior(e: SteeringVehicle, dt: number): boolean {\r\n        const now = e.simulation.timeNow;\r\n        if (now - this._timeLastChange >= this.changeInterval) {\r\n            if (this.steerChange != null) {\r\n                e.steerAngle += this.steerChange.sample();\r\n            }\r\n            if (this.speedChange != null) {\r\n                e.speed += this.speedChange.sample();\r\n            }\r\n            this._timeLastChange = now;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * SeekBehavior: Entity moves toward a target.\r\n */\r\nexport class SeekBehavior extends SteeringBehavior {\r\n    target: IPoint | null = null;\r\n    readonly arrive = new Event();\r\n\r\n    constructor(options?: any) {\r\n        super();\r\n        setOptions(this, options);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value that represents the maximum change in\r\n     * angle per unit time while seeking the target.\r\n     * \r\n     * The default value for this property is **0.5**, which\r\n     * corresponds to a 0.5 degree change in direction per unit\r\n     * time while seeking a target.\r\n     */\r\n    seekAngle: number = 0.5;\r\n    /**\r\n     * Gets or sets the distance between the entity and the target\r\n     * that means the entity has arrived.\r\n     * \r\n     * The default value for this property is **null**, which causes\r\n     * the behavior to use the enitity's radius as the arrival \r\n     * distance.\r\n     */\r\n    arrivalDistance: number | null = null;\r\n    /**\r\n     * Gets or sets the distance at which the entity can proceed\r\n     * at full speed.\r\n     * \r\n     * The default value for this property is **null**, which causes\r\n     * the behavior to use half of the simulation width as the max\r\n     * speed distance.\r\n     */\r\n    maxSpeedDistance: number | null = null;\r\n\r\n    applyBehavior(e: SteeringVehicle, dt: number): boolean {\r\n        if (this.target) {\r\n\r\n            // adjust speed\r\n            const\r\n                dist = Point.distance(e.position, this.target),\r\n                distMax = this.maxSpeedDistance || (e.simulation.bounds[1].x / 2),\r\n                pct = dist / distMax;\r\n            e.speed = (e.speedMax as number) * pct;\r\n\r\n            // adjust angle\r\n            let angTarget = Point.angle(e.position, this.target);\r\n            e.angle = e.getTurnAngle(angTarget, dt, this.seekAngle);\r\n\r\n            // raise event on arrival\r\n            let arrivalDistance = this.arrivalDistance != null ? this.arrivalDistance : e.radius;\r\n            if (dist < arrivalDistance) {\r\n                this.onArrive();\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    onArrive(e?: EventArgs) {\r\n        this.arrive.raise(this, e || EventArgs.empty);\r\n    }\r\n}\r\n\r\n/**\r\n * AvoidBehavior: Entity avoids obstacles.\r\n */\r\nexport class AvoidBehavior extends SteeringBehavior {\r\n    _currentObstacle: IObstacle | null = null;\r\n    _saveColor = ''; // original color\r\n    _saveSpeed = 0; // original speed\r\n\r\n    constructor(options?: any) {\r\n        super();\r\n        setOptions(this, options);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the list of obstacles, represented by\r\n     * an array of {@link IObstacle} objects.\r\n     */\r\n    obstacles: IObstacle[] = [];\r\n    /**\r\n     * Gets or sets the color used to represent the entity\r\n     * while it is avoiding other entities.\r\n     * \r\n     * The default value for this property is an empty string,\r\n     * which preserves the original entity color while it is\r\n     * avoiding other entities.\r\n     */\r\n    avoidColor = '';\r\n    /**\r\n     * Gets or sets a value that represents the slow-down factor\r\n     * used to reduce the entity's speed while it is avoiding other \r\n     * entities.\r\n     * \r\n     * The default value for this property is **0.75**, which\r\n     * corresponds to a 25% speed reduction while avoiding other\r\n     * entities.\r\n     */\r\n    slowDown = 0.75; // slow down factor while avoiding\r\n    /**\r\n     * Gets or sets a value that represents the maximum change in\r\n     * angle per unit time while the entity is avoiding other \r\n     * entities.\r\n     * \r\n     * The default value for this property is **0.5**, which\r\n     * corresponds to a 0.5 degree change in direction per unit\r\n     * time while avoiding other entities.\r\n     */\r\n    avoidAngle = 0.5;\r\n    /**\r\n     * Gets or sets a value that determines whether the behavior\r\n     * should prevent other behaviors from being applied while \r\n     * avoiding an obstacle.\r\n     * \r\n     * The default value for this property is **true**.\r\n     */\r\n    preventOthersWhileAvoiding = true;\r\n    /**\r\n     * Gets or sets the current obstacle being avoided by this behavior.\r\n     */\r\n    get currentObstacle(): IObstacle | null {\r\n        return this._currentObstacle;\r\n    }\r\n    set currentObstacle(value: IObstacle | null) {\r\n        if (value !== this._currentObstacle) {\r\n            const e = this.entity;\r\n            if (e != null) {\r\n                if (this._currentObstacle === null && value !== null) { // start avoiding, save properties\r\n                    if (this.avoidColor) {\r\n                        this._saveColor = e.color;\r\n                        e.color = this.avoidColor;\r\n                    }\r\n                    this._saveSpeed = e.speed;\r\n                    e.speed *= this.slowDown;\r\n                } else if (this._currentObstacle != null && value === null) { // done avoiding, restore properties\r\n                    if (this._saveColor) {\r\n                        e.color = this._saveColor;\r\n                    }\r\n                    e.speed = this._saveSpeed;\r\n                }\r\n            }\r\n            this._currentObstacle = value;\r\n        }\r\n    }\r\n\r\n    applyBehavior(e: SteeringVehicle, dt: number): boolean {\r\n\r\n        // find nearest obstacle\r\n        const obstacle = this.getNearestObstacle(dt);\r\n\r\n        // change obstacle\r\n        this.currentObstacle = obstacle;\r\n\r\n        // avoid obstacle\r\n        if (obstacle != null) {\r\n            e.angle = this.getAvoidAngle(obstacle, dt);\r\n            e.steerAngle = 0; // don't turn while avoiding\r\n        }\r\n\r\n        // return true if we are in avoiding mode\r\n        return obstacle != null && this.preventOthersWhileAvoiding;\r\n    }\r\n\r\n    // gets the nearest obstacle to an entity\r\n    protected getNearestObstacle(dt: number, criticalDistance = this.entity ? this.entity.radius : 0): IObstacle | null {\r\n        const\r\n            e = this.entity as SteeringVehicle,\r\n            pNow = e.position,\r\n            pNext = {\r\n                x: pNow.x + e._cos,\r\n                y: pNow.y + e._sin\r\n            };\r\n        let obstacle: IObstacle | null = null,\r\n            minDist: number | null = null;\r\n        this.obstacles.forEach(o => {\r\n            if (o !== e) {\r\n                const\r\n                    offset = o.radius + e.radius + e.speed * dt,\r\n                    dist = Point.distance(pNow, o.position) - offset;\r\n                if (minDist === null || dist < minDist) { // closer\r\n                    if (dist <= criticalDistance) { // close enough...\r\n                        if (Point.distance(pNext, o.position) - offset < dist) { // and getting closer...\r\n                            if (minDist === null || o.bounce || (obstacle && o.bounce === obstacle.bounce)) { // prioritize bouncing obstacles\r\n                                minDist = dist;\r\n                                obstacle = o;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return obstacle;\r\n    }\r\n\r\n    // gets the angle to use in order to avoid an obstacle\r\n    protected getAvoidAngle(obstacle: IObstacle, dt: number): number {\r\n        const\r\n            e = this.entity as SteeringVehicle,\r\n            d = Point.distance(e.position, obstacle.position);\r\n        \r\n        // too close? bounce or ignore\r\n        if (d < obstacle.radius) {\r\n            return (obstacle.bounce)\r\n                ? e.angle + 180 + Math.random() * 6 - 3\r\n                : e.angle;\r\n        }\r\n\r\n        // choose new angle\r\n        const\r\n            aDelta = 90 * obstacle.radius / d,\r\n            d1 = this.getDeltaDistance(obstacle, +aDelta),\r\n            d2 = this.getDeltaDistance(obstacle, -aDelta),\r\n            avoidDelta = d1 > d2 ? +aDelta : -aDelta;\r\n        return e.getTurnAngle(e.angle + avoidDelta, dt, this.avoidAngle);\r\n    }\r\n\r\n    // measure the distance between an obstacle and a future entity position\r\n    protected getDeltaDistance(obstacle: IObstacle, aDelta: number): number {\r\n        const\r\n            e = this.entity as SteeringVehicle,\r\n            a = (e.angle + aDelta) * Math.PI / 180,\r\n            d = obstacle.radius,\r\n            ePos = e.position,\r\n            p = {\r\n                x: ePos.x + d * Math.cos(a),\r\n                y: ePos.y + d * Math.sin(a)\r\n            };\r\n        return Point.distance(obstacle.position, p);\r\n    }    \r\n}\r\n","import { EventArgs } from 'simscript';\r\nimport { SteeringVehicle, SteeringBehaviors, SeekBehavior } from './steering';\r\n\r\n/**\r\n * Steering simulation with entities that seek a target\r\n * (and re-start at a random position when they arrive).\r\n */\r\n export class SteeringSeek extends SteeringBehaviors {\r\n    onStarting(e?: EventArgs) {\r\n        super.onStarting(e);\r\n        \r\n        for (let i = 0; i < this.entityCount; i++) {\r\n            const e = new SteeringVehicle({\r\n                color: 'orange',\r\n                speedMin: 10,\r\n                speedMax: 50,\r\n                speed: 10 + Math.random() * (50 - 10),\r\n                steerAngleMax: 45,\r\n                angle: Math.round(Math.random() * 360),\r\n                position: this.getRandomPosition(),\r\n                behaviors: [\r\n                    new SeekBehavior({\r\n                        target: { // move towards the center\r\n                            x: this.bounds[1].x / 2,\r\n                            y: this.bounds[1].y / 2\r\n                        },\r\n                        seekAngle: 0.5, // turn up to 0.5 degrees/unit time\r\n                        arrive: (s: SeekBehavior) => { // re-start at random position on arrival\r\n                            const e = s.entity as SteeringVehicle;\r\n                            e.position = this.getRandomPosition();\r\n                        }\r\n                    }),\r\n                ],\r\n            });\r\n            this.activate(e);\r\n        }\r\n    }\r\n}\r\n","import { Uniform, EventArgs, setOptions } from 'simscript';\r\nimport {\r\n    SteeringVehicle, SteeringBehaviors, IObstacle,\r\n    AvoidBehavior, WrapBehavior, WanderBehavior\r\n} from './steering';\r\n\r\nconst staticObstacles: IObstacle[] = [\r\n    { position: { x: 100, y: 400 }, radius: 50 },\r\n    { position: { x: 150, y: 300 }, radius: 30 },\r\n    { position: { x: 200, y: 150 }, radius: 80 },\r\n    { position: { x: 500, y: 250 }, radius: 125 },\r\n    { position: { x: 800, y: 200 }, radius: 50 },\r\n    { position: { x: 800, y: 400 }, radius: 75 },\r\n];\r\n\r\n/**\r\n * Steering simulation with entities that avoid obstacles.\r\n */\r\nexport class SteeringAvoid extends SteeringBehaviors {\r\n    obstacles = staticObstacles;\r\n    avoidEntities = false;\r\n    avoidColor = 'red'; // slows down 3D animations\r\n\r\n    constructor(options?: any) {\r\n        super();\r\n        setOptions(this, options);\r\n    }\r\n\r\n    onStarting(e?: EventArgs) {\r\n        super.onStarting(e);\r\n\r\n        // array of obstacles used by the AvoidBehavior\r\n        const obstacles = [...this.obstacles];\r\n\r\n        // create wandering entities that avoid targets\r\n        for (let i = 0; i < this.entityCount; i++) {\r\n            const e = new SteeringVehicle({\r\n                color: 'orange',\r\n                speedMin: 10,\r\n                speedMax: 50,\r\n                speed: 10 + Math.random() * (50 - 10),\r\n                steerAngleMax: 45,\r\n                angle: Math.round(Math.random() * 360),\r\n                position: this.getRandomPosition(),\r\n                behaviors: [\r\n                    new AvoidBehavior({ // avoid obstacles\r\n                        obstacles: obstacles,\r\n                        avoidColor: this.avoidColor\r\n                    }),\r\n                    new WanderBehavior({ // wander (if not avoiding obstacles)\r\n                        steerChange: new Uniform(-20, +20),\r\n                        speedChange: new Uniform(-50, +50)\r\n                    }),\r\n                    new WrapBehavior() // wrap at the edges\r\n                ],\r\n            });\r\n            e.position.y = 0; // start away from static obstacles\r\n            this.activate(e);\r\n\r\n            // add entity to obstacle array\r\n            if (this.avoidEntities) {\r\n                obstacles.push(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Uniform, EventArgs, setOptions } from 'simscript';\r\nimport {\r\n    SteeringVehicle, SteeringBehaviors, \r\n    AvoidBehavior, SeekBehavior, BounceBehavior\r\n} from './steering';\r\n\r\n/**\r\n * Seek behavior with linear obstacles.\r\n */\r\n export class SteeringLinearObstaclesSeek extends SteeringBehaviors {\r\n    avoidColor = 'red';\r\n    obstacles = [\r\n        ...this.generateObstaclesForPath([\r\n            { x: -100, y: 450 },\r\n            { x: 450, y: 150 },\r\n            { x: 450, y: -10 }\r\n        ], 5, true),\r\n        ...this.generateObstaclesForPath([\r\n            { x: 1100, y: 450 },\r\n            { x: 550, y: 150 },\r\n            { x: 550, y: -10 },\r\n        ], 5, true),\r\n    ];\r\n\r\n    constructor(options?: any) {\r\n        super();\r\n        setOptions(this, options);\r\n    }\r\n\r\n    onStarting(e?: EventArgs) {\r\n        super.onStarting(e);\r\n        \r\n        const\r\n            obstacles = this.obstacles.slice(), // array with obstacles used by the AvoidBehavior\r\n            xPos = new Uniform(0, 1000), // // entity starting x position\r\n            yPos = new Uniform(460, 490), // entity starting y position\r\n            speed = new Uniform(10, 100), // entity starting speed\r\n            angle = new Uniform(0, 360); // entity starting angle\r\n\r\n        // create some wandering entities\r\n        for (let i = 0; i < this.entityCount; i++) {\r\n            const e = new SteeringVehicle({\r\n\r\n                // initialize entity properties\r\n                color: 'orange',\r\n                speedMin: 10,\r\n                speedMax: speed.sample(),\r\n                speed: speed.sample(),\r\n                angle: angle.sample(),\r\n                position: { x: xPos.sample(), y: yPos.sample() },\r\n                radius: 10,\r\n    \r\n                // initialize entity behaviors\r\n                behaviors: [\r\n                    new BounceBehavior(), // bounce off edges\r\n                    new AvoidBehavior({ // avoid obstacles\r\n                        obstacles: obstacles,\r\n                        avoidColor: this.avoidColor\r\n                    }),\r\n                    new SeekBehavior({ // seek exit\r\n                        target: { x: this.bounds[1].x / 2, y: 0 }, // exit point\r\n                        arrivalDistance: 25, // close enough\r\n                        arrive: (s: SeekBehavior) => { // remove entity from simulation on arrival\r\n                            const\r\n                                e = s.entity as SteeringVehicle,\r\n                                index = obstacles.indexOf(e);\r\n                            if (index > -1) {\r\n                                obstacles.splice(index, 1);\r\n                            }\r\n                            e.done = true;\r\n                        }\r\n                    }),\r\n                ],\r\n            });\r\n\r\n            // optionally, add this entity to the obstacle array\r\n            obstacles.push(e);\r\n\r\n            // activate the entity\r\n            this.activate(e);\r\n        }\r\n    }\r\n}\r\n","import {\r\n    Network, Queue, RandomInt, Uniform,\r\n    ILink, IPoint, INode, Point, setOptions\r\n} from 'simscript';\r\nimport {\r\n    SteeringVehicle, SteeringBehaviors, SeekBehavior, AvoidBehavior\r\n} from './steering';\r\n\r\nconst SPEED_MIN = 5;\r\nconst SPEED_MAX = 100;\r\nconst SEGMENT_COUNT = 10;\r\n\r\n// Simulation with a network and some Steering Vehicles\r\nexport class NetworkSteering extends SteeringBehaviors {\r\n    network = createNetwork(3, 5, 200, false); // nodes are 200m apart\r\n    rndNode = new RandomInt(this.network.nodes.length - 1);\r\n    speed = new Uniform(SPEED_MIN, SPEED_MAX);\r\n    vehicles: NetworkSteeringVehicle[] = [];\r\n    vehiclesDone = 0;\r\n\r\n    onStarting() {\r\n        super.onStarting();\r\n\r\n        this.maxTimeStep = 0.05;\r\n        this.vehicles = [];\r\n        this.vehiclesDone = 0;\r\n\r\n        // testing\r\n        if (false) {\r\n\r\n            // head-on\r\n            const\r\n                network = this.network,\r\n                nodes = network.nodes;\r\n            this.vehicles.push(new NetworkSteeringVehicle(this, {\r\n                speedMax: SPEED_MAX,\r\n                path: [\r\n                    ...network.shortestPath(nodes[0], nodes[4]),\r\n                    ...network.shortestPath(nodes[4], nodes[10])\r\n                ]\r\n            }));\r\n            this.vehicles.push(new NetworkSteeringVehicle(this, {\r\n                speedMax: SPEED_MAX / 1.5,\r\n                path: network.shortestPath(nodes[4], nodes[0]),\r\n            }));\r\n            this.vehicles.push(new NetworkSteeringVehicle(this, {\r\n                speedMax: SPEED_MAX * 1.5,\r\n                path: network.shortestPath(nodes[4], nodes[0]),\r\n            }));\r\n\r\n            // passing\r\n            this.vehicles.push(new NetworkSteeringVehicle(this, {\r\n                speedMax: SPEED_MAX,\r\n                path: [\r\n                    ...network.shortestPath(nodes[5], nodes[9]),\r\n                    ...network.shortestPath(nodes[9], nodes[10])\r\n                ]\r\n            }));\r\n            this.vehicles.push(new NetworkSteeringVehicle(this, {\r\n                speedMax: SPEED_MAX / 2,\r\n                path: network.shortestPath(nodes[6], nodes[9]),\r\n            }));\r\n            this.vehicles.push(new NetworkSteeringVehicle(this, {\r\n                speedMax: SPEED_MAX / 3,\r\n                path: network.shortestPath(nodes[7], nodes[9]),\r\n            }));\r\n        } else {\r\n\r\n            // generate entities with random paths\r\n            for (let i = 0; i < this.entityCount; i++) {\r\n                this.vehicles.push(new NetworkSteeringVehicle(this));\r\n            }\r\n        }\r\n\r\n        // activate all vehicles\r\n        this.vehicles.forEach(v => this.activate(v));\r\n    }\r\n}\r\n\r\n// Steering Vehicle that uses a SeekBehavior to travel on a network\r\nclass NetworkSteeringVehicle extends SteeringVehicle<NetworkSteering> {\r\n    path: ILink[] = [];\r\n\r\n    constructor(simulation: NetworkSteering, options?: any) {\r\n        super();\r\n\r\n        const\r\n            sim = simulation,\r\n            network = sim.network,\r\n            nodes = network.nodes,\r\n            speed = sim.speed.sample();\r\n\r\n        // initialize entity\r\n        setOptions(this, {\r\n\r\n            // simple properties\r\n            color: 'orange',\r\n            radius: 15,\r\n            speedMin: SPEED_MIN,\r\n            speedMax: speed,\r\n            speed: speed,\r\n\r\n            // behaviors\r\n            behaviors: [\r\n                new NetworkAvoidBehavior({\r\n                    avoidColor: 'red',\r\n                    obstacles: sim.vehicles,\r\n                }),\r\n                new NetworkSeekBehavior({\r\n                    arrivalDistance: 5, // less than the vehicle radius\r\n                    maxSpeedDistance: 10, // shorter than a link\r\n                    arrive: () => {\r\n                        this.done = true; // entity has reached its target\r\n                        sim.vehiclesDone++;\r\n                    }, \r\n                }),\r\n            ]\r\n        });\r\n\r\n        // apply options\r\n        setOptions(this, options);\r\n\r\n        // create a random path if we don't have one\r\n        if (!this.path || this.path.length === 0) {\r\n            let from = sim.rndNode.sample();\r\n            for (let i = 0; i < SEGMENT_COUNT; i++) {\r\n\r\n                // select to nodes\r\n                let to = sim.rndNode.sample();\r\n                while (to === from) {\r\n                    to = sim.rndNode.sample();\r\n                }\r\n\r\n                // append to path\r\n                this.path.push(...sim.network.shortestPath(nodes[from], nodes[to]));\r\n\r\n                // start from current position\r\n                from = to;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Behavior that causes entities to turn in order to overtake slower ones\r\n * and swerve to avoid head-on collisions with other entities.\r\n */\r\nexport class NetworkAvoidBehavior extends AvoidBehavior {\r\n    applyBehavior(e: NetworkSteeringVehicle, dt: number): boolean {\r\n        this.entity = e;\r\n\r\n        // find nearest obstacle\r\n        const obstacle = this.getNearestObstacle(dt, e.radius * 2);\r\n        if (obstacle instanceof NetworkSteeringVehicle) {\r\n            const\r\n                link = e.path[0],\r\n                dist = Point.distance(e.position, link.to.position as IPoint),\r\n                angDelta = Math.abs(e.angle - obstacle.angle);\r\n            if (dist > 3 * e.radius) { // don't turn if too close to nodes\r\n\r\n                // passing another vehicle\r\n                const pass = obstacle.speed < e.speed && angDelta < 45;\r\n\r\n                // swerve to avoid head-on collision\r\n                const avoid = angDelta > 135;\r\n\r\n                // change angle pass or avoid, slow down while avoiding\r\n                if (pass || avoid) {\r\n\r\n                    // turn to pass and to avoid collisions\r\n                    const\r\n                        turnAngle = pass ? +10 : -30, // left to pass, right to avoid\r\n                        targetAngle = Point.angle(link.from.position as IPoint, link.to.position as IPoint) + turnAngle;\r\n                    e.angle = e.getTurnAngle(targetAngle, dt);\r\n\r\n                    // adjust speed\r\n                    if (!this.currentObstacle) {\r\n                        if (avoid) { // slow down if avoiding\r\n                            e.speed *= this.slowDown;\r\n                        }\r\n                    }\r\n\r\n                    // remember current obstacle\r\n                    this.currentObstacle = obstacle;\r\n                    return this.preventOthersWhileAvoiding;\r\n                }\r\n            }\r\n        }\r\n\r\n        // not in avoiding mode\r\n        this.currentObstacle = null;\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Behavior that makes an entity traverse a path formed by a list\r\n * of {@link ILink} objects.\r\n */\r\nexport class NetworkSeekBehavior extends SeekBehavior {\r\n    _lastPath: ILink[] = [];\r\n\r\n    constructor(options: any) {\r\n        super();\r\n        this.seekAngle = 5; // max turn per unit time\r\n        setOptions(this, options);\r\n    }\r\n\r\n    applyBehavior(e: NetworkSteeringVehicle, dt: number): boolean {\r\n        const path = e.path;\r\n        if (path && path.length) {\r\n\r\n            // save from position\r\n            let link = path[0];\r\n            const startPosition = Point.clone(link.from.position as IPoint);\r\n\r\n            // merge with next link if the angle is the same\r\n            const angle = Point.angle(link.from.position as IPoint, link.to.position as IPoint);\r\n            if (path.length > 1) {\r\n                const nextLink = path[1];\r\n                if (Point.angle(nextLink.from.position as IPoint, nextLink.to.position as IPoint) === angle) {\r\n                    link = nextLink;\r\n                    path.shift();\r\n                }\r\n            }\r\n\r\n            // update target\r\n            this.target = link.to.position as IPoint;\r\n\r\n            // initialize position\r\n            if (path !== this._lastPath) {\r\n                this._lastPath = path;\r\n                e.position = startPosition;\r\n                e.angle = angle;\r\n            }\r\n\r\n            // adjust speed\r\n            const\r\n                dist = Point.distance(e.position, this.target),\r\n                distMax = this.maxSpeedDistance || (e.simulation.bounds[1].x / 2),\r\n                pct = dist / distMax;\r\n            e.speed = (e.speedMax as number) * pct;\r\n\r\n            // get arrival distance\r\n            let arrivalDistance = this.arrivalDistance != null\r\n                ? this.arrivalDistance\r\n                : e.radius;\r\n\r\n            // adjust angle\r\n            let angTarget = Point.angle(e.position, this.target);\r\n            e.angle = e.getTurnAngle(angTarget, dt, this.seekAngle);\r\n\r\n            // raise event on arrival\r\n            if (dist < arrivalDistance) {\r\n                path.shift();\r\n                if (path.length === 0) {\r\n                    this.onArrive();\r\n                }\r\n            }\r\n        }\r\n \r\n        // done\r\n        return false;\r\n    }\r\n}\r\n\r\n// create a grid-like network\r\nexport function createNetwork(rows: number, cols: number, spacing: number, sparse = true) {\r\n\r\n    // create nodes\r\n    const nodes: INode[] = [];\r\n    for (let r = 0; r < rows; r++) {\r\n        for (let c = 0; c < cols; c++) {\r\n            nodes.push({\r\n                id: nodes.length.toString(),\r\n                position: { x: c * spacing, y: r * spacing },\r\n                queue: new Queue()\r\n            });\r\n        }\r\n    }\r\n\r\n    // create links\r\n    const links: ILink[] = [];\r\n    for (let i = 0; i < nodes.length; i++) {\r\n        const row = Math.floor(i / cols);\r\n        const col = i % cols;\r\n\r\n        // grid links\r\n        if (col < cols - 1) { // right/left\r\n            links.push({ from: nodes[i], to: nodes[i + 1] });\r\n            links.push({ from: nodes[i + 1], to: nodes[i] });\r\n        }\r\n        if (row < rows - 1 && (!sparse || i % 2 !== 0)) { // up/down, sparse\r\n            links.push({ from: nodes[i], to: nodes[i + cols] });\r\n            links.push({ from: nodes[i + cols], to: nodes[i] });\r\n        }\r\n\r\n        // diagonal links\r\n        if (sparse) {\r\n            if (row === 0 && col === 0) {\r\n                links.push({ from: nodes[i + 1], to: nodes[i + cols] });\r\n                links.push({ from: nodes[i + cols], to: nodes[i + 1] });\r\n            }\r\n            if (row === 0 && col === cols - 1) {\r\n                links.push({ from: nodes[i - 1], to: nodes[i + cols] });\r\n                links.push({ from: nodes[i + cols], to: nodes[i - 1] });\r\n            }\r\n            if (row === rows - 1 && col === 0) {\r\n                links.push({ from: nodes[i + 1], to: nodes[i - cols] });\r\n                links.push({ from: nodes[i - cols], to: nodes[i + 1] });\r\n            }\r\n            if (row === rows - 1 && col === cols - 1) {\r\n                links.push({ from: nodes[i - 1], to: nodes[i - cols] });\r\n                links.push({ from: nodes[i - cols], to: nodes[i - 1] });\r\n            }\r\n        }\r\n    }\r\n\r\n    // return the network\r\n    return new Network({\r\n        nodes: nodes,\r\n        links: links,\r\n    });\r\n}\r\n","import React from 'react';\r\nimport { BrowserRouter, Switch, Route, NavLink } from 'react-router-dom';\r\nimport { SimulationComponent } from './simscript-react/components';\r\n\r\n// SimScript samples\r\nimport { BarberShop } from './simulations/simscript/barbershop';\r\nimport { MMC, MMCComponent } from './simulations/simscript/mmc';\r\nimport { Crosswalk, CrosswalkComponent } from './simulations/simscript/crosswalk';\r\n\r\n// GPSS samples\r\nimport { Telephone, TelephoneComponent } from './simulations/gpss/telephone';\r\nimport { TVRepairShop, TVRepairShopComponent } from './simulations/gpss/tv-repair-shop';\r\nimport { OrderPoint, OrderPointComponent } from './simulations/gpss/order-point';\r\nimport { Textile, TextileComponent } from './simulations/gpss/textile';\r\n\r\n// Steering samples\r\nimport { SteeringComponent } from './simulations/steering/steering';\r\nimport { SteeringSeek } from './simulations/steering/seek';\r\nimport { SteeringAvoid } from './simulations/steering/avoid';\r\nimport { SteeringLinearObstaclesSeek } from './simulations/steering/seek-avoid';\r\nimport { NetworkSteering } from './simulations/steering/network';\r\n\r\nimport 'simscript/dist/simscript.css';\r\nimport './App.css';\r\n\r\n// link with active class name\r\nfunction MyLink(props: any) {\r\n    return <NavLink exact activeClassName='active' to={props.to}>\r\n        {props.children}\r\n    </NavLink>;\r\n}\r\n\r\n// application\r\nexport default function App() {\r\n    return (\r\n        <BrowserRouter>\r\n            <h1>\r\n                SimScript in React\r\n            </h1>\r\n            <div className='content'>\r\n                <div className='link-container'>\r\n                    <nav>\r\n                        <MyLink to='/'>Home</MyLink>\r\n                        <details open={true}>\r\n                            <summary>SimScript</summary>\r\n                            <MyLink to='/bshop'>Barbershop</MyLink>\r\n                            <MyLink to='/mmc'>M/M/C (default)</MyLink>\r\n                            <MyLink to='/mmc-cst'>M/M/C (custom)</MyLink>\r\n                            <MyLink to='/xwlk'>Crosswalk</MyLink>\r\n                            <MyLink to='/xwlk-anim'>Crosswalk (animated)</MyLink>\r\n                        </details>\r\n                        <details>\r\n                            <summary>GPSS</summary>\r\n                            <MyLink to='/phone'>Telephone System</MyLink>\r\n                            <MyLink to='/tv'>TV Repair Shop</MyLink>\r\n                            <MyLink to='/order'>Order Point</MyLink>\r\n                            <MyLink to='/textile'>Textile Factory</MyLink>\r\n                        </details>\r\n                        <details>\r\n                            <summary>Steering (SVG)</summary>\r\n                            <MyLink to='/seek'>Seek</MyLink>\r\n                            <MyLink to='/avoid'>Avoid</MyLink>\r\n                            <MyLink to='/seek-avoid'>Seek and Avoid</MyLink>\r\n                            <MyLink to='/network'>Network</MyLink>\r\n                        </details>\r\n                        <details>\r\n                            <summary>Steering (X3DOM)</summary>\r\n                            <MyLink to='/seek-x3d'>Seek</MyLink>\r\n                            <MyLink to='/avoid-x3d'>Avoid</MyLink>\r\n                            <MyLink to='/seek-avoid-x3d'>Seek and Avoid</MyLink>\r\n                            <MyLink to='/network-x3d'>Network</MyLink>\r\n                        </details>\r\n                    </nav>\r\n                </div>\r\n\r\n                {/* \r\n                A <Switch> looks through its children <Route>s and\r\n                renders the first one that matches the current URL. \r\n                */}\r\n                <Switch>\r\n\r\n                    {/* SimScript samples */}\r\n                    <Route path='/bshop'>\r\n                        <div>\r\n                            <h1>\r\n                                BarberShop Simulation</h1>\r\n                            <p>\r\n                                A <a href='https://try-mts.com/gpss-introduction-and-barber-shop-simulation/'>\r\n                                classic GPSS simulation example</a>:\r\n                                customers arrive at a barbershop, wait until the barber is available,\r\n                                get serviced, and leave.</p>\r\n                            <SimulationComponent key='bshop' sim={new BarberShop()} />\r\n                        </div>\r\n                    </Route>\r\n                    <Route path='/mmc'>\r\n                        <div>\r\n                            <h1>\r\n                                M/M/C Simulation (default)</h1>\r\n                            <p>\r\n                                A <a href='https://en.wikipedia.org/wiki/M/M/c_queue'>\r\n                                classic M/M/C queueing system</a>:\r\n                                Entities arrive, are served by one of C servers, and leave.</p>\r\n                            <p>\r\n                                This version shows the standard <b>SimScript</b> output table.</p>\r\n                            <SimulationComponent key='mmc' sim={new MMC()} />\r\n                        </div>\r\n                    </Route>\r\n                    <Route path='/mmc-cst'>\r\n                        <div>\r\n                            <h1>\r\n                                M/M/C Simulation (custom)</h1>\r\n                            <p>\r\n                                A <a href='https://en.wikipedia.org/wiki/M/M/c_queue'>\r\n                                    classic M/M/C queueing system</a>.\r\n                                Entities arrive, are served by one of C servers, and leave.</p>\r\n                            <p>\r\n                                This version shows a custom component that:</p>\r\n                            <ol>\r\n                                <li>\r\n                                    Allows users to edit the simulation parameters, and</li>\r\n                                <li>\r\n                                    Shows the theoretical/calculated values in italics\r\n                                    next to the results calculated by <b>SimScript</b>.</li>\r\n                            </ol>\r\n                            <MMCComponent key='mmc-cst' sim={new MMC()} />\r\n                        </div>\r\n                    </Route>\r\n                    <Route path='/xwlk'>\r\n                        <div>\r\n                            <h1>\r\n                                Crosswalk Simulation</h1>\r\n                            <p>\r\n                                Simulates a crosswalk with a traffic light.</p>\r\n                            <p>\r\n                                Shows how to use the <b>waitsignal</b> and <b>sendSignal</b> methods.</p>\r\n                            <CrosswalkComponent\r\n                                key='xwlk'\r\n                                sim={new Crosswalk()}\r\n                                animated={false} />\r\n                        </div>\r\n                    </Route>\r\n                    <Route path='/xwlk-anim'>\r\n                        <div>\r\n                            <h1>\r\n                                Crosswalk Simulation (animated)</h1>\r\n                            <p>\r\n                                Simulates a crosswalk with a traffic light.</p>\r\n                            <p>\r\n                                Shows how to use the <b>waitsignal</b> and <b>sendSignal</b> methods.</p>\r\n                            <CrosswalkComponent\r\n                                key='xwlk-anim'\r\n                                sim={new Crosswalk({ slowMode: true })}\r\n                                animated='svg' />\r\n                        </div>\r\n                    </Route>\r\n\r\n                    {/* GPSS samples */}\r\n                    <Route path='/phone'>\r\n                        <div>\r\n                            <h1>\r\n                                Telephone System Simulation</h1>\r\n                            <p>\r\n                                A simple telephone system has two external lines.\r\n                                Calls, which originate externally, arrive every 100±60 seconds.\r\n                                When the line is occupied, the caller redials after 5±1 minutes have elapsed.\r\n                                Call duration is 3±1 minutes.</p>\r\n                            <p>\r\n                                A tabulation of the distribution of the time each caller takes to make\r\n                                a successful call is required.</p>\r\n                            <p>\r\n                                How long will it take for 200 calls to be completed?</p>\r\n                            <TelephoneComponent key='phone' sim={new Telephone()} />\r\n                        </div>\r\n                    </Route>\r\n                    <Route path='/tv'>\r\n                        <div>\r\n                            <h1>\r\n                                TV Repair Shop Simulation</h1>\r\n                            <p>\r\n                                A television shop employs a single repairman to overhaul its rented\r\n                                television sets, service customers' sets and do on-the-spot repairs.</p>\r\n                            <ul>\r\n                                <li>\r\n                                    Overhaul of company owned television sets commences every 40±8 hours\r\n                                    and takes 10±1 hours to complete.</li>\r\n                                <li>\r\n                                    On-the-spot repairs, such as fuse replacement, tuning and adjustments\r\n                                    are done immediately. These arrive every 90±10 minutes and take 15±5\r\n                                    minutes.</li>\r\n                                <li>\r\n                                    Customers' television sets requiring normal service arrive every 5±1\r\n                                    hours and take 120±30 minutes to complete.</li>\r\n                                <li>\r\n                                    Normal service of television sets has a higher priority than the\r\n                                    overhaul of company owned, rented sets.</li>\r\n                            </ul>\r\n                            <p>\r\n                                Simulate the operation of the repair department for 50 days and\r\n                                determine\r\n                                (1)&nbsp;The utilization of the repairman and\r\n                                (2)&nbsp;The delays in the service to customers.</p>\r\n                            <TVRepairShopComponent key='tv' sim={new TVRepairShop()} />\r\n                        </div>\r\n                    </Route>\r\n                    <Route path='/order'>\r\n                        <div>\r\n                            <h1>\r\n                                Order Point Simulation</h1>\r\n                            <p>\r\n                                An inventory system is controlled by an order point, set at 600 units,\r\n                                and an economic order quantity of 500 units.</p>\r\n                            <p>\r\n                                The initial stock quantity is 700.\r\n                                Daily demand is in the range 40 to 63 units, evenly distributed.\r\n                                The lead-time from ordering to delivery of goods is one week (5 days).</p>\r\n                            <p>\r\n                                Simulate the inventory system for a period of 100 days and\r\n                                determine\r\n                                (1)&nbsp;The distribution of inventory and\r\n                                (2)&nbsp;The actual daily sales.</p>\r\n                            <OrderPointComponent key='order' sim={new OrderPoint()} />\r\n                        </div>\r\n                    </Route>\r\n                    <Route path='/textile'>\r\n                        <div>\r\n                            <h1>\r\n                                Textile Factory Simulation</h1>\r\n                            <p>\r\n                                A textile factory produces fine mohair yarn in three departments.</p>\r\n                            <p>\r\n                                The first department draws and blends the raw material, in sliver form,\r\n                                and reduces it to a suitable thickness for spinning, in 5 reducer frames.\r\n                                The second department spins the yarn in one of 40 spinning frames.\r\n                                The final process is in the winding department, where the yarn is wound\r\n                                from spinning bobbins onto cones for dispatch.</p>\r\n                            <p>\r\n                                There are 8 winding frames to perform the winding operation.\r\n                                The factory works 8 hours per day.\r\n                                The unit of production is 10 kilograms of yarn.\r\n                                Reducing frames produce one unit every 38±2 minutes, while the spinning\r\n                                frames and winding frames produce one unit in 320±20 minutes and 64±4\r\n                                minutes, respectively.</p>\r\n                            <p>\r\n                                The initial inventory of reduced material is 50 units, spun material\r\n                                is 25 units and finished yarn is 25 units.\r\n                                The finished material is dispatched, in a container of capacity 200\r\n                                units every two days.</p>\r\n                            <p>\r\n                                Simulate the production process in the textile factory for 5 days to find\r\n                                (1)&nbsp;The distribution of the in-process inventories and\r\n                                (2)&nbsp;The utilization of each of the three types of machines.</p>\r\n                            <TextileComponent key='textile' sim={new Textile()} />\r\n                        </div>\r\n                    </Route>\r\n\r\n                    {/* Steering samples (SVG) */}\r\n                    <Route path='/seek'>\r\n                        <div>\r\n                            <h1>Seek Simulation</h1>\r\n                            <p>\r\n                                This sample shows entities that implement a <b>SeekBehavior</b>.</p>\r\n                            <p>\r\n                                They move towards the center of the animation, slow down as they\r\n                                approach the target, and restart from a random position when they\r\n                                reach the target.</p>\r\n                            <SteeringComponent key='seek' sim={new SteeringSeek()} />\r\n                        </div>\r\n                    </Route>\r\n                    <Route path='/avoid'>\r\n                        <div>\r\n                            <h1>Avoid Simulation</h1>\r\n                            <p>\r\n                                Shows how to implement an <b>AvoidBehavior</b> that causes entities\r\n                                to avoid obstacles.</p>\r\n                            <p>\r\n                                In this example, in addition to the static obstacles shown as grey\r\n                                circles, other entities are also treated as obstacles.</p>\r\n                            <SteeringComponent key='avoid' sim={new SteeringAvoid({ avoidEntities: true })} />\r\n                        </div>\r\n                    </Route>\r\n                    <Route path='/seek-avoid'>\r\n                        <div>\r\n                            <h1>Seek and Avoid Simulation</h1>\r\n                            <p>\r\n                                Entities use a <b>SeekBehavior</b> to reach the exit and an{' '}\r\n                                <b>AvoidBehavior</b> to avoid walls and other entities.</p>\r\n                            <SteeringComponent key='seek-avoid' sim={new SteeringLinearObstaclesSeek()} />\r\n                        </div>\r\n                    </Route>\r\n                    <Route path='/network'>\r\n                        <div>\r\n                            <h1>Network Steering Simulation</h1>\r\n                            <p>\r\n                                Shows how you can use steering behaviors with networks.</p>\r\n                            <p>\r\n                                The sample creates a network and uses it to create paths for\r\n                                the entities.</p>\r\n                            <p>\r\n                                Entities traverse the paths using a <b>NetworkSeekBehavior</b>{' '}\r\n                                and avoid other entities using a <b>NetworkAvoidBehavior</b>.</p>\r\n                            <SteeringComponent\r\n                                key='network'\r\n                                sim={new NetworkSteering()}\r\n                                animated='svg'\r\n                                viewBox='-100 -50 1000 500' />\r\n                        </div>\r\n                    </Route>\r\n\r\n                    {/* Steering samples (X3DOM) */}\r\n                    <Route path='/seek-x3d'>\r\n                        <div>\r\n                            <h1>Seek Simulation</h1>\r\n                            <p>\r\n                                This sample shows entities that implement a <b>SeekBehavior</b>.</p>\r\n                            <p>\r\n                                They move towards the center of the animation, slow down as they\r\n                                approach the target, and restart from a random position when they\r\n                                reach the target.</p>\r\n                            <SteeringComponent\r\n                                key='seek-x3d'\r\n                                sim={new SteeringSeek()}\r\n                                animated='x3d' />\r\n                        </div>\r\n                    </Route>\r\n                    <Route path='/avoid-x3d'>\r\n                        <div>\r\n                            <h1>Avoid Simulation</h1>\r\n                            <p>\r\n                                Shows how to implement an <b>AvoidBehavior</b> that causes entities\r\n                                to avoid obstacles.</p>\r\n                            <p>\r\n                                In this example, in addition to the static obstacles shown as grey\r\n                                circles, other entities are also treated as obstacles.</p>\r\n                            <SteeringComponent\r\n                                key='avoid-x3d'\r\n                                sim={new SteeringAvoid({ avoidEntities: true })}\r\n                                animated='x3d' />\r\n                        </div>\r\n                    </Route>\r\n                    <Route path='/seek-avoid-x3d'>\r\n                        <div>\r\n                            <h1>Seek and Avoid Simulation</h1>\r\n                            <p>\r\n                                Entities use a <b>SeekBehavior</b> to reach the exit and an{' '}\r\n                                <b>AvoidBehavior</b> to avoid walls and other entities.</p>\r\n                            <SteeringComponent\r\n                                key='seek-avoid-x3d'\r\n                                sim={new SteeringLinearObstaclesSeek()}\r\n                                animated='x3d' />\r\n                        </div>\r\n                    </Route>\r\n                    <Route path='/network-x3d'>\r\n                        <div>\r\n                            <h1>Network Steering Simulation</h1>\r\n                            <p>\r\n                                Shows how you can use steering behaviors with networks.</p>\r\n                            <p>\r\n                                The sample creates a network and uses it to create paths for\r\n                                the entities.</p>\r\n                            <p>\r\n                                Entities traverse the paths using a <b>NetworkSeekBehavior</b>\r\n                                and avoid other entities using a <b>NetworkAvoidBehavior</b>.</p>\r\n                            <SteeringComponent\r\n                                key='network-x3d'\r\n                                sim={new NetworkSteering()}\r\n                                animated='x3d'\r\n                                viewPoint={\r\n                                    `<viewpoint\r\n                                        position=\"400 -80 585\"\r\n                                        orientation=\"1 0 0 0.4\"\r\n                                        centerOfRotation=\"0 0 -20\">\r\n                                    </viewpoint>`}\r\n                            />\r\n                        </div>\r\n                    </Route>\r\n\r\n                    {/* home */}\r\n                    <Route path='/'>\r\n                        <Home />\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\n//\r\nfunction Home() {\r\n    return <div>\r\n        <h1>\r\n            SimScript/React Demo</h1>\r\n        <p>\r\n            This demo is a <b>React</b> app that shows simulations created with{' '}\r\n            <a href='https://www.npmjs.com/package/simscript'><b>SimScript</b></a>,\r\n            a Discrete Event Simulation Library in TypeScript with support for\r\n            2D and 3D animations.</p>\r\n        <p>\r\n            The sample simulations are divided into three categories:</p>\r\n        <ol>\r\n            <li>\r\n                <b>SimScript</b>: These are simple examples that demonstrate\r\n                SimScript features.</li>\r\n            <li>\r\n                <b>GPSS</b>: These samples are inspired by the set of{' '}\r\n                <a href=\"http://www.minutemansoftware.com/tutorial/tutorial_manual.htm\">GPSS samples</a>{' '}\r\n                published by Minuteman software.<br />\r\n                They show how you can use SimScript to simulate a wide range of practical\r\n                applications and allow you to compare results obtained by GPSS and SimScript.</li>\r\n            <li>\r\n                <b>Steering</b>: These samples are inspired by the article{' '}\r\n                <a href='http://www.red3d.com/cwr/steer/'>Steering Behaviors For Autonomous Characters</a>.{' '}\r\n                They present solutions for a common requirement of autonomous characters\r\n                in simulations and games: the ability to navigate around their world\r\n                in a life-like and improvisational manner.</li>\r\n        </ol>\r\n    </div>;\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}